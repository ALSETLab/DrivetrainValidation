within ;
model Hacker_Q150_45_fmu
// Model automatically generated by Dymola from FMI model description
public
  type Battery_Common_Interfaces_ElectricChargeInput = Real (unit = "C", quantity = "ElectricCharge");
  type Battery_Common_Interfaces_ElectricChargeOutput = Real (unit = "C", quantity = "ElectricCharge");
  type Battery_Common_Interfaces_ElectricCurrentInput = Real (unit = "A", quantity = "ElectricCurrent");
  type Battery_Common_Interfaces_ElectricCurrentOutput = Real (unit = "A", quantity = "ElectricCurrent");
  type Battery_Common_Interfaces_ElectricPowerInput = Real (unit = "W", quantity = "Power");
  type Battery_Common_Interfaces_ElectricPowerOutput = Real (unit = "W", quantity = "Power");
  type Battery_Common_Interfaces_ElectricResistanceInput = Real (unit = "Ohm", quantity = "Resistance");
  type Battery_Common_Interfaces_StateOfChargeInput = Real (unit = "1", quantity = "StateOfCharge", min = 0.0, max = 1.0);
  type Battery_Common_Interfaces_StateOfChargeOutput = Real (unit = "1", quantity = "StateOfCharge", min = 0.0, max = 1.0);
  type Battery_Common_Interfaces_StateOfHealthInput = Real (unit = "1", quantity = "StateOfHealth");
  type Battery_Common_Interfaces_StateOfHealthOutput = Real (unit = "1", quantity = "StateOfHealth");
  type Battery_Common_Interfaces_TemperatureInput = Real (unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 0.0);
  type Battery_Common_Interfaces_TemperatureOutput = Real (unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 0.0);
  type Battery_Common_Interfaces_VoltageInput = Real (unit = "V", quantity = "ElectricPotential");
  type Battery_Common_Interfaces_VoltageOutput = Real (unit = "V", quantity = "ElectricPotential");
  type Battery_Common_Types_StateOfCharge = Real (unit = "1", quantity = "StateOfCharge", min = 0.0, max = 1.0);
  type Battery_Common_Types_StateOfHealth = Real (unit = "1", quantity = "StateOfHealth");
  type DymolaModels_Blocks_Interfaces_AngleInput = Real (unit = "rad", displayUnit = "deg", quantity = "Angle");
  type DymolaModels_Blocks_Interfaces_AngularVelocityInput = Real (unit = "rad/s", displayUnit = "1/min", quantity = "AngularVelocity");
  type DymolaModels_Blocks_Interfaces_ElectricCurrentInput = Real (unit = "A", quantity = "ElectricCurrent");
  type DymolaModels_Blocks_Interfaces_EnergyOutput = Real (unit = "J", quantity = "Energy");
  type DymolaModels_Blocks_Interfaces_NormalizedInput = Real (unit = "1");
  type DymolaModels_Blocks_Interfaces_NormalizedOutput = Real (unit = "1");
  type DymolaModels_Blocks_Interfaces_PowerInput = Real (unit = "W", quantity = "Power");
  type DymolaModels_Blocks_Interfaces_PowerOutput = Real (unit = "W", quantity = "Power");
  type DymolaModels_Blocks_Interfaces_TorqueInput = Real (unit = "N.m", quantity = "Torque");
  type DymolaModels_Blocks_Interfaces_VoltageInput = Real (unit = "V", quantity = "ElectricPotential");
  type Modelica_Blocks_Interfaces_BooleanInput = Boolean;
  type Modelica_Blocks_Interfaces_BooleanOutput = Boolean;
  type Modelica_Blocks_Interfaces_RealInput = Real;
  type Modelica_Blocks_Interfaces_RealOutput = Real;
  type Modelica_Blocks_Interfaces_RealVectorInput = Real;
  type Modelica_SIunits_Angle = Real (unit = "rad", displayUnit = "deg", quantity = "Angle");
  type Modelica_SIunits_AngularAcceleration = Real (unit = "rad/s2", quantity = "AngularAcceleration");
  type Modelica_SIunits_AngularVelocity = Real (unit = "rad/s", quantity = "AngularVelocity");
  type Modelica_SIunits_Area = Real (unit = "m2", quantity = "Area");
  type Modelica_SIunits_Capacitance = Real (unit = "F", quantity = "Capacitance", min = 0.0);
  type Modelica_SIunits_Current = Real (unit = "A", quantity = "ElectricCurrent");
  type Modelica_SIunits_Density = Real (unit = "kg/m3", displayUnit = "g/cm3", quantity = "Density", min = 0.0);
  type Modelica_SIunits_Diameter = Real (unit = "m", quantity = "Length", min = 0.0);
  type Modelica_SIunits_ElectricCharge = Real (unit = "C", quantity = "ElectricCharge");
  type Modelica_SIunits_ElectricCurrent = Real (unit = "A", quantity = "ElectricCurrent");
  type Modelica_SIunits_ElectricPotential = Real (unit = "V", quantity = "ElectricPotential");
  type Modelica_SIunits_ElectricalTorqueConstant = Real (unit = "N.m/A", quantity = "ElectricalTorqueConstant");
  type Modelica_SIunits_Emissivity = Real (unit = "1", quantity = "Emissivity");
  type Modelica_SIunits_Frequency = Real (unit = "Hz", quantity = "Frequency");
  type Modelica_SIunits_HeatCapacity = Real (unit = "J/K", quantity = "HeatCapacity");
  type Modelica_SIunits_HeatFlowRate = Real (unit = "W", quantity = "Power");
  type Modelica_SIunits_Height = Real (unit = "m", quantity = "Length", min = 0.0);
  type Modelica_SIunits_Inductance = Real (unit = "H", quantity = "Inductance");
  type Modelica_SIunits_Inertia = Real (unit = "kg.m2", quantity = "MomentOfInertia");
  type Modelica_SIunits_Length = Real (unit = "m", quantity = "Length");
  type Modelica_SIunits_LinearTemperatureCoefficient = Real (unit = "1/K", quantity = "LinearTemperatureCoefficient");
  type Modelica_SIunits_MolarEnergy = Real (unit = "J/mol", nominal = 20000.0, quantity = "MolarEnergy");
  type Modelica_SIunits_Power = Real (unit = "W", quantity = "Power");
  type Modelica_SIunits_Resistance = Real (unit = "Ohm", quantity = "Resistance");
  type Modelica_SIunits_RotationalDampingConstant = Real (unit = "N.m.s/rad", quantity = "RotationalDampingConstant");
  type Modelica_SIunits_SpecificHeatCapacity = Real (unit = "J/(kg.K)", quantity = "SpecificHeatCapacity");
  type Modelica_SIunits_Temperature = Real (unit = "K", displayUnit = "degC", nominal = 300.0, quantity = "ThermodynamicTemperature", min = 0.0);
  type Modelica_SIunits_TemperatureDifference = Real (unit = "K", quantity = "ThermodynamicTemperature");
  type Modelica_SIunits_TemperatureSlope = Real (unit = "K/s", quantity = "TemperatureSlope");
  type Modelica_SIunits_ThermalConductance = Real (unit = "W/K", quantity = "ThermalConductance");
  type Modelica_SIunits_ThermalConductivity = Real (unit = "W/(m.K)", quantity = "ThermalConductivity");
  type Modelica_SIunits_Thickness = Real (unit = "m", quantity = "Length", min = 0.0);
  type Modelica_SIunits_Time = Real (unit = "s", quantity = "Time");
  type Modelica_SIunits_Torque = Real (unit = "N.m", quantity = "Torque");
  type Modelica_SIunits_Voltage = Real (unit = "V", quantity = "ElectricPotential");
  type Battery_Common_Types_GeometricDesign = enumeration(
      cylindric                                                     "Cylindric cell",
      prismatic "Prismatic or pouch cell");
  type Battery_Common_Types_KindOfOneToManyQ = enumeration(
      MultiPlex                                                      "MultiPlex P_loss is passed to each manyHeatPort[:].Q_flow",
      QSplit
        "QSplit P_loss is split to each manyHeatPort[:].Q_flow, i.e. P_loss/numberOfElements = manyHeatPort[:].Q_flow");
  type Battery_Common_Types_KindOfOneToManyT = enumeration(
      MeanT                                                      "MeanT T is the mean of manyHeatPort[:].T",
      MinT "MinT T is the min of manyHeatPort[:].T",
      MaxT "MaxT T is the max of manyHeatPort[:].T",
      MiddleT
        "MiddleT T is equal to the element sitting in the middle of manyHeatPort[:].T, (rounded up)");
  type Battery_Common_Types_PackType = enumeration(
      scaled                                              "Scaled pack",
      discretized "Discretized pack");
  type Battery_Common_Types_TableDependency3d = enumeration(
      SOC_T_I                                                       "SOC (u1), temperature (u2) and current (u3) dependent tables",
      SOC_I_T "SOC (u1), current (u2) and temperature (u3) dependent tables",
      T_SOC_I "temperature (u1), SOC (u2) and current (u3) dependent tables",
      T_I_SOC "temperature (u1), current (u2) and SOC (u3) dependent tables",
      I_SOC_T "current (u1), SOC (u2) and temperature (u3) dependent tables",
      I_T_SOC "current (u1), temperature (u2) and SOC (u3) dependent tables");
  type Battery_Common_Types_TableDependencyOCV = enumeration(
      SOC_T                                                        "SOC (u1) and Temperature (u2) dependent tables",
      T_SOC "Temperature (u1) and SOC (u2) dependent tables");
  type BrushlessDCDrives_Common_Types_FluxSource = enumeration(
      TorqueConst                                                          "Torque constant",
      SpeedConst "Speed constant");
  type DymolaModels_Blocks_Choices_AssertActions = enumeration(
      ignore                                                          "Ignore, continue simulation",
      warn "Print warning, continue simulation",
      error "Print error, abort simulation");
  type SDF_Types_ExtrapolationMethod = enumeration(
      Hold                                              "Hold the last value",
      Linear "Linear extrapolation",
      None "No extrapolation");
  type SDF_Types_InterpolationMethod = enumeration(
      Hold                                              "Hold the last value",
      Nearest "Take the nearest value",
      Linear "Linear interpolation",
      Akima "Akima spline interpolation",
      FritschButland "Fritsch-Butland spline interpolation",
      Steffen "Steffen spline interpolation");
protected
  record drive_rec
    DymolaModels_Blocks_Interfaces_NormalizedInput dutyCycleIn "Ratio of on-time to period duration";
    Modelica_Blocks_Interfaces_BooleanInput rotateCW_In;
    Modelica_Blocks_Interfaces_RealInput tau "Accelerating torque acting at flange (= -flange.tau)";
    Modelica_Blocks_Interfaces_RealOutput w1 "Absolute angular velocity of flange_a as output signal";
    Modelica_Blocks_Interfaces_RealOutput tau1 "Torque in flange flange_a and flange_b (tau = flange_a.tau = -flange_b.tau) as output signal";
  protected
    record controller_rec
      constant Integer m = 3 "Number of phases";
      constant Boolean useDirectionInput = true;
      constant Boolean rotateCW = false;
      Modelica_Blocks_Interfaces_BooleanInput rotateCW_In;
      DymolaModels_Blocks_Interfaces_NormalizedOutput dutyCycleOut "Connector of Real output signal";
      DymolaModels_Blocks_Interfaces_NormalizedInput dutyCycleIn "Ratio of on-time to period duration";
      Modelica_Blocks_Interfaces_BooleanOutput rotateCW_Out;
    protected
      record bldcBus_rec
        DymolaModels_Blocks_Interfaces_TorqueInput airgapTorque "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentAC_Averaged "DC current of the inverter";
        DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentDC "DC current of the inverter";
        DymolaModels_Blocks_Interfaces_PowerOutput electricMachinePower "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_PowerOutput innerMechanicPower "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_TorqueInput innerTorque "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_AngleInput machineAngle "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_AngularVelocityInput machineSpeed "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_VoltageInput voltageDC "DC current of the inverter";
      end bldcBus_rec;
    public
      bldcBus_rec bldcBus;
    end controller_rec;
  public
    controller_rec controller;
  protected
    record modulation_rec
      constant Integer m = 3 "Number of phases";
      DymolaModels_Blocks_Interfaces_NormalizedInput dutyCycleIn "Ratio of on-time to period duration";
      DymolaModels_Blocks_Interfaces_NormalizedOutput dutyCycleOut "Connector of Real output signal";
      Modelica_Blocks_Interfaces_BooleanInput rotateCW_In;
      Modelica_Blocks_Interfaces_BooleanOutput rotateCW;
    protected
      record bldcBus_rec
        DymolaModels_Blocks_Interfaces_TorqueInput airgapTorque "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentAC_Averaged "DC current of the inverter";
        DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentDC "DC current of the inverter";
        DymolaModels_Blocks_Interfaces_PowerOutput electricMachinePower "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_PowerOutput innerMechanicPower "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_TorqueInput innerTorque "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_AngleInput machineAngle "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_AngularVelocityInput machineSpeed "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_VoltageInput voltageDC "DC current of the inverter";
      end bldcBus_rec;
    public
      bldcBus_rec bldcBus;
    end modulation_rec;
  public
    modulation_rec modulation;
  protected
    record inverter_rec
      DymolaModels_Blocks_Interfaces_NormalizedInput dutyCycleIn "Ratio of on-time to period duration";
      Modelica_Blocks_Interfaces_BooleanInput rotateCW;
    protected
      record pin_p_rec
        Modelica_SIunits_ElectricPotential v "Potential at the pin";
        Modelica_SIunits_Current i "Current flowing into the pin";
      end pin_p_rec;
    public
      pin_p_rec pin_p;
    protected
      record pin_n_rec
        constant Modelica_SIunits_ElectricPotential v = 0.0 "Potential at the pin";
        Modelica_SIunits_Current i "Current flowing into the pin";
      end pin_n_rec;
    public
      pin_n_rec pin_n;
    protected
      record bldcBus_rec
        DymolaModels_Blocks_Interfaces_TorqueInput airgapTorque "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentAC_Averaged "DC current of the inverter";
        DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentDC "DC current of the inverter";
        DymolaModels_Blocks_Interfaces_PowerOutput electricMachinePower "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_PowerOutput innerMechanicPower "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_TorqueInput innerTorque "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_AngleInput machineAngle "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_AngularVelocityInput machineSpeed "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_VoltageInput voltageDC "DC current of the inverter";
      end bldcBus_rec;
    public
      bldcBus_rec bldcBus;
    protected
      record data_rec
        constant Boolean bidirectional = false "Inverter acts like it is controlled by a bidirectional modulation method";
      end data_rec;
    public
      data_rec data;
    protected
      record pin_p_Out_rec
        Modelica_SIunits_ElectricPotential v "Potential at the pin";
        Modelica_SIunits_Current i "Current flowing into the pin";
      end pin_p_Out_rec;
    public
      pin_p_Out_rec pin_p_Out;
    protected
      record pin_n_Out_rec
        constant Modelica_SIunits_ElectricPotential v = 0 "Potential at the pin";
        Modelica_SIunits_Current i "Current flowing into the pin";
      end pin_n_Out_rec;
    public
      pin_n_Out_rec pin_n_Out;
    protected
      record coreElement_rec
        constant Boolean bidirectional = false "Inverter acts like it is controlled by a bidirectional modulation method";
        DymolaModels_Blocks_Interfaces_NormalizedInput dutyCycle;
        Modelica_Blocks_Interfaces_BooleanInput rotateCW;
      protected
        record uniOrBidirectional_rec
          Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
          Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
          constant Real u1 = 0 "Lower point on the abscissa";
          constant Real u2 = 1 "Upper point on the abscissa";
          constant Real y1 = 0 "Lower point on the ordinate";
          constant Real y2 = 1 "Upper point on the ordinate";
          constant Real k = 1.0 "Slope of the resulting line equation";
          constant Real y0 = 0.0 "Offset of the resulting line equation";
        protected
          record gradient_rec
            constant Real k(unit = "1") = 1.0 "Gain value multiplied with input signal";
            Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
            Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
          end gradient_rec;
        public
          gradient_rec gradient;
        protected
          record add_rec
            constant Modelica_Blocks_Interfaces_RealInput u1 = 0.0 "Connector of Real input signal 1";
            Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
            Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
            constant Real k1 = 1 "Gain of input signal 1";
            constant Real k2 = 1 "Gain of input signal 2";
          end add_rec;
        public
          add_rec add;
        protected
          record offset_rec
            constant Real k = 0.0 "Constant output value";
            constant Modelica_Blocks_Interfaces_RealOutput y = 0.0 "Connector of Real output signal";
          end offset_rec;
        public
          offset_rec offset;
        protected
          record limiter_rec
            constant Real uMax = 1.0 "Upper limits of input signals";
            constant Real uMin = 0.0 "Lower limits of input signals";
            constant Boolean strict = false "= true, if strict limits with noEvent(..)";
            constant Modelica.Blocks.Types.LimiterHomotopy homotopyType = Modelica.Blocks.Types.LimiterHomotopy.Linear "Simplified model for homotopy-based initialization";
            constant Boolean limitsAtInit = true "Has no longer an effect and is only kept for backwards compatibility (the implementation uses now the homotopy operator)";
            Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
            Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
            Real simplifiedExpr "Simplified expression for homotopy-based initialization";
          end limiter_rec;
        public
          limiter_rec limiter;
        end uniOrBidirectional_rec;
      public
        uniOrBidirectional_rec uniOrBidirectional;
      protected
        record idealBuckConverter_rec
          Modelica_SIunits_Voltage v1 "Voltage drop of port 1 (= p1.v - n1.v)";
          Modelica_SIunits_Voltage v2 "Voltage drop of port 2 (= p2.v - n2.v)";
          Modelica_SIunits_Current i1 "Current flowing from pos. to neg. pin of port 1";
          Modelica_SIunits_Current i2 "Current flowing from pos. to neg. pin of port 2";
          DymolaModels_Blocks_Interfaces_NormalizedInput dutyCycle(min = 0.0, max = 1.0);
        protected
          record p1_rec
            Modelica_SIunits_ElectricPotential v "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end p1_rec;
        public
          p1_rec p1;
        protected
          record n1_rec
            constant Modelica_SIunits_ElectricPotential v = 0.0 "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end n1_rec;
        public
          n1_rec n1;
        protected
          record p2_rec
            Modelica_SIunits_ElectricPotential v "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end p2_rec;
        public
          p2_rec p2;
        protected
          record n2_rec
            constant Modelica_SIunits_ElectricPotential v = 0.0 "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end n2_rec;
        public
          n2_rec n2;
        end idealBuckConverter_rec;
      public
        idealBuckConverter_rec idealBuckConverter;
      protected
        record pin_p_supply_rec
          Modelica_SIunits_ElectricPotential v "Potential at the pin";
          Modelica_SIunits_Current i "Current flowing into the pin";
        end pin_p_supply_rec;
      public
        pin_p_supply_rec pin_p_supply;
      protected
        record pin_n_supply_rec
          constant Modelica_SIunits_ElectricPotential v = 0.0 "Potential at the pin";
          Modelica_SIunits_Current i "Current flowing into the pin";
        end pin_n_supply_rec;
      public
        pin_n_supply_rec pin_n_supply;
      protected
        record pin_p_rec
          Modelica_SIunits_ElectricPotential v "Potential at the pin";
          Modelica_SIunits_Current i "Current flowing into the pin";
        end pin_p_rec;
      public
        pin_p_rec pin_p;
      protected
        record pin_n_rec
          constant Modelica_SIunits_ElectricPotential v = 0.0 "Potential at the pin";
          Modelica_SIunits_Current i "Current flowing into the pin";
        end pin_n_rec;
      public
        pin_n_rec pin_n;
      protected
        record signChanger_rec
          Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
        end signChanger_rec;
      public
        signChanger_rec signChanger;
      protected
        record 'product_rec'
          Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
          Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
          Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
        end 'product_rec';
      public
        'product_rec' 'product';
      end coreElement_rec;
    public
      coreElement_rec coreElement;
    protected
      record ground_rec
      protected
        record p_rec
          constant Modelica_SIunits_ElectricPotential v = 0.0 "Potential at the pin";
          constant Modelica_SIunits_Current i = 0.0 "Current flowing into the pin";
        end p_rec;
      public
        p_rec p;
      end ground_rec;
    public
      ground_rec ground;
    protected
      record currentSensorDC_rec
        Modelica_Blocks_Interfaces_RealOutput i(unit = "A") "Current in the branch from p to n as output signal";
      protected
        record p_rec
          Modelica_SIunits_ElectricPotential v "Potential at the pin";
          Modelica_SIunits_Current i "Current flowing into the pin";
        end p_rec;
      public
        p_rec p;
      protected
        record n_rec
          Modelica_SIunits_ElectricPotential v "Potential at the pin";
          Modelica_SIunits_Current i "Current flowing into the pin";
        end n_rec;
      public
        n_rec n;
      end currentSensorDC_rec;
    public
      currentSensorDC_rec currentSensorDC;
    protected
      record currentDC_rec
        DymolaModels_Blocks_Interfaces_ElectricCurrentInput u "DC current of the inverter";
      protected
        record bldcBus_rec
          DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentDC "DC current of the inverter";
          DymolaModels_Blocks_Interfaces_TorqueInput airgapTorque "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentAC_Averaged "DC current of the inverter";
          DymolaModels_Blocks_Interfaces_PowerOutput electricMachinePower "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_PowerOutput innerMechanicPower "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_TorqueInput innerTorque "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_AngleInput machineAngle "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_AngularVelocityInput machineSpeed "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_VoltageInput voltageDC "DC current of the inverter";
        end bldcBus_rec;
      public
        bldcBus_rec bldcBus;
      end currentDC_rec;
    public
      currentDC_rec currentDC;
    protected
      record currentSensorAC_rec
        Modelica_Blocks_Interfaces_RealOutput i(unit = "A") "Current in the branch from p to n as output signal";
      protected
        record p_rec
          Modelica_SIunits_ElectricPotential v "Potential at the pin";
          Modelica_SIunits_Current i "Current flowing into the pin";
        end p_rec;
      public
        p_rec p;
      protected
        record n_rec
          Modelica_SIunits_ElectricPotential v "Potential at the pin";
          Modelica_SIunits_Current i "Current flowing into the pin";
        end n_rec;
      public
        n_rec n;
      end currentSensorAC_rec;
    public
      currentSensorAC_rec currentSensorAC;
    protected
      record currentAC_Averaged_rec
        DymolaModels_Blocks_Interfaces_ElectricCurrentInput u "DC current of the inverter";
      protected
        record bldcBus_rec
          DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentAC_Averaged "DC current of the inverter";
          DymolaModels_Blocks_Interfaces_TorqueInput airgapTorque "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentDC "DC current of the inverter";
          DymolaModels_Blocks_Interfaces_PowerOutput electricMachinePower "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_PowerOutput innerMechanicPower "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_TorqueInput innerTorque "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_AngleInput machineAngle "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_AngularVelocityInput machineSpeed "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_VoltageInput voltageDC "DC current of the inverter";
        end bldcBus_rec;
      public
        bldcBus_rec bldcBus;
      end currentAC_Averaged_rec;
    public
      currentAC_Averaged_rec currentAC_Averaged;
    protected
      record voltageChanger_rec
        Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
      end voltageChanger_rec;
    public
      voltageChanger_rec voltageChanger;
    protected
      record 'product_rec'
        Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
        Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      end 'product_rec';
    public
      'product_rec' 'product';
    protected
      record voltageSensorDC_rec
        Modelica_Blocks_Interfaces_RealOutput v(unit = "V") "Voltage between pin p and n (= p.v - n.v) as output signal";
      protected
        record p_rec
          Modelica_SIunits_ElectricPotential v "Potential at the pin";
          constant Modelica_SIunits_Current i = 0 "Current flowing into the pin";
        end p_rec;
      public
        p_rec p;
      protected
        record n_rec
          constant Modelica_SIunits_ElectricPotential v = 0.0 "Potential at the pin";
          constant Modelica_SIunits_Current i = 0 "Current flowing into the pin";
        end n_rec;
      public
        n_rec n;
      end voltageSensorDC_rec;
    public
      voltageSensorDC_rec voltageSensorDC;
    protected
      record voltageDC_rec
        DymolaModels_Blocks_Interfaces_VoltageInput u "DC current of the inverter";
      protected
        record bldcBus_rec
          DymolaModels_Blocks_Interfaces_VoltageInput voltageDC "DC current of the inverter";
          DymolaModels_Blocks_Interfaces_TorqueInput airgapTorque "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentAC_Averaged "DC current of the inverter";
          DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentDC "DC current of the inverter";
          DymolaModels_Blocks_Interfaces_PowerOutput electricMachinePower "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_PowerOutput innerMechanicPower "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_TorqueInput innerTorque "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_AngleInput machineAngle "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_AngularVelocityInput machineSpeed "Ratio of on-time to period duration";
        end bldcBus_rec;
      public
        bldcBus_rec bldcBus;
      end voltageDC_rec;
    public
      voltageDC_rec voltageDC;
    end inverter_rec;
  public
    inverter_rec inverter;
  protected
    record multiSensorMotor_rec
      Modelica_Blocks_Interfaces_RealOutput power(unit = "W") "Power in flange flange_a as output signal";
      Modelica_Blocks_Interfaces_RealOutput w(unit = "rad/s") "Absolute angular velocity of flange_a as output signal";
      Modelica_Blocks_Interfaces_RealOutput tau(unit = "N.m") "Torque in flange flange_a and flange_b (tau = flange_a.tau = -flange_b.tau) as output signal";
    protected
      record flange_a_rec
        Modelica_SIunits_Angle phi(nominal = 0.0001) "Absolute rotation angle of flange";
        Real _phi_der(unit = "rad/s") "der(Absolute rotation angle of flange)";
        Modelica_SIunits_Torque tau "Cut torque in the flange";
      end flange_a_rec;
    public
      flange_a_rec flange_a;
    protected
      record flange_b_rec
        Modelica_SIunits_Angle phi "Absolute rotation angle of flange";
        Modelica_SIunits_Torque tau "Cut torque in the flange";
      end flange_b_rec;
    public
      flange_b_rec flange_b;
    end multiSensorMotor_rec;
  public
    multiSensorMotor_rec multiSensorMotor;
  protected
    record machine_rec
      constant Boolean useSupport = false "True: stator is able to rotate, false: stator is fixed internally";
      constant Boolean useThermalPort = false "True: thermal connector is provided, false: temperature is fixed to 20degC internally";
    protected
      record data_rec
        constant Integer m = 3 "Number of phases";
        constant Modelica_SIunits_Resistance Rt = 0.0155 "Terminal resistances";
        constant Integer p = 21 "Number of pole pairs";
        constant Boolean useL = true "Internal inductance shall be used";
        constant Boolean useLt = true "if true Lt is used in the main diagonal otherwise L on the main d. and M for the other elements";
        constant Modelica_SIunits_Inductance Lt = 0.17 "Terminal inductance = 2*(L-M)";
        constant Modelica_SIunits_Inductance L = 1E-15 "Stator self inductance";
        constant Modelica_SIunits_Inductance M = 1E-15 "Stator mututal inductance";
        constant Modelica_SIunits_Inductance Ls_sigma = 0 "Leakage inductance at the terminals";
        constant BrushlessDCDrives_Common_Types_FluxSource fluxSource = BrushlessDCDrives_Common_Types_FluxSource.TorqueConst "Selection which variable shall be used to compute the Back-EMF";
        constant Real k_tau(unit = "N.m/A") = 0.1342 "Torque constant";
        constant Real k_speed(unit = "rev.min-1/V") = 71 "Speed constant in rpm/V";
        constant Modelica_SIunits_Inertia Jr = 1E-15 "Rotor's moment of inertia";
        constant Modelica_SIunits_Inertia Js = 1E-15 "Stator's moment of inertia (only has effect if stator not fixed (useSupport = false))";
        constant Modelica_SIunits_Current I_0(min = 0.0) = 9.8 "No load current, used to compute a linear friction element";
        constant Modelica_SIunits_AngularVelocity w_0(min = 1E-60) = 3550 "No load speed to compute a linear friction element";
        constant Modelica_SIunits_Voltage u_s_nom = 50 "Nominal voltage";
        constant Modelica_SIunits_ElectricCurrent i_s_nom = 177.8 "Nominal current";
        constant Modelica_SIunits_Torque tau_nom = 23.853 "Nominal torque";
        constant Modelica_SIunits_AngularVelocity w_nom = 352.3819759776551 "Nominal mechanical speed";
        constant Modelica_SIunits_Power P_nom = 8405.367272995007 "Nominal mechanical power";
        constant Modelica_SIunits_ElectricalTorqueConstant kDC = 0.1342 "Torque constant for BLDC Model";
        constant Modelica_SIunits_RotationalDampingConstant b = 0.0003704676056338029 "Damping coefficient from no-load current";
        constant Modelica_SIunits_Resistance Rs = 0.00775 "Resistance of a single stator winding";
        constant Modelica_SIunits_Inductance Ls = 0.085 "Overall stator winding inductance";
        constant Modelica_SIunits_Angle maxEMF_constant(min = 1E-60, max = 3.141592653589793) = 2.0943951023931953 "Angle over which the Back-EMF is constant";
        constant Modelica_SIunits_Angle 'maxEMF_start[1]' = 3.665191429188092 "Angle at which the respective phases (frist element = first phase etc.) have reached their postive maximum EMF";
        constant Modelica_SIunits_Angle 'maxEMF_start[2]' = 5.759586531581288 "Angle at which the respective phases (frist element = first phase etc.) have reached their postive maximum EMF";
        constant Modelica_SIunits_Angle 'maxEMF_start[3]' = 7.853981633974483 "Angle at which the respective phases (frist element = first phase etc.) have reached their postive maximum EMF";
      end data_rec;
    public
      data_rec data;
    protected
      record bldcBus_rec
        DymolaModels_Blocks_Interfaces_TorqueInput airgapTorque "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentAC_Averaged "DC current of the inverter";
        DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentDC "DC current of the inverter";
        DymolaModels_Blocks_Interfaces_PowerOutput electricMachinePower "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_PowerOutput innerMechanicPower "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_TorqueInput innerTorque "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_AngleInput machineAngle "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_AngularVelocityInput machineSpeed "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_VoltageInput voltageDC "DC current of the inverter";
      end bldcBus_rec;
    public
      bldcBus_rec bldcBus;
    protected
      record flange_rec
        Modelica_SIunits_Angle phi "Absolute rotation angle of flange";
        Modelica_SIunits_Torque tau "Cut torque in the flange";
      end flange_rec;
    public
      flange_rec flange;
    protected
      record pin_p_rec
        Modelica_SIunits_ElectricPotential v "Potential at the pin";
        Modelica_SIunits_Current i "Current flowing into the pin";
      end pin_p_rec;
    public
      pin_p_rec pin_p;
    protected
      record pin_n_rec
        constant Modelica_SIunits_ElectricPotential v = 0.0 "Potential at the pin";
        Modelica_SIunits_Current i "Current flowing into the pin";
      end pin_n_rec;
    public
      pin_n_rec pin_n;
    protected
      record powerBalance_rec
        Modelica_SIunits_Power electricMachinePower "Electrical power (stator)";
        Modelica_SIunits_Power innerMachinePower "Mechanical power";
        constant Modelica_SIunits_Power statorInertiaPower = 0.0 "Stator inertia power";
        Modelica_SIunits_Power rotorInertiaPower "Rotor inertia power";
        Modelica_SIunits_Power totalLossPower "Total loss power";
        Modelica_SIunits_Power statorWindingLossPower "Stator copper losses";
        Modelica_SIunits_Power frictionLossPower "Friction losses";
      end powerBalance_rec;
    public
      powerBalance_rec powerBalance;
    protected
      record coreElement_rec
        constant Modelica_SIunits_Resistance R = 0.0155 "Phase Resistances R_ref at 20degC";
        constant Boolean useL = true "Activate the internal inductance (electric dynamics)";
        constant Modelica_SIunits_Inductance L = 0.17 "Self inductance";
        constant Modelica_SIunits_Inertia Jr = 1E-15 "Rotor's moment of inertia";
        constant Modelica_SIunits_Inertia Js = 1E-15 "Stator's moment of inertia (only has effect if stator not fixed (useSupport = false))";
        constant Modelica_SIunits_RotationalDampingConstant b = 0.0003704676056338029 "Damping coefficient";
        constant Boolean useSupport = false "False: Stator is fixed internally, false: it can rotate";
        constant Boolean useThermalPort = false "True: thermal connector is provided, false: temperature is fixed internally";
        constant Modelica_SIunits_ElectricalTorqueConstant k = 0.1342 "Transformation coefficient";
        Modelica_SIunits_AngularVelocity w "Rotors angular velocity";
        Modelica_SIunits_Voltage v "Voltage at the motor";
        Modelica_Blocks_Interfaces_RealOutput innerTorque "Torque in flange flange_a and flange_b (tau = flange_a.tau = -flange_b.tau) as output signal";
        Modelica_Blocks_Interfaces_RealOutput airgapTorque "Torque in flange flange_a and flange_b (tau = flange_a.tau = -flange_b.tau) as output signal";
      protected
        record flange_rec
          Modelica_SIunits_Angle phi "Absolute rotation angle of flange";
          Real _phi_der(unit = "rad/s") "der(Absolute rotation angle of flange)";
          Modelica_SIunits_Torque tau "Cut torque in the flange";
        end flange_rec;
      public
        flange_rec flange;
      protected
        record pin_p_rec
          Modelica_SIunits_ElectricPotential v "Potential at the pin";
          Modelica_SIunits_Current i "Current flowing into the pin";
        end pin_p_rec;
      public
        pin_p_rec pin_p;
      protected
        record pin_n_rec
          constant Modelica_SIunits_ElectricPotential v = 0.0 "Potential at the pin";
          Modelica_SIunits_Current i "Current flowing into the pin";
        end pin_n_rec;
      public
        pin_n_rec pin_n;
      protected
        record resistor_rec
          constant Modelica_SIunits_Resistance R = 0.0155 "Resistance at temperature T_ref";
          constant Modelica_SIunits_Temperature T_ref = 293.15 "Reference temperature";
          constant Modelica_SIunits_LinearTemperatureCoefficient alpha = 0.00397 "Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))";
          Modelica_SIunits_Voltage v "Voltage drop of the two pins (= p.v - n.v)";
          Modelica_SIunits_Current i "Current flowing from pin p to pin n";
          constant Modelica_SIunits_Temperature T = 293.15 "Fixed device temperature if useHeatPort = false";
          Modelica_SIunits_Power LossPower "Loss power leaving component via heatPort";
          constant Modelica_SIunits_Temperature T_heatPort = 293.15 "Temperature of heatPort";
          constant Modelica_SIunits_Resistance R_actual = 0.0155 "Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))";
        protected
          record p_rec
            Modelica_SIunits_ElectricPotential v "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end p_rec;
        public
          p_rec p;
        protected
          record n_rec
            Modelica_SIunits_ElectricPotential v "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end n_rec;
        public
          n_rec n;
        end resistor_rec;
      public
        resistor_rec resistor;
      protected
        record backEMF_rec
          constant Modelica_SIunits_ElectricalTorqueConstant k = 0.1342 "Transformation coefficient";
          Modelica_SIunits_Voltage v "Voltage drop between the two pins";
          Modelica_SIunits_Current i "Current flowing from positive to negative pin";
          Modelica_SIunits_Angle phi "Angle of shaft flange with respect to support (= flange.phi - support.phi)";
          Real _phi_der(unit = "rad/s") "der(Angle of shaft flange with respect to support (= flange.phi - support.phi))";
          Modelica_SIunits_AngularVelocity w "Angular velocity of flange relative to support";
          Modelica_SIunits_Torque tau "Torque of flange";
          Modelica_SIunits_Torque tauElectrical "Electrical torque";
        protected
          record p_rec
            Modelica_SIunits_ElectricPotential v "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end p_rec;
        public
          p_rec p;
        protected
          record n_rec
            constant Modelica_SIunits_ElectricPotential v = 0.0 "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end n_rec;
        public
          n_rec n;
        protected
          record flange_rec
            Modelica_SIunits_Angle phi "Absolute rotation angle of flange";
            Modelica_SIunits_Torque tau "Cut torque in the flange";
          end flange_rec;
        public
          flange_rec flange;
        protected
          record support_rec
            constant Modelica_SIunits_Angle phi = 0.0 "Absolute rotation angle of flange";
            Modelica_SIunits_Torque tau "Cut torque in the flange";
          end support_rec;
        public
          support_rec support;
        protected
          record internalSupport_rec
            Modelica_SIunits_Torque tau "External support torque (must be computed via torque balance in model where InternalSupport is used; = flange.tau)";
            constant Modelica_SIunits_Angle phi = 0.0 "External support angle (= flange.phi)";
          protected
            record flange_rec
              constant Modelica_SIunits_Angle phi = 0.0 "Absolute rotation angle of flange";
              Modelica_SIunits_Torque tau "Cut torque in the flange";
            end flange_rec;
          public
            flange_rec flange;
          end internalSupport_rec;
        public
          internalSupport_rec internalSupport;
        end backEMF_rec;
      public
        backEMF_rec backEMF;
      protected
        record inertiaRotor_rec
          constant Modelica_SIunits_Inertia J(min = 0.0) = 1E-15 "Moment of inertia";
          Modelica_SIunits_Angle phi "Absolute rotation angle of component";
          Real _phi_der(unit = "rad/s") "der(Absolute rotation angle of component)";
          Modelica_SIunits_AngularVelocity w "Absolute angular velocity of component (= der(phi))";
          Real _w_der(unit = "rad/s2") "der(Absolute angular velocity of component (= der(phi)))";
          Modelica_SIunits_AngularAcceleration a "Absolute angular acceleration of component (= der(w))";
        protected
          record flange_a_rec
            Modelica_SIunits_Angle phi "Absolute rotation angle of flange";
            Modelica_SIunits_Torque tau "Cut torque in the flange";
          end flange_a_rec;
        public
          flange_a_rec flange_a;
        protected
          record flange_b_rec
            Modelica_SIunits_Angle phi "Absolute rotation angle of flange";
            Modelica_SIunits_Torque tau "Cut torque in the flange";
          end flange_b_rec;
        public
          flange_b_rec flange_b;
        end inertiaRotor_rec;
      public
        inertiaRotor_rec inertiaRotor;
      protected
        record damper_rec
          Modelica_SIunits_Angle phi_rel(nominal = 0.0001) "Relative rotation angle (= flange_b.phi - flange_a.phi)";
          Real _phi_rel_der(unit = "rad/s") "der(Relative rotation angle (= flange_b.phi - flange_a.phi))";
          parameter Modelica_SIunits_AngularVelocity _w_rel_start = 0
          annotation(Dialog(tab = "Initial", group = "Approximate"));
          Modelica_SIunits_AngularVelocity w_rel(start = _w_rel_start) "Relative angular velocity (= der(phi_rel))";
          Real _w_rel_der(unit = "rad/s2") "der(Relative angular velocity (= der(phi_rel)))";
          Modelica_SIunits_AngularAcceleration a_rel "Relative angular acceleration (= der(w_rel))";
          Modelica_SIunits_Torque tau "Torque between flanges (= flange_b.tau)";
          constant Modelica_SIunits_Angle phi_nominal(displayUnit = "rad", min = 0.0) = 0.0001 "Nominal value of phi_rel (used for scaling)";
          constant Modelica_SIunits_RotationalDampingConstant d(min = 0.0) = 0.0003704676056338029 "Damping constant";
          Modelica_SIunits_Power lossPower "Loss power leaving component via heatPort (> 0, if heat is flowing out of component)";
        protected
          record flange_a_rec
            Modelica_SIunits_Angle phi "Absolute rotation angle of flange";
            Modelica_SIunits_Torque tau "Cut torque in the flange";
          end flange_a_rec;
        public
          flange_a_rec flange_a;
        protected
          record flange_b_rec
            constant Modelica_SIunits_Angle phi = 0.0 "Absolute rotation angle of flange";
            Modelica_SIunits_Torque tau "Cut torque in the flange";
          end flange_b_rec;
        public
          flange_b_rec flange_b;
        end damper_rec;
      public
        damper_rec damper annotation(Dialog);
      protected
        record inertiaStator_rec
          constant Modelica_SIunits_Inertia J(min = 0.0) = 1E-15 "Moment of inertia";
          constant Modelica_SIunits_Angle phi = 0 "Absolute rotation angle of component";
          constant Real _phi_der(unit = "rad/s") = 0.0 "der(Absolute rotation angle of component)";
          constant Modelica_SIunits_AngularVelocity w = 0.0 "Absolute angular velocity of component (= der(phi))";
          constant Real _w_der(unit = "rad/s2") = 0.0 "der(Absolute angular velocity of component (= der(phi)))";
          constant Modelica_SIunits_AngularAcceleration a = 0.0 "Absolute angular acceleration of component (= der(w))";
        protected
          record flange_a_rec
            constant Modelica_SIunits_Angle phi = 0.0 "Absolute rotation angle of flange";
            constant Modelica_SIunits_Torque tau = 0.0 "Cut torque in the flange";
          end flange_a_rec;
        public
          flange_a_rec flange_a;
        protected
          record flange_b_rec
            constant Modelica_SIunits_Angle phi = 0.0 "Absolute rotation angle of flange";
            constant Modelica_SIunits_Torque tau = 0.0 "Cut torque in the flange";
          end flange_b_rec;
        public
          flange_b_rec flange_b;
        end inertiaStator_rec;
      public
        inertiaStator_rec inertiaStator;
      protected
        record fixed_rec
          constant Modelica_SIunits_Angle phi0 = 0 "Fixed offset angle of housing";
        protected
          record flange_rec
            constant Modelica_SIunits_Angle phi = 0.0 "Absolute rotation angle of flange";
            Modelica_SIunits_Torque tau "Cut torque in the flange";
          end flange_rec;
        public
          flange_rec flange;
        end fixed_rec;
      public
        fixed_rec fixed;
      protected
        record airGapSensor_rec
          Modelica_Blocks_Interfaces_RealOutput tau(unit = "N.m") "Torque in flange flange_a and flange_b (tau = flange_a.tau = -flange_b.tau) as output signal";
        protected
          record flange_a_rec
            Modelica_SIunits_Angle phi "Absolute rotation angle of flange";
            Modelica_SIunits_Torque tau "Cut torque in the flange";
          end flange_a_rec;
        public
          flange_a_rec flange_a;
        protected
          record flange_b_rec
            Modelica_SIunits_Angle phi "Absolute rotation angle of flange";
            Modelica_SIunits_Torque tau "Cut torque in the flange";
          end flange_b_rec;
        public
          flange_b_rec flange_b;
        end airGapSensor_rec;
      public
        airGapSensor_rec airGapSensor;
      protected
        record innerTorqueComp_rec
          Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
        end innerTorqueComp_rec;
      public
        innerTorqueComp_rec innerTorqueComp;
      protected
        record overallInductance_rec
          Modelica_SIunits_Voltage v "Voltage drop of the two pins (= p.v - n.v)";
          parameter Modelica_SIunits_Current _i_start = 0
          annotation(Dialog(tab = "Initial", group = "Approximate"));
          Modelica_SIunits_Current i(start = _i_start) "Current flowing from pin p to pin n";
          Real _i_der(unit = "A/s") "der(Current flowing from pin p to pin n)";
          constant Modelica_SIunits_Inductance L = 0.17 "Inductance";
        protected
          record p_rec
            Modelica_SIunits_ElectricPotential v "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end p_rec;
        public
          p_rec p;
        protected
          record n_rec
            Modelica_SIunits_ElectricPotential v "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end n_rec;
        public
          n_rec n;
        end overallInductance_rec;
      public
        overallInductance_rec overallInductance annotation(Dialog);
      protected
        record internalSupport_rec
          constant Modelica_SIunits_Angle phi = 0.0 "Absolute rotation angle of flange";
          constant Modelica_SIunits_Torque tau = 0.0 "Cut torque in the flange";
        end internalSupport_rec;
      public
        internalSupport_rec internalSupport;
      end coreElement_rec;
    public
      coreElement_rec coreElement annotation(Dialog);
    protected
      record torqueSensor_rec
        Modelica_Blocks_Interfaces_RealOutput tau(unit = "N.m") "Torque in flange flange_a and flange_b (tau = flange_a.tau = -flange_b.tau) as output signal";
      protected
        record flange_a_rec
          Modelica_SIunits_Angle phi "Absolute rotation angle of flange";
          Modelica_SIunits_Torque tau "Cut torque in the flange";
        end flange_a_rec;
      public
        flange_a_rec flange_a;
      protected
        record flange_b_rec
          Modelica_SIunits_Angle phi "Absolute rotation angle of flange";
          Modelica_SIunits_Torque tau "Cut torque in the flange";
        end flange_b_rec;
      public
        flange_b_rec flange_b;
      end torqueSensor_rec;
    public
      torqueSensor_rec torqueSensor;
    protected
      record signChange_rec
        constant Real k(unit = "1") = -1 "Gain value multiplied with input signal";
        Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
        Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
      end signChange_rec;
    public
      signChange_rec signChange;
    protected
      record innerPower_rec
        Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
        Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      end innerPower_rec;
    public
      innerPower_rec innerPower;
    protected
      record innerMachinePower_rec
        DymolaModels_Blocks_Interfaces_PowerInput u "Ratio of on-time to period duration";
      protected
        record bldcBus_rec
          DymolaModels_Blocks_Interfaces_PowerInput innerMechanicPower "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_TorqueInput airgapTorque "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentAC_Averaged "DC current of the inverter";
          DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentDC "DC current of the inverter";
          DymolaModels_Blocks_Interfaces_PowerOutput electricMachinePower "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_TorqueInput innerTorque "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_AngleInput machineAngle "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_AngularVelocityInput machineSpeed "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_VoltageInput voltageDC "DC current of the inverter";
        end bldcBus_rec;
      public
        bldcBus_rec bldcBus;
      end innerMachinePower_rec;
    public
      innerMachinePower_rec innerMachinePower;
    protected
      record electricMachinePower_rec
        DymolaModels_Blocks_Interfaces_PowerInput u "Ratio of on-time to period duration";
      protected
        record bldcBus_rec
          DymolaModels_Blocks_Interfaces_PowerInput electricMachinePower "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_TorqueInput airgapTorque "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentAC_Averaged "DC current of the inverter";
          DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentDC "DC current of the inverter";
          DymolaModels_Blocks_Interfaces_PowerOutput innerMechanicPower "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_TorqueInput innerTorque "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_AngleInput machineAngle "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_AngularVelocityInput machineSpeed "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_VoltageInput voltageDC "DC current of the inverter";
        end bldcBus_rec;
      public
        bldcBus_rec bldcBus;
      end electricMachinePower_rec;
    public
      electricMachinePower_rec electricMachinePower;
    protected
      record powerSensor_rec
        Modelica_Blocks_Interfaces_RealOutput power(unit = "W") "Instantaneous power as output signal";
      protected
        record pc_rec
          Modelica_SIunits_ElectricPotential v "Potential at the pin";
          Modelica_SIunits_Current i "Current flowing into the pin";
        end pc_rec;
      public
        pc_rec pc;
      protected
        record nc_rec
          Modelica_SIunits_ElectricPotential v "Potential at the pin";
          Modelica_SIunits_Current i "Current flowing into the pin";
        end nc_rec;
      public
        nc_rec nc;
      protected
        record pv_rec
          Modelica_SIunits_ElectricPotential v "Potential at the pin";
          constant Modelica_SIunits_Current i = 0 "Current flowing into the pin";
        end pv_rec;
      public
        pv_rec pv;
      protected
        record nv_rec
          constant Modelica_SIunits_ElectricPotential v = 0.0 "Potential at the pin";
          constant Modelica_SIunits_Current i = 0 "Current flowing into the pin";
        end nv_rec;
      public
        nv_rec nv;
      protected
        record voltageSensor_rec
          Modelica_Blocks_Interfaces_RealOutput v(unit = "V") "Voltage between pin p and n (= p.v - n.v) as output signal";
        protected
          record p_rec
            Modelica_SIunits_ElectricPotential v "Potential at the pin";
            constant Modelica_SIunits_Current i = 0.0 "Current flowing into the pin";
          end p_rec;
        public
          p_rec p;
        protected
          record n_rec
            constant Modelica_SIunits_ElectricPotential v = 0.0 "Potential at the pin";
            constant Modelica_SIunits_Current i = 0.0 "Current flowing into the pin";
          end n_rec;
        public
          n_rec n;
        end voltageSensor_rec;
      public
        voltageSensor_rec voltageSensor;
      protected
        record currentSensor_rec
          Modelica_Blocks_Interfaces_RealOutput i(unit = "A") "Current in the branch from p to n as output signal";
        protected
          record p_rec
            Modelica_SIunits_ElectricPotential v "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end p_rec;
        public
          p_rec p;
        protected
          record n_rec
            Modelica_SIunits_ElectricPotential v "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end n_rec;
        public
          n_rec n;
        end currentSensor_rec;
      public
        currentSensor_rec currentSensor;
      protected
        record 'product_rec'
          Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
          Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
          Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
        end 'product_rec';
      public
        'product_rec' 'product';
      end powerSensor_rec;
    public
      powerSensor_rec powerSensor;
    protected
      record innerTorque_rec
        DymolaModels_Blocks_Interfaces_TorqueInput u "Ratio of on-time to period duration";
      protected
        record bldcBus_rec
          DymolaModels_Blocks_Interfaces_TorqueInput innerTorque "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_TorqueInput airgapTorque "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentAC_Averaged "DC current of the inverter";
          DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentDC "DC current of the inverter";
          DymolaModels_Blocks_Interfaces_PowerOutput electricMachinePower "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_PowerOutput innerMechanicPower "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_AngleInput machineAngle "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_AngularVelocityInput machineSpeed "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_VoltageInput voltageDC "DC current of the inverter";
        end bldcBus_rec;
      public
        bldcBus_rec bldcBus;
      end innerTorque_rec;
    public
      innerTorque_rec innerTorque;
    protected
      record airGapTorque_rec
        DymolaModels_Blocks_Interfaces_TorqueInput u "Ratio of on-time to period duration";
      protected
        record bldcBus_rec
          DymolaModels_Blocks_Interfaces_TorqueInput airgapTorque "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentAC_Averaged "DC current of the inverter";
          DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentDC "DC current of the inverter";
          DymolaModels_Blocks_Interfaces_PowerOutput electricMachinePower "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_PowerOutput innerMechanicPower "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_TorqueInput innerTorque "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_AngleInput machineAngle "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_AngularVelocityInput machineSpeed "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_VoltageInput voltageDC "DC current of the inverter";
        end bldcBus_rec;
      public
        bldcBus_rec bldcBus;
      end airGapTorque_rec;
    public
      airGapTorque_rec airGapTorque;
    protected
      record angleSensorIdeal_rec
        Modelica_Blocks_Interfaces_RealOutput phi_rel(unit = "rad", displayUnit = "deg") "Relative angle between two flanges (= flange_b.phi - flange_a.phi) as output signal";
      protected
        record flange_a_rec
          constant Modelica_SIunits_Angle phi = 0.0 "Absolute rotation angle of flange";
          constant Modelica_SIunits_Torque tau = 0 "Cut torque in the flange";
        end flange_a_rec;
      public
        flange_a_rec flange_a;
      protected
        record flange_b_rec
          Modelica_SIunits_Angle phi "Absolute rotation angle of flange";
          constant Modelica_SIunits_Torque tau = 0.0 "Cut torque in the flange";
        end flange_b_rec;
      public
        flange_b_rec flange_b;
      end angleSensorIdeal_rec;
    public
      angleSensorIdeal_rec angleSensorIdeal;
    protected
      record speedSensor_rec
        Modelica_SIunits_Angle phi_rel "Relative angle between two flanges (flange_b.phi - flange_a.phi)";
        Real _phi_rel_der(unit = "rad/s") "der(Relative angle between two flanges (flange_b.phi - flange_a.phi))";
        Modelica_Blocks_Interfaces_RealOutput w_rel(unit = "rad/s") "Relative angular velocity between two flanges (= der(flange_b.phi) - der(flange_a.phi)) as output signal";
      protected
        record flange_a_rec
          constant Modelica_SIunits_Angle phi = 0.0 "Absolute rotation angle of flange";
          constant Modelica_SIunits_Torque tau = 0 "Cut torque in the flange";
        end flange_a_rec;
      public
        flange_a_rec flange_a;
      protected
        record flange_b_rec
          Modelica_SIunits_Angle phi "Absolute rotation angle of flange";
          constant Modelica_SIunits_Torque tau = 0.0 "Cut torque in the flange";
        end flange_b_rec;
      public
        flange_b_rec flange_b;
      end speedSensor_rec;
    public
      speedSensor_rec speedSensor;
    protected
      record fixed_rec
        constant Modelica_SIunits_Angle phi0 = 0 "Fixed offset angle of housing";
      protected
        record flange_rec
          constant Modelica_SIunits_Angle phi = 0.0 "Absolute rotation angle of flange";
          constant Modelica_SIunits_Torque tau = 0.0 "Cut torque in the flange";
        end flange_rec;
      public
        flange_rec flange;
      end fixed_rec;
    public
      fixed_rec fixed;
    protected
      record machineAngle_rec
        DymolaModels_Blocks_Interfaces_AngleInput u "Ratio of on-time to period duration";
      protected
        record bldcBus_rec
          DymolaModels_Blocks_Interfaces_AngleInput machineAngle "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_TorqueInput airgapTorque "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentAC_Averaged "DC current of the inverter";
          DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentDC "DC current of the inverter";
          DymolaModels_Blocks_Interfaces_PowerOutput electricMachinePower "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_PowerOutput innerMechanicPower "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_TorqueInput innerTorque "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_AngularVelocityInput machineSpeed "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_VoltageInput voltageDC "DC current of the inverter";
        end bldcBus_rec;
      public
        bldcBus_rec bldcBus;
      end machineAngle_rec;
    public
      machineAngle_rec machineAngle;
    protected
      record machineSpeed_rec
        DymolaModels_Blocks_Interfaces_AngularVelocityInput u "Ratio of on-time to period duration";
      protected
        record bldcBus_rec
          DymolaModels_Blocks_Interfaces_AngularVelocityInput machineSpeed "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_TorqueInput airgapTorque "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentAC_Averaged "DC current of the inverter";
          DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentDC "DC current of the inverter";
          DymolaModels_Blocks_Interfaces_PowerOutput electricMachinePower "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_PowerOutput innerMechanicPower "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_TorqueInput innerTorque "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_AngleInput machineAngle "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_VoltageInput voltageDC "DC current of the inverter";
        end bldcBus_rec;
      public
        bldcBus_rec bldcBus;
      end machineSpeed_rec;
    public
      machineSpeed_rec machineSpeed;
    protected
      record internalSupport_rec
        constant Modelica_SIunits_Angle phi = 0 "Absolute rotation angle of flange";
        constant Modelica_SIunits_Torque tau = 0.0 "Cut torque in the flange";
      end internalSupport_rec;
    public
      internalSupport_rec internalSupport;
    end machine_rec;
  public
    machine_rec machine annotation(Dialog);
  protected
    record ground_rec
    protected
      record p_rec
        constant Modelica_SIunits_ElectricPotential v = 0.0 "Potential at the pin";
        Modelica_SIunits_Current i "Current flowing into the pin";
      end p_rec;
    public
      p_rec p;
    end ground_rec;
  public
    ground_rec ground;
  protected
    record speedDependentTorque_rec
      constant Modelica_SIunits_Angle phi_support = 0 "Absolute angle of support flange";
      Modelica_Blocks_Interfaces_RealInput tau(unit = "N.m") "Accelerating torque acting at flange (= -flange.tau)";
    protected
      record flange_rec
        Modelica_SIunits_Angle phi "Absolute rotation angle of flange";
        Modelica_SIunits_Torque tau "Cut torque in the flange";
      end flange_rec;
    public
      flange_rec flange;
    end speedDependentTorque_rec;
  public
    speedDependentTorque_rec speedDependentTorque;
  protected
    record inertia_rec
      constant Modelica_SIunits_Inertia J(min = 0.0) = 3E-06 "Moment of inertia";
      parameter Modelica_SIunits_Angle _phi_start = 0
      annotation(Dialog(tab = "Initial", group = "Approximate"));
      Modelica_SIunits_Angle phi(nominal = 0.0001,start = _phi_start) "Absolute rotation angle of component";
      Real _phi_der(unit = "rad/s") "der(Absolute rotation angle of component)";
      Modelica_SIunits_AngularVelocity w "Absolute angular velocity of component (= der(phi))";
      Real _w_der(unit = "rad/s2") "der(Absolute angular velocity of component (= der(phi)))";
      Modelica_SIunits_AngularAcceleration a "Absolute angular acceleration of component (= der(w))";
    protected
      record flange_a_rec
        Modelica_SIunits_Angle phi "Absolute rotation angle of flange";
        Modelica_SIunits_Torque tau "Cut torque in the flange";
      end flange_a_rec;
    public
      flange_a_rec flange_a;
    protected
      record flange_b_rec
        Modelica_SIunits_Angle phi "Absolute rotation angle of flange";
        Modelica_SIunits_Torque tau "Cut torque in the flange";
      end flange_b_rec;
    public
      flange_b_rec flange_b;
    end inertia_rec;
  public
    inertia_rec inertia annotation(Dialog);
  protected
    record multiSensorLoad_rec
      Modelica_Blocks_Interfaces_RealOutput power(unit = "W") "Power in flange flange_a as output signal";
      Modelica_Blocks_Interfaces_RealOutput w(unit = "rad/s") "Absolute angular velocity of flange_a as output signal";
      Modelica_Blocks_Interfaces_RealOutput tau(unit = "N.m") "Torque in flange flange_a and flange_b (tau = flange_a.tau = -flange_b.tau) as output signal";
    protected
      record flange_a_rec
        Modelica_SIunits_Angle phi "Absolute rotation angle of flange";
        Real _phi_der(unit = "rad/s") "der(Absolute rotation angle of flange)";
        Modelica_SIunits_Torque tau "Cut torque in the flange";
      end flange_a_rec;
    public
      flange_a_rec flange_a;
    protected
      record flange_b_rec
        Modelica_SIunits_Angle phi "Absolute rotation angle of flange";
        Modelica_SIunits_Torque tau "Cut torque in the flange";
      end flange_b_rec;
    public
      flange_b_rec flange_b;
    end multiSensorLoad_rec;
  public
    multiSensorLoad_rec multiSensorLoad;
  protected
    record pin_p_rec
      Modelica_SIunits_ElectricPotential v "Potential at the pin";
      Modelica_SIunits_Current i "Current flowing into the pin";
    end pin_p_rec;
  public
    pin_p_rec pin_p;
  protected
    record pin_n_rec
      constant Modelica_SIunits_ElectricPotential v = 0 "Potential at the pin";
      Modelica_SIunits_Current i "Current flowing into the pin";
    end pin_n_rec;
  public
    pin_n_rec pin_n;
  protected
    record machineAnalyser_rec
      constant Boolean useAveraging = false "true: Input powers will be averaged, false: instantaneous values will be used";
      constant Modelica_SIunits_Frequency f = 100 "Base frequency for input averaging";
      DymolaModels_Blocks_Interfaces_NormalizedOutput powerEfficiencyLimited;
      DymolaModels_Blocks_Interfaces_NormalizedOutput powerEfficiency;
      DymolaModels_Blocks_Interfaces_NormalizedOutput energyEfficiency;
      DymolaModels_Blocks_Interfaces_NormalizedOutput motorEnergyEfficiency;
      DymolaModels_Blocks_Interfaces_NormalizedOutput generatorEnergyEfficiency;
      constant Boolean withBus = true;
      constant Boolean useBusConnector = true "True: Bus connector will be active, false: real inputs will be active";
    protected
      record generatedElectricPower_rec
        Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
        constant Modelica_Blocks_Interfaces_RealInput u2 = 0 "Connector of Real input signal 2";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      end generatedElectricPower_rec;
    public
      generatedElectricPower_rec generatedElectricPower;
    protected
      record consumedElectricPower_rec
        Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
        constant Modelica_Blocks_Interfaces_RealInput u2 = 0.0 "Connector of Real input signal 2";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      end consumedElectricPower_rec;
    public
      consumedElectricPower_rec consumedElectricPower;
    protected
      record generatedMechanicPower_rec
        constant Modelica_Blocks_Interfaces_RealInput u1 = 0 "Connector of Real input signal 1";
        Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      end generatedMechanicPower_rec;
    public
      generatedMechanicPower_rec generatedMechanicPower;
    protected
      record consumedMechanicPower_rec
        Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
        constant Modelica_Blocks_Interfaces_RealInput u2 = 0.0 "Connector of Real input signal 2";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      end consumedMechanicPower_rec;
    public
      consumedMechanicPower_rec consumedMechanicPower;
    protected
      record motorLosses_rec
        Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
        Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
        constant Real k1 = 1 "Gain of input signal 1";
        constant Real k2 = -1 "Gain of input signal 2";
      end motorLosses_rec;
    public
      motorLosses_rec motorLosses;
    protected
      record generatorLosses_rec
        Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
        Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
        constant Real k1 = -1 "Gain of input signal 1";
        constant Real k2 = 1 "Gain of input signal 2";
      end generatorLosses_rec;
    public
      generatorLosses_rec generatorLosses;
    protected
      record electricEnergy_rec
        constant Real k(unit = "1") = 1 "Integrator gain";
        constant Modelica.Blocks.Types.Init initType = Modelica.Blocks.Types.Init.InitialState "Type of initialization (1: no init, 2: steady state, 3,4: initial output)";
        constant Real y_start = 0 "Initial or guess value of output (= state)";
        Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
        Real _y_der "der(Connector of Real output signal)";
      end electricEnergy_rec;
    public
      electricEnergy_rec electricEnergy;
    protected
      record mechanicEnergy_rec
        constant Real k(unit = "1") = 1 "Integrator gain";
        constant Modelica.Blocks.Types.Init initType = Modelica.Blocks.Types.Init.InitialState "Type of initialization (1: no init, 2: steady state, 3,4: initial output)";
        constant Real y_start = 0 "Initial or guess value of output (= state)";
        Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
        Real _y_der "der(Connector of Real output signal)";
      end mechanicEnergy_rec;
    public
      mechanicEnergy_rec mechanicEnergy;
    protected
      record limiter_rec
        constant Real uMax = 1.1 "Upper limits of input signals";
        constant Real uMin = 0 "Lower limits of input signals";
        constant Boolean strict = true "= true, if strict limits with noEvent(..)";
        constant Modelica.Blocks.Types.LimiterHomotopy homotopyType = Modelica.Blocks.Types.LimiterHomotopy.Linear "Simplified model for homotopy-based initialization";
        constant Boolean limitsAtInit = true "Has no longer an effect and is only kept for backwards compatibility (the implementation uses now the homotopy operator)";
        Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
        Real simplifiedExpr "Simplified expression for homotopy-based initialization";
      end limiter_rec;
    public
      limiter_rec limiter;
    protected
      record mechanicPowerPassThrough_rec
        Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      end mechanicPowerPassThrough_rec;
    public
      mechanicPowerPassThrough_rec mechanicPowerPassThrough;
    protected
      record electricPowerPassThrough_rec
        Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      end electricPowerPassThrough_rec;
    public
      electricPowerPassThrough_rec electricPowerPassThrough;
    protected
      record losses_rec
        Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
        Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
        constant Real k1 = 1 "Gain of input signal 1";
        constant Real k2 = 1 "Gain of input signal 2";
      end losses_rec;
    public
      losses_rec losses;
    protected
      record consumedElectricEnergyComp_rec
        constant Real k(unit = "1") = 1 "Integrator gain";
        constant Modelica.Blocks.Types.Init initType = Modelica.Blocks.Types.Init.InitialState "Type of initialization (1: no init, 2: steady state, 3,4: initial output)";
        constant Real y_start = 0 "Initial or guess value of output (= state)";
        Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
        Real _y_der "der(Connector of Real output signal)";
      end consumedElectricEnergyComp_rec;
    public
      consumedElectricEnergyComp_rec consumedElectricEnergyComp;
    protected
      record generatedElectricEnergyComp_rec
        constant Real k(unit = "1") = 1 "Integrator gain";
        constant Modelica.Blocks.Types.Init initType = Modelica.Blocks.Types.Init.InitialState "Type of initialization (1: no init, 2: steady state, 3,4: initial output)";
        constant Real y_start = 0 "Initial or guess value of output (= state)";
        Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
        Real _y_der "der(Connector of Real output signal)";
      end generatedElectricEnergyComp_rec;
    public
      generatedElectricEnergyComp_rec generatedElectricEnergyComp;
    protected
      record consumedMechanicEnergyComp_rec
        constant Real k(unit = "1") = 1 "Integrator gain";
        constant Modelica.Blocks.Types.Init initType = Modelica.Blocks.Types.Init.InitialState "Type of initialization (1: no init, 2: steady state, 3,4: initial output)";
        constant Real y_start = 0 "Initial or guess value of output (= state)";
        Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
        Real _y_der "der(Connector of Real output signal)";
      end consumedMechanicEnergyComp_rec;
    public
      consumedMechanicEnergyComp_rec consumedMechanicEnergyComp;
    protected
      record generatedMechanicEnergyComp_rec
        constant Real k(unit = "1") = 1 "Integrator gain";
        constant Modelica.Blocks.Types.Init initType = Modelica.Blocks.Types.Init.InitialState "Type of initialization (1: no init, 2: steady state, 3,4: initial output)";
        constant Real y_start = 0 "Initial or guess value of output (= state)";
        Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
        Real _y_der "der(Connector of Real output signal)";
      end generatedMechanicEnergyComp_rec;
    public
      generatedMechanicEnergyComp_rec generatedMechanicEnergyComp;
    protected
      record lossEnergyComp_rec
        constant Real k(unit = "1") = 1 "Integrator gain";
        constant Modelica.Blocks.Types.Init initType = Modelica.Blocks.Types.Init.InitialState "Type of initialization (1: no init, 2: steady state, 3,4: initial output)";
        constant Real y_start = 0 "Initial or guess value of output (= state)";
        Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
        Real _y_der "der(Connector of Real output signal)";
      end lossEnergyComp_rec;
    public
      lossEnergyComp_rec lossEnergyComp;
    protected
      record powerEfficiencyComp_rec
        Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
        Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
        constant Real eps(min = 1E-60) = 1E-60 "Smallest value used for division";
        constant DymolaModels_Blocks_Choices_AssertActions action = DymolaModels_Blocks_Choices_AssertActions.ignore "Optionally inform about divisions by zero with asserts";
      end powerEfficiencyComp_rec;
    public
      powerEfficiencyComp_rec powerEfficiencyComp;
    protected
      record consumedPower_rec
        Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
        Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      end consumedPower_rec;
    public
      consumedPower_rec consumedPower;
    protected
      record generatedPower_rec
        Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
        Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      end generatedPower_rec;
    public
      generatedPower_rec generatedPower;
    protected
      record generatedEnergyComp_rec
        constant Real k(unit = "1") = 1 "Integrator gain";
        constant Modelica.Blocks.Types.Init initType = Modelica.Blocks.Types.Init.InitialState "Type of initialization (1: no init, 2: steady state, 3,4: initial output)";
        constant Real y_start = 0 "Initial or guess value of output (= state)";
        Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
        Real _y_der "der(Connector of Real output signal)";
      end generatedEnergyComp_rec;
    public
      generatedEnergyComp_rec generatedEnergyComp;
    protected
      record consumedEnergyComp_rec
        constant Real k(unit = "1") = 1 "Integrator gain";
        constant Modelica.Blocks.Types.Init initType = Modelica.Blocks.Types.Init.InitialState "Type of initialization (1: no init, 2: steady state, 3,4: initial output)";
        constant Real y_start = 0 "Initial or guess value of output (= state)";
        Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
        Real _y_der "der(Connector of Real output signal)";
      end consumedEnergyComp_rec;
    public
      consumedEnergyComp_rec consumedEnergyComp;
    protected
      record energyEfficiencyComp_rec
        Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
        Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
        constant Real eps(min = 1E-60) = 1E-60 "Smallest value used for division";
        constant DymolaModels_Blocks_Choices_AssertActions action = DymolaModels_Blocks_Choices_AssertActions.ignore "Optionally inform about divisions by zero with asserts";
      end energyEfficiencyComp_rec;
    public
      energyEfficiencyComp_rec energyEfficiencyComp;
    protected
      record motorEnergyEfficiencyComp_rec
        Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
        Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
        constant Real eps(min = 1E-60) = 1E-60 "Smallest value used for division";
        constant DymolaModels_Blocks_Choices_AssertActions action = DymolaModels_Blocks_Choices_AssertActions.ignore "Optionally inform about divisions by zero with asserts";
      end motorEnergyEfficiencyComp_rec;
    public
      motorEnergyEfficiencyComp_rec motorEnergyEfficiencyComp;
    protected
      record generatorEnergyEfficiencyComp_rec
        Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
        Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
        constant Real eps(min = 1E-60) = 1E-60 "Smallest value used for division";
        constant DymolaModels_Blocks_Choices_AssertActions action = DymolaModels_Blocks_Choices_AssertActions.ignore "Optionally inform about divisions by zero with asserts";
      end generatorEnergyEfficiencyComp_rec;
    public
      generatorEnergyEfficiencyComp_rec generatorEnergyEfficiencyComp;
    protected
      record signChange_rec
        constant Real k(unit = "1") = -1 "Gain value multiplied with input signal";
        Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
        Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
      end signChange_rec;
    public
      signChange_rec signChange;
    protected
      record signChangeElectric_rec
        constant Real k(unit = "1") = -1 "Gain value multiplied with input signal";
        Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
        Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
      end signChangeElectric_rec;
    public
      signChangeElectric_rec signChangeElectric;
    protected
      record signChangeMechanic_rec
        constant Real k(unit = "1") = -1 "Gain value multiplied with input signal";
        Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
        Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
      end signChangeMechanic_rec;
    public
      signChangeMechanic_rec signChangeMechanic;
    protected
      record noNegativeGeneratedPower_rec
        Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
        constant Modelica_Blocks_Interfaces_RealInput u2 = 0 "Connector of Real input signal 2";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
      end noNegativeGeneratedPower_rec;
    public
      noNegativeGeneratedPower_rec noNegativeGeneratedPower;
    protected
      record additionalConsumedPower_rec
        Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
        Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
        constant Real k1 = -1 "Gain of input signal 1";
        constant Real k2 = 1 "Gain of input signal 2";
      end additionalConsumedPower_rec;
    public
      additionalConsumedPower_rec additionalConsumedPower;
    protected
      record overallConsumedPower_rec
        Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
        Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
        Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
        constant Real k1 = 1 "Gain of input signal 1";
        constant Real k2 = 1 "Gain of input signal 2";
      end overallConsumedPower_rec;
    public
      overallConsumedPower_rec overallConsumedPower;
    protected
      record zero2_rec
        constant Real k = 0 "Constant output value";
        constant Modelica_Blocks_Interfaces_RealOutput y = 0.0 "Connector of Real output signal";
      end zero2_rec;
    public
      zero2_rec zero2;
    protected
      record zero3_rec
        constant Real k = 0 "Constant output value";
        constant Modelica_Blocks_Interfaces_RealOutput y = 0.0 "Connector of Real output signal";
      end zero3_rec;
    public
      zero3_rec zero3;
    protected
      record zero4_rec
        constant Real k = 0 "Constant output value";
        constant Modelica_Blocks_Interfaces_RealOutput y = 0.0 "Connector of Real output signal";
      end zero4_rec;
    public
      zero4_rec zero4;
    protected
      record bldcBus_rec
        DymolaModels_Blocks_Interfaces_TorqueInput airgapTorque "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentAC_Averaged "DC current of the inverter";
        DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentDC "DC current of the inverter";
        DymolaModels_Blocks_Interfaces_PowerOutput electricMachinePower "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_PowerOutput innerMechanicPower "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_TorqueInput innerTorque "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_AngleInput machineAngle "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_AngularVelocityInput machineSpeed "Ratio of on-time to period duration";
        DymolaModels_Blocks_Interfaces_VoltageInput voltageDC "DC current of the inverter";
      end bldcBus_rec;
    public
      bldcBus_rec bldcBus;
    protected
      record electricPowerFromBus_rec
        DymolaModels_Blocks_Interfaces_PowerOutput y "Ratio of on-time to period duration";
      protected
        record bldcBus_rec
          DymolaModels_Blocks_Interfaces_PowerOutput electricMachinePower "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_TorqueInput airgapTorque "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentAC_Averaged "DC current of the inverter";
          DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentDC "DC current of the inverter";
          DymolaModels_Blocks_Interfaces_PowerOutput innerMechanicPower "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_TorqueInput innerTorque "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_AngleInput machineAngle "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_AngularVelocityInput machineSpeed "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_VoltageInput voltageDC "DC current of the inverter";
        end bldcBus_rec;
      public
        bldcBus_rec bldcBus;
      end electricPowerFromBus_rec;
    public
      electricPowerFromBus_rec electricPowerFromBus;
    protected
      record mechanicPowerFromBus_rec
        DymolaModels_Blocks_Interfaces_PowerOutput y "Ratio of on-time to period duration";
      protected
        record bldcBus_rec
          DymolaModels_Blocks_Interfaces_PowerOutput innerMechanicPower "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_TorqueInput airgapTorque "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentAC_Averaged "DC current of the inverter";
          DymolaModels_Blocks_Interfaces_ElectricCurrentInput currentDC "DC current of the inverter";
          DymolaModels_Blocks_Interfaces_PowerOutput electricMachinePower "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_TorqueInput innerTorque "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_AngleInput machineAngle "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_AngularVelocityInput machineSpeed "Ratio of on-time to period duration";
          DymolaModels_Blocks_Interfaces_VoltageInput voltageDC "DC current of the inverter";
        end bldcBus_rec;
      public
        bldcBus_rec bldcBus;
      end mechanicPowerFromBus_rec;
    public
      mechanicPowerFromBus_rec mechanicPowerFromBus;
    end machineAnalyser_rec;
  public
    machineAnalyser_rec machineAnalyser;
  end drive_rec;
public
  drive_rec drive annotation(Dialog);
protected
  record batteryPack_rec
    constant Battery_Common_Types_PackType packType = Battery_Common_Types_PackType.scaled "Defining the type of the pack";
    constant Integer N_x(min = 1) = 1 "Number of cells in x-direction (width)";
    constant Integer N_y(min = 1) = 1 "Number of cells in y-direction (depth)";
    constant Integer N_z(min = 1) = 5 "Number of cell elements in z-direction (height)";
    constant Integer N_serialCells(min = 1) = 15 "Number of cells in series";
    constant Integer N_parallelCells(min = 1) = 5 "Number of cells in parallel";
    Modelica_SIunits_Voltage V_pack "pack voltage";
    Modelica_SIunits_ElectricCurrent I_pack "pack current";
    constant Integer N_cellsWidth(min = 1) = 15 "Number of cells in x-direction";
    constant Integer N_cellsDepth(min = 1) = 5 "Number of cells in y-direction";
    constant Integer N_verticalElements(min = 1) = 5 "Vertical discretization of the cell thermal models";
    constant Battery_Common_Types_StateOfCharge SOC_init = 0.5 "start SOC of scaled Pack";
    constant Modelica_SIunits_Temperature T_init = 293.15 "start temperature of scaled pack";
    Modelica_SIunits_Power P_terminal "Power applied to the terminal of the battery";
    Modelica_SIunits_Power P_ideal "Ideal power without any losses";
    Modelica_SIunits_Power P_loss "Internal power loss";
  protected
    record p_rec
      Modelica_SIunits_ElectricPotential v "Potential at the pin";
      Modelica_SIunits_Current i "Current flowing into the pin";
    end p_rec;
  public
    p_rec p;
  protected
    record n_rec
      constant Modelica_SIunits_ElectricPotential v = 0.0 "Potential at the pin";
      Modelica_SIunits_Current i "Current flowing into the pin";
    end n_rec;
  public
    n_rec n;
  protected
    record housingHeatPort_rec
      constant Integer N_x(min = 1) = 1 "Number of cells in the x-direction (width)";
      constant Integer N_y(min = 1) = 1 "Number of cells in the y-direction (depth)";
      constant Integer N_z(min = 1) = 5 "Number of discrete elements of each cell in z-direction (height)";
      constant Boolean pinHeatTransfer = false "Use pin heat transfer (only for discretized pack)";
    protected
      record 'top[1,1]_rec'
        Modelica_SIunits_Temperature T "Port temperature";
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'top[1,1]_rec';
    public
      'top[1,1]_rec' 'top[1,1]';
    protected
      record 'bottom[1,1]_rec'
        Modelica_SIunits_Temperature T "Port temperature";
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'bottom[1,1]_rec';
    public
      'bottom[1,1]_rec' 'bottom[1,1]';
    protected
      record 'left[1,1]_rec'
        Modelica_SIunits_Temperature T "Port temperature";
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'left[1,1]_rec';
    public
      'left[1,1]_rec' 'left[1,1]';
    protected
      record 'left[1,2]_rec'
        Modelica_SIunits_Temperature T "Port temperature";
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'left[1,2]_rec';
    public
      'left[1,2]_rec' 'left[1,2]';
    protected
      record 'left[1,3]_rec'
        Modelica_SIunits_Temperature T "Port temperature";
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'left[1,3]_rec';
    public
      'left[1,3]_rec' 'left[1,3]';
    protected
      record 'left[1,4]_rec'
        Modelica_SIunits_Temperature T "Port temperature";
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'left[1,4]_rec';
    public
      'left[1,4]_rec' 'left[1,4]';
    protected
      record 'left[1,5]_rec'
        Modelica_SIunits_Temperature T "Port temperature";
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'left[1,5]_rec';
    public
      'left[1,5]_rec' 'left[1,5]';
    protected
      record 'right[1,1]_rec'
        Modelica_SIunits_Temperature T "Port temperature";
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'right[1,1]_rec';
    public
      'right[1,1]_rec' 'right[1,1]';
    protected
      record 'right[1,2]_rec'
        Modelica_SIunits_Temperature T "Port temperature";
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'right[1,2]_rec';
    public
      'right[1,2]_rec' 'right[1,2]';
    protected
      record 'right[1,3]_rec'
        Modelica_SIunits_Temperature T "Port temperature";
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'right[1,3]_rec';
    public
      'right[1,3]_rec' 'right[1,3]';
    protected
      record 'right[1,4]_rec'
        Modelica_SIunits_Temperature T "Port temperature";
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'right[1,4]_rec';
    public
      'right[1,4]_rec' 'right[1,4]';
    protected
      record 'right[1,5]_rec'
        Modelica_SIunits_Temperature T "Port temperature";
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'right[1,5]_rec';
    public
      'right[1,5]_rec' 'right[1,5]';
    protected
      record 'front[1,1]_rec'
        Modelica_SIunits_Temperature T "Port temperature";
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'front[1,1]_rec';
    public
      'front[1,1]_rec' 'front[1,1]';
    protected
      record 'front[1,2]_rec'
        Modelica_SIunits_Temperature T "Port temperature";
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'front[1,2]_rec';
    public
      'front[1,2]_rec' 'front[1,2]';
    protected
      record 'front[1,3]_rec'
        Modelica_SIunits_Temperature T "Port temperature";
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'front[1,3]_rec';
    public
      'front[1,3]_rec' 'front[1,3]';
    protected
      record 'front[1,4]_rec'
        Modelica_SIunits_Temperature T "Port temperature";
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'front[1,4]_rec';
    public
      'front[1,4]_rec' 'front[1,4]';
    protected
      record 'front[1,5]_rec'
        Modelica_SIunits_Temperature T "Port temperature";
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'front[1,5]_rec';
    public
      'front[1,5]_rec' 'front[1,5]';
    protected
      record 'back[1,1]_rec'
        Modelica_SIunits_Temperature T "Port temperature";
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'back[1,1]_rec';
    public
      'back[1,1]_rec' 'back[1,1]';
    protected
      record 'back[1,2]_rec'
        Modelica_SIunits_Temperature T "Port temperature";
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'back[1,2]_rec';
    public
      'back[1,2]_rec' 'back[1,2]';
    protected
      record 'back[1,3]_rec'
        Modelica_SIunits_Temperature T "Port temperature";
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'back[1,3]_rec';
    public
      'back[1,3]_rec' 'back[1,3]';
    protected
      record 'back[1,4]_rec'
        Modelica_SIunits_Temperature T "Port temperature";
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'back[1,4]_rec';
    public
      'back[1,4]_rec' 'back[1,4]';
    protected
      record 'back[1,5]_rec'
        Modelica_SIunits_Temperature T "Port temperature";
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
      end 'back[1,5]_rec';
    public
      'back[1,5]_rec' 'back[1,5]';
    end housingHeatPort_rec;
  public
    housingHeatPort_rec housingHeatPort;
  protected
    record packBus_rec
      Battery_Common_Interfaces_ElectricChargeInput C_actual;
      constant Battery_Common_Interfaces_ElectricChargeInput C_nominal = 38700.0;
      Battery_Common_Interfaces_ElectricCurrentInput I_max;
      Battery_Common_Interfaces_ElectricCurrentInput I_min;
      Battery_Common_Interfaces_ElectricCurrentInput I_pack;
      Battery_Common_Interfaces_ElectricPowerInput P_ideal;
      Battery_Common_Interfaces_ElectricPowerInput P_loss;
      Battery_Common_Interfaces_ElectricPowerInput P_terminal;
      Battery_Common_Interfaces_StateOfChargeInput SOC_max;
      Battery_Common_Interfaces_StateOfChargeInput SOC_mean;
      Battery_Common_Interfaces_StateOfChargeInput SOC_min;
      Battery_Common_Interfaces_StateOfHealthInput SOH_max;
      Battery_Common_Interfaces_StateOfHealthInput SOH_mean;
      Battery_Common_Interfaces_StateOfHealthInput SOH_min;
      Battery_Common_Interfaces_TemperatureInput T_max;
      Battery_Common_Interfaces_TemperatureInput T_mean;
      Battery_Common_Interfaces_TemperatureInput T_min;
      Battery_Common_Interfaces_VoltageInput V_max;
      Battery_Common_Interfaces_VoltageInput V_min;
      Battery_Common_Interfaces_VoltageInput V_pack;
    end packBus_rec;
  public
    packBus_rec packBus;
  protected
    record cell_rec
      constant Battery_Common_Types_StateOfCharge SOC_init = 0.5 "State of charge at t=0";
      constant Modelica_SIunits_Temperature T_init = 293.15 "Core temperature at t=0";
      constant Real SOH_init = 1.0 "State of health at t=0 (<1 if aged)";
      constant Real SOHR_init = 1.0 "State of health of inner resistance at t=0 (>1 if aged)";
      constant Integer N_verticalElements = 5 "Discretized vertical elements of thermal model";
      constant Battery_Common_Types_GeometricDesign cellForm = Battery_Common_Types_GeometricDesign.cylindric "Geometric design of the cell, e.g. cylindric";
      Modelica_SIunits_Voltage v "Voltage drop between the two pins (= p.v - n.v)";
      constant Integer N_surface = 4 "Number of surface heat ports";
      constant Real SOC_minAssert = -0.01 "Minimal value for SOC";
      constant Real SOC_maxAssert = 1.01 "Maximal value for SOC";
      constant Real V_minAssert = 2.68 "Minimal value for v";
      constant Real V_maxAssert = 4.22 "Maximal value for v";
      constant Real I_minAssert = -8.6 "Minimal value for Current (current sign is negative when discharging)";
      constant Real I_maxAssert = 3.2249999999999996 "Maximal value for Current";
      constant Modelica_SIunits_Temperature T_minAssert = 243.15 "Minimal value for T";
      constant Modelica_SIunits_Temperature T_maxAssert = 338.15 "Maximal value for T";
      constant Real SOH_minAssert = 0.65 "Minimal value for SOH";
      constant Real SOH_maxAssert = 1.1 "Maximal value for SOH";
    protected
      record cellBus_rec
        Battery_Common_Interfaces_ElectricChargeOutput C_actual;
        constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
        Battery_Common_Interfaces_VoltageInput OCV;
        Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
        Battery_Common_Interfaces_ElectricPowerOutput P_loss;
        Battery_Common_Interfaces_ElectricPowerInput P_terminal;
        Battery_Common_Interfaces_ElectricResistanceInput R_total;
        Battery_Common_Interfaces_StateOfChargeOutput SOC;
        Battery_Common_Interfaces_StateOfHealthOutput SOH;
        Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
        Battery_Common_Interfaces_TemperatureOutput T;
        Battery_Common_Interfaces_ElectricCurrentOutput i;
        Battery_Common_Interfaces_VoltageOutput v;
      end cellBus_rec;
    public
      cellBus_rec cellBus;
    protected
      record p_rec
        Modelica_SIunits_ElectricPotential v "Potential at the pin";
        Modelica_SIunits_Current i "Current flowing into the pin";
      end p_rec;
    public
      p_rec p;
    protected
      record n_rec
        constant Modelica_SIunits_ElectricPotential v = 0.0 "Potential at the pin";
        Modelica_SIunits_Current i "Current flowing into the pin";
      end n_rec;
    public
      n_rec n;
    protected
      record heatPort_rec
        constant Integer N_surface = 4 "Number of surface heat ports";
        constant Integer N_verticalElements = 5 "The cell can be calculated with several vertical elements";
      protected
        record positivePin_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end positivePin_rec;
      public
        positivePin_rec positivePin;
      protected
        record negativePin_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end negativePin_rec;
      public
        negativePin_rec negativePin;
      protected
        record 'surface[1,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[1,1]_rec';
      public
        'surface[1,1]_rec' 'surface[1,1]';
      protected
        record 'surface[1,2]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[1,2]_rec';
      public
        'surface[1,2]_rec' 'surface[1,2]';
      protected
        record 'surface[1,3]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[1,3]_rec';
      public
        'surface[1,3]_rec' 'surface[1,3]';
      protected
        record 'surface[1,4]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[1,4]_rec';
      public
        'surface[1,4]_rec' 'surface[1,4]';
      protected
        record 'surface[1,5]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[1,5]_rec';
      public
        'surface[1,5]_rec' 'surface[1,5]';
      protected
        record 'surface[2,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[2,1]_rec';
      public
        'surface[2,1]_rec' 'surface[2,1]';
      protected
        record 'surface[2,2]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[2,2]_rec';
      public
        'surface[2,2]_rec' 'surface[2,2]';
      protected
        record 'surface[2,3]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[2,3]_rec';
      public
        'surface[2,3]_rec' 'surface[2,3]';
      protected
        record 'surface[2,4]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[2,4]_rec';
      public
        'surface[2,4]_rec' 'surface[2,4]';
      protected
        record 'surface[2,5]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[2,5]_rec';
      public
        'surface[2,5]_rec' 'surface[2,5]';
      protected
        record 'surface[3,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[3,1]_rec';
      public
        'surface[3,1]_rec' 'surface[3,1]';
      protected
        record 'surface[3,2]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[3,2]_rec';
      public
        'surface[3,2]_rec' 'surface[3,2]';
      protected
        record 'surface[3,3]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[3,3]_rec';
      public
        'surface[3,3]_rec' 'surface[3,3]';
      protected
        record 'surface[3,4]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[3,4]_rec';
      public
        'surface[3,4]_rec' 'surface[3,4]';
      protected
        record 'surface[3,5]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[3,5]_rec';
      public
        'surface[3,5]_rec' 'surface[3,5]';
      protected
        record 'surface[4,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[4,1]_rec';
      public
        'surface[4,1]_rec' 'surface[4,1]';
      protected
        record 'surface[4,2]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[4,2]_rec';
      public
        'surface[4,2]_rec' 'surface[4,2]';
      protected
        record 'surface[4,3]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[4,3]_rec';
      public
        'surface[4,3]_rec' 'surface[4,3]';
      protected
        record 'surface[4,4]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[4,4]_rec';
      public
        'surface[4,4]_rec' 'surface[4,4]';
      protected
        record 'surface[4,5]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[4,5]_rec';
      public
        'surface[4,5]_rec' 'surface[4,5]';
      end heatPort_rec;
    public
      heatPort_rec heatPort;
    protected
      record thermalModel_rec
        constant Modelica_SIunits_Diameter D = 0.0181 "Cell diameter";
        constant Modelica_SIunits_Height height = 0.0648 "Cell height in z direction";
        constant Modelica_SIunits_Temperature T_init = 293.15 "Initial core temperature";
        constant Integer N_surface(min = 1) = 4 "Number of surface heat ports";
        constant Integer N_verticalElements(min = 1) = 5 "Number of vertical elements";
        Modelica_SIunits_Temperature 'T[1]' "Core temperature";
        Modelica_SIunits_Temperature 'T[2]' "Core temperature";
        Modelica_SIunits_Temperature 'T[3]' "Core temperature";
        Modelica_SIunits_Temperature 'T[4]' "Core temperature";
        Modelica_SIunits_Temperature 'T[5]' "Core temperature";
        constant Modelica_SIunits_HeatFlowRate Q_flowPosPin = 0.0 "Heat flow rate through posistive pin (positive for flow into cell)";
        constant Modelica_SIunits_HeatFlowRate Q_flowNegPin = 0.0 "Heat flow rate through negative pin (positive for flow into cell)";
        constant Modelica_SIunits_HeatFlowRate Q_flowSurface = 0.0 "Heat flow rate through surface (positive for flow into cell)";
        constant Modelica_SIunits_Thickness sheetThickness = 5E-05 "Sheet thickness";
        constant Modelica_SIunits_Diameter positivePinDiameter = 0.009 "Positive pin diameter (cylindric pins)";
        constant Modelica_SIunits_Height positivePinHeight = 0.004 "Positive pin height";
        constant Modelica_SIunits_Diameter negativePinDiameter = 0.009 "Negative pin diameter (cylindric pins)";
        constant Modelica_SIunits_Height negativePinHeight = 0.004 "Negative pin height";
        constant Modelica_SIunits_ThermalConductance G_surfaceRoundCell = 2.348074084336825 "Thermal conductance of the shell surface of a cylindric cell";
        constant Modelica_SIunits_ThermalConductance G_topBottom = 0.11912235755122132 "Thermal conductance in z direction (height)";
        constant Modelica_SIunits_HeatCapacity C_cell = 74.18159321073087 "Heat capacity of the cell";
        constant Modelica_SIunits_ThermalConductance G_positivePin = 0.7952156404399163 "Thermal conductance of positive pin";
        constant Modelica_SIunits_ThermalConductance G_negativePin = 0.7952156404399163 "Thermal conductance of negative pin";
      protected
        record cellBus_rec
          Battery_Common_Interfaces_ElectricChargeOutput C_actual;
          constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
          Battery_Common_Interfaces_VoltageInput OCV;
          Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
          Battery_Common_Interfaces_ElectricPowerOutput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_ElectricResistanceInput R_total;
          Battery_Common_Interfaces_StateOfChargeOutput SOC;
          Battery_Common_Interfaces_StateOfHealthOutput SOH;
          Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
          Battery_Common_Interfaces_TemperatureOutput T;
          Battery_Common_Interfaces_ElectricCurrentOutput i;
          Battery_Common_Interfaces_VoltageOutput v;
        end cellBus_rec;
      public
        cellBus_rec cellBus;
      protected
        record cylindricHeatPort_rec
          constant Integer N_surface = 4 "Number of surface heat ports";
          constant Integer N_verticalElements = 5 "The cell can be calculated with several vertical elements";
        protected
          record positivePin_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end positivePin_rec;
        public
          positivePin_rec positivePin;
        protected
          record negativePin_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end negativePin_rec;
        public
          negativePin_rec negativePin;
        protected
          record 'surface[1,1]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end 'surface[1,1]_rec';
        public
          'surface[1,1]_rec' 'surface[1,1]';
        protected
          record 'surface[1,2]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end 'surface[1,2]_rec';
        public
          'surface[1,2]_rec' 'surface[1,2]';
        protected
          record 'surface[1,3]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end 'surface[1,3]_rec';
        public
          'surface[1,3]_rec' 'surface[1,3]';
        protected
          record 'surface[1,4]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end 'surface[1,4]_rec';
        public
          'surface[1,4]_rec' 'surface[1,4]';
        protected
          record 'surface[1,5]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end 'surface[1,5]_rec';
        public
          'surface[1,5]_rec' 'surface[1,5]';
        protected
          record 'surface[2,1]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end 'surface[2,1]_rec';
        public
          'surface[2,1]_rec' 'surface[2,1]';
        protected
          record 'surface[2,2]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end 'surface[2,2]_rec';
        public
          'surface[2,2]_rec' 'surface[2,2]';
        protected
          record 'surface[2,3]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end 'surface[2,3]_rec';
        public
          'surface[2,3]_rec' 'surface[2,3]';
        protected
          record 'surface[2,4]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end 'surface[2,4]_rec';
        public
          'surface[2,4]_rec' 'surface[2,4]';
        protected
          record 'surface[2,5]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end 'surface[2,5]_rec';
        public
          'surface[2,5]_rec' 'surface[2,5]';
        protected
          record 'surface[3,1]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end 'surface[3,1]_rec';
        public
          'surface[3,1]_rec' 'surface[3,1]';
        protected
          record 'surface[3,2]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end 'surface[3,2]_rec';
        public
          'surface[3,2]_rec' 'surface[3,2]';
        protected
          record 'surface[3,3]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end 'surface[3,3]_rec';
        public
          'surface[3,3]_rec' 'surface[3,3]';
        protected
          record 'surface[3,4]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end 'surface[3,4]_rec';
        public
          'surface[3,4]_rec' 'surface[3,4]';
        protected
          record 'surface[3,5]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end 'surface[3,5]_rec';
        public
          'surface[3,5]_rec' 'surface[3,5]';
        protected
          record 'surface[4,1]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end 'surface[4,1]_rec';
        public
          'surface[4,1]_rec' 'surface[4,1]';
        protected
          record 'surface[4,2]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end 'surface[4,2]_rec';
        public
          'surface[4,2]_rec' 'surface[4,2]';
        protected
          record 'surface[4,3]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end 'surface[4,3]_rec';
        public
          'surface[4,3]_rec' 'surface[4,3]';
        protected
          record 'surface[4,4]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end 'surface[4,4]_rec';
        public
          'surface[4,4]_rec' 'surface[4,4]';
        protected
          record 'surface[4,5]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end 'surface[4,5]_rec';
        public
          'surface[4,5]_rec' 'surface[4,5]';
        end cylindricHeatPort_rec;
      public
        cylindricHeatPort_rec cylindricHeatPort;
      protected
        record pinMaterial_rec
          constant Modelica_SIunits_Density rho = 7850 "Density";
          constant Modelica_SIunits_ThermalConductivity lambda_x = 50 "Thermal conductivity in x direction";
          constant Modelica_SIunits_ThermalConductivity lambda_y = 50 "Thermal conductivity in y direction";
          constant Modelica_SIunits_ThermalConductivity lambda_z = 50 "Thermal conductivity in z direction";
          constant Modelica_SIunits_SpecificHeatCapacity c = 460 "Specific heat capacity of the material";
          constant Modelica_SIunits_Emissivity epsilon = 0 "Thermal emissivity";
        end pinMaterial_rec;
      public
        pinMaterial_rec pinMaterial;
      protected
        record sheetMaterial_rec
          constant Modelica_SIunits_Density rho = 7850 "Density";
          constant Modelica_SIunits_ThermalConductivity lambda_x = 50 "Thermal conductivity in x direction";
          constant Modelica_SIunits_ThermalConductivity lambda_y = 50 "Thermal conductivity in y direction";
          constant Modelica_SIunits_ThermalConductivity lambda_z = 50 "Thermal conductivity in z direction";
          constant Modelica_SIunits_SpecificHeatCapacity c = 460 "Specific heat capacity of the material";
          constant Modelica_SIunits_Emissivity epsilon = 0 "Thermal emissivity";
        end sheetMaterial_rec;
      public
        sheetMaterial_rec sheetMaterial;
      protected
        record coreMaterial_rec
          constant Modelica_SIunits_Density rho = 2760 "Density";
          constant Modelica_SIunits_ThermalConductivity lambda_x = 30 "Thermal conductivity in x direction";
          constant Modelica_SIunits_ThermalConductivity lambda_y = 2 "Thermal conductivity in y direction";
          constant Modelica_SIunits_ThermalConductivity lambda_z = 30 "Thermal conductivity in z direction";
          constant Modelica_SIunits_SpecificHeatCapacity c = 1612 "Specific heat capacity of the material";
          constant Modelica_SIunits_Emissivity epsilon = 0 "Thermal emissivity";
        end coreMaterial_rec;
      public
        coreMaterial_rec coreMaterial;
      protected
        record positivPin_rec
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 0.7952156404399163 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end positivPin_rec;
      public
        positivPin_rec positivPin;
      protected
        record negativePin_rec
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 0.7952156404399163 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end negativePin_rec;
      public
        negativePin_rec negativePin;
      protected
        record oneToMany_rec
          constant Integer numberOfHeatPorts = 5 "Number of manyHeatPorts";
          constant Battery_Common_Types_KindOfOneToManyT kindOfOneToManyT = Battery_Common_Types_KindOfOneToManyT.MeanT;
          constant Battery_Common_Types_KindOfOneToManyQ kindOfOneToManyQ = Battery_Common_Types_KindOfOneToManyQ.QSplit;
          constant Boolean assertPlossGoEZero = true "Assert that P_loss is greater or equalt to zero, can be turned off to simulate endothermal reactions";
          constant Integer middle = 3;
          Battery_Common_Interfaces_TemperatureOutput T;
          Battery_Common_Interfaces_ElectricPowerInput P_loss;
        protected
          record 'manyHeatPort[1]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end 'manyHeatPort[1]_rec';
        public
          'manyHeatPort[1]_rec' 'manyHeatPort[1]';
        protected
          record 'manyHeatPort[2]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end 'manyHeatPort[2]_rec';
        public
          'manyHeatPort[2]_rec' 'manyHeatPort[2]';
        protected
          record 'manyHeatPort[3]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end 'manyHeatPort[3]_rec';
        public
          'manyHeatPort[3]_rec' 'manyHeatPort[3]';
        protected
          record 'manyHeatPort[4]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end 'manyHeatPort[4]_rec';
        public
          'manyHeatPort[4]_rec' 'manyHeatPort[4]';
        protected
          record 'manyHeatPort[5]_rec'
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end 'manyHeatPort[5]_rec';
        public
          'manyHeatPort[5]_rec' 'manyHeatPort[5]';
        end oneToMany_rec;
      public
        oneToMany_rec oneToMany;
      protected
        record temperature_rec
          Battery_Common_Interfaces_TemperatureInput u;
        protected
          record cellBus_rec
            Battery_Common_Interfaces_TemperatureInput T;
            Battery_Common_Interfaces_ElectricChargeOutput C_actual;
            constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
            Battery_Common_Interfaces_VoltageInput OCV;
            Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
            Battery_Common_Interfaces_ElectricPowerOutput P_loss;
            Battery_Common_Interfaces_ElectricPowerInput P_terminal;
            Battery_Common_Interfaces_ElectricResistanceInput R_total;
            Battery_Common_Interfaces_StateOfChargeOutput SOC;
            Battery_Common_Interfaces_StateOfHealthOutput SOH;
            Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
            Battery_Common_Interfaces_ElectricCurrentOutput i;
            Battery_Common_Interfaces_VoltageOutput v;
          end cellBus_rec;
        public
          cellBus_rec cellBus;
        end temperature_rec;
      public
        temperature_rec temperature;
      protected
        record lossPower_rec
          Battery_Common_Interfaces_ElectricPowerOutput y;
        protected
          record cellBus_rec
            Battery_Common_Interfaces_ElectricPowerOutput P_loss;
            Battery_Common_Interfaces_ElectricChargeOutput C_actual;
            constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
            Battery_Common_Interfaces_VoltageInput OCV;
            Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
            Battery_Common_Interfaces_ElectricPowerInput P_terminal;
            Battery_Common_Interfaces_ElectricResistanceInput R_total;
            Battery_Common_Interfaces_StateOfChargeOutput SOC;
            Battery_Common_Interfaces_StateOfHealthOutput SOH;
            Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
            Battery_Common_Interfaces_TemperatureOutput T;
            Battery_Common_Interfaces_ElectricCurrentOutput i;
            Battery_Common_Interfaces_VoltageOutput v;
          end cellBus_rec;
        public
          cellBus_rec cellBus;
        end lossPower_rec;
      public
        lossPower_rec lossPower;
      protected
        record 'coreHeatCapacitor[1]_rec'
          constant Modelica_SIunits_HeatCapacity C = 14.836318642146175 "Heat capacity of element (= cp*m)";
          parameter Modelica_SIunits_Temperature _T_start = 293.15
          annotation(Dialog(tab = "Initial", group = "Approximate"));
          Modelica_SIunits_Temperature T(start = _T_start) "Temperature of element";
          Real _T_der(unit = "K/s") "der(Temperature of element)";
          Modelica_SIunits_TemperatureSlope der_T "Time derivative of temperature (= der(T))";
        protected
          record port_rec
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end port_rec;
        public
          port_rec port;
        end 'coreHeatCapacitor[1]_rec';
      public
        'coreHeatCapacitor[1]_rec' 'coreHeatCapacitor[1]' annotation(Dialog);
      protected
        record 'coreHeatCapacitor[2]_rec'
          constant Modelica_SIunits_HeatCapacity C = 14.836318642146175 "Heat capacity of element (= cp*m)";
          parameter Modelica_SIunits_Temperature _T_start = 293.15
          annotation(Dialog(tab = "Initial", group = "Approximate"));
          Modelica_SIunits_Temperature T(start = _T_start) "Temperature of element";
          Real _T_der(unit = "K/s") "der(Temperature of element)";
          Modelica_SIunits_TemperatureSlope der_T "Time derivative of temperature (= der(T))";
        protected
          record port_rec
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end port_rec;
        public
          port_rec port;
        end 'coreHeatCapacitor[2]_rec';
      public
        'coreHeatCapacitor[2]_rec' 'coreHeatCapacitor[2]' annotation(Dialog);
      protected
        record 'coreHeatCapacitor[3]_rec'
          constant Modelica_SIunits_HeatCapacity C = 14.836318642146175 "Heat capacity of element (= cp*m)";
          parameter Modelica_SIunits_Temperature _T_start = 293.15
          annotation(Dialog(tab = "Initial", group = "Approximate"));
          Modelica_SIunits_Temperature T(start = _T_start) "Temperature of element";
          Real _T_der(unit = "K/s") "der(Temperature of element)";
          Modelica_SIunits_TemperatureSlope der_T "Time derivative of temperature (= der(T))";
        protected
          record port_rec
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end port_rec;
        public
          port_rec port;
        end 'coreHeatCapacitor[3]_rec';
      public
        'coreHeatCapacitor[3]_rec' 'coreHeatCapacitor[3]' annotation(Dialog);
      protected
        record 'coreHeatCapacitor[4]_rec'
          constant Modelica_SIunits_HeatCapacity C = 14.836318642146175 "Heat capacity of element (= cp*m)";
          parameter Modelica_SIunits_Temperature _T_start = 293.15
          annotation(Dialog(tab = "Initial", group = "Approximate"));
          Modelica_SIunits_Temperature T(start = _T_start) "Temperature of element";
          Real _T_der(unit = "K/s") "der(Temperature of element)";
          Modelica_SIunits_TemperatureSlope der_T "Time derivative of temperature (= der(T))";
        protected
          record port_rec
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end port_rec;
        public
          port_rec port;
        end 'coreHeatCapacitor[4]_rec';
      public
        'coreHeatCapacitor[4]_rec' 'coreHeatCapacitor[4]' annotation(Dialog);
      protected
        record 'coreHeatCapacitor[5]_rec'
          constant Modelica_SIunits_HeatCapacity C = 14.836318642146175 "Heat capacity of element (= cp*m)";
          parameter Modelica_SIunits_Temperature _T_start = 293.15
          annotation(Dialog(tab = "Initial", group = "Approximate"));
          Modelica_SIunits_Temperature T(start = _T_start) "Temperature of element";
          Real _T_der(unit = "K/s") "der(Temperature of element)";
          Modelica_SIunits_TemperatureSlope der_T "Time derivative of temperature (= der(T))";
        protected
          record port_rec
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end port_rec;
        public
          port_rec port;
        end 'coreHeatCapacitor[5]_rec';
      public
        'coreHeatCapacitor[5]_rec' 'coreHeatCapacitor[5]' annotation(Dialog);
      protected
        record 'sheet[1,1]_rec'
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 0.11740370421684126 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'sheet[1,1]_rec';
      public
        'sheet[1,1]_rec' 'sheet[1,1]';
      protected
        record 'sheet[1,2]_rec'
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 0.11740370421684126 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'sheet[1,2]_rec';
      public
        'sheet[1,2]_rec' 'sheet[1,2]';
      protected
        record 'sheet[1,3]_rec'
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 0.11740370421684126 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'sheet[1,3]_rec';
      public
        'sheet[1,3]_rec' 'sheet[1,3]';
      protected
        record 'sheet[1,4]_rec'
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 0.11740370421684126 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'sheet[1,4]_rec';
      public
        'sheet[1,4]_rec' 'sheet[1,4]';
      protected
        record 'sheet[1,5]_rec'
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 0.11740370421684126 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'sheet[1,5]_rec';
      public
        'sheet[1,5]_rec' 'sheet[1,5]';
      protected
        record 'sheet[2,1]_rec'
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 0.11740370421684126 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'sheet[2,1]_rec';
      public
        'sheet[2,1]_rec' 'sheet[2,1]';
      protected
        record 'sheet[2,2]_rec'
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 0.11740370421684126 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'sheet[2,2]_rec';
      public
        'sheet[2,2]_rec' 'sheet[2,2]';
      protected
        record 'sheet[2,3]_rec'
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 0.11740370421684126 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'sheet[2,3]_rec';
      public
        'sheet[2,3]_rec' 'sheet[2,3]';
      protected
        record 'sheet[2,4]_rec'
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 0.11740370421684126 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'sheet[2,4]_rec';
      public
        'sheet[2,4]_rec' 'sheet[2,4]';
      protected
        record 'sheet[2,5]_rec'
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 0.11740370421684126 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'sheet[2,5]_rec';
      public
        'sheet[2,5]_rec' 'sheet[2,5]';
      protected
        record 'sheet[3,1]_rec'
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 0.11740370421684126 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'sheet[3,1]_rec';
      public
        'sheet[3,1]_rec' 'sheet[3,1]';
      protected
        record 'sheet[3,2]_rec'
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 0.11740370421684126 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'sheet[3,2]_rec';
      public
        'sheet[3,2]_rec' 'sheet[3,2]';
      protected
        record 'sheet[3,3]_rec'
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 0.11740370421684126 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'sheet[3,3]_rec';
      public
        'sheet[3,3]_rec' 'sheet[3,3]';
      protected
        record 'sheet[3,4]_rec'
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 0.11740370421684126 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'sheet[3,4]_rec';
      public
        'sheet[3,4]_rec' 'sheet[3,4]';
      protected
        record 'sheet[3,5]_rec'
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 0.11740370421684126 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'sheet[3,5]_rec';
      public
        'sheet[3,5]_rec' 'sheet[3,5]';
      protected
        record 'sheet[4,1]_rec'
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 0.11740370421684126 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'sheet[4,1]_rec';
      public
        'sheet[4,1]_rec' 'sheet[4,1]';
      protected
        record 'sheet[4,2]_rec'
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 0.11740370421684126 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'sheet[4,2]_rec';
      public
        'sheet[4,2]_rec' 'sheet[4,2]';
      protected
        record 'sheet[4,3]_rec'
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 0.11740370421684126 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'sheet[4,3]_rec';
      public
        'sheet[4,3]_rec' 'sheet[4,3]';
      protected
        record 'sheet[4,4]_rec'
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 0.11740370421684126 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'sheet[4,4]_rec';
      public
        'sheet[4,4]_rec' 'sheet[4,4]';
      protected
        record 'sheet[4,5]_rec'
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 0.11740370421684126 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'sheet[4,5]_rec';
      public
        'sheet[4,5]_rec' 'sheet[4,5]';
      protected
        record 'top[1]_rec'
          Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate from port_a -> port_b";
          Modelica_SIunits_TemperatureDifference dT "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 1.1912235755122131 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'top[1]_rec';
      public
        'top[1]_rec' 'top[1]';
      protected
        record 'top[2]_rec'
          Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate from port_a -> port_b";
          Modelica_SIunits_TemperatureDifference dT "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 1.1912235755122131 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'top[2]_rec';
      public
        'top[2]_rec' 'top[2]';
      protected
        record 'top[3]_rec'
          Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate from port_a -> port_b";
          Modelica_SIunits_TemperatureDifference dT "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 1.1912235755122131 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'top[3]_rec';
      public
        'top[3]_rec' 'top[3]';
      protected
        record 'top[4]_rec'
          Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate from port_a -> port_b";
          Modelica_SIunits_TemperatureDifference dT "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 1.1912235755122131 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'top[4]_rec';
      public
        'top[4]_rec' 'top[4]';
      protected
        record 'top[5]_rec'
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 1.1912235755122131 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'top[5]_rec';
      public
        'top[5]_rec' 'top[5]';
      protected
        record 'bottom[1]_rec'
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
          constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 1.1912235755122131 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'bottom[1]_rec';
      public
        'bottom[1]_rec' 'bottom[1]';
      protected
        record 'bottom[2]_rec'
          Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate from port_a -> port_b";
          Modelica_SIunits_TemperatureDifference dT "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 1.1912235755122131 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'bottom[2]_rec';
      public
        'bottom[2]_rec' 'bottom[2]';
      protected
        record 'bottom[3]_rec'
          Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate from port_a -> port_b";
          Modelica_SIunits_TemperatureDifference dT "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 1.1912235755122131 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'bottom[3]_rec';
      public
        'bottom[3]_rec' 'bottom[3]';
      protected
        record 'bottom[4]_rec'
          Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate from port_a -> port_b";
          Modelica_SIunits_TemperatureDifference dT "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 1.1912235755122131 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'bottom[4]_rec';
      public
        'bottom[4]_rec' 'bottom[4]';
      protected
        record 'bottom[5]_rec'
          Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate from port_a -> port_b";
          Modelica_SIunits_TemperatureDifference dT "port_a.T - port_b.T";
          constant Modelica_SIunits_ThermalConductance G = 1.1912235755122131 "Constant thermal conductance of material";
        protected
          record port_a_rec
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end port_a_rec;
        public
          port_a_rec port_a;
        protected
          record port_b_rec
            Modelica_SIunits_Temperature T "Port temperature";
            Modelica_SIunits_HeatFlowRate Q_flow "Heat flow rate (positive if flowing from outside into the component)";
          end port_b_rec;
        public
          port_b_rec port_b;
        end 'bottom[5]_rec';
      public
        'bottom[5]_rec' 'bottom[5]';
      end thermalModel_rec;
    public
      thermalModel_rec thermalModel annotation(Dialog);
    protected
      record electricModel_rec
        constant Modelica_SIunits_ElectricCharge C_nominalOriginal = 7740.0 "Nominal capacity [As] based on the unscaled data";
        constant Modelica_SIunits_ElectricCharge C_nominal = 7740.0 "Nominal capacity [As] considering scaling";
        constant Real scalingFactorElectric = 1 "Scaling factor for cell capacity and electric components";
        constant Battery_Common_Types_StateOfCharge SOC_init = 0.5 "State of charge at t=0";
        constant Modelica_SIunits_Temperature T_init = 293.15 "Core temperature at t=0";
        constant Modelica_SIunits_ElectricCurrent epsilonI = 0.1075 "Current threshold for calculation of R_total";
        parameter Battery_Common_Types_StateOfCharge _SOC_start = 0.5
        annotation(Dialog(tab = "Initial", group = "Approximate"));
        Battery_Common_Types_StateOfCharge SOC(start = _SOC_start) "State of charge";
        Real _SOC_der(unit = "s-1") "der(State of charge)";
        Modelica_SIunits_Temperature T "Average battery core temperature";
        Modelica_SIunits_Voltage OCV "Open circuit voltage";
        Modelica_SIunits_ElectricCharge C_actual "Actual capacity [As] consideríng scaling and SOH";
        Modelica_SIunits_Resistance R_total "Total resistance";
        Modelica_SIunits_Power P_terminal "Power applied to the terminal of the battery";
        Modelica_SIunits_Power P_ideal "Ideal power without any losses";
        Modelica_SIunits_Power P_loss "Internal power loss";
        Modelica_SIunits_ElectricCurrent i "Cell current";
        Modelica_SIunits_Voltage v "Cell voltage";
        Battery_Common_Types_StateOfHealth SOH "Cell SOH";
        constant Boolean useChargeConservation = false "Use charge conservation in capacitors";
        constant Boolean useSerialResistor = true "Activate serial resistor";
        constant Boolean useSerialInductor = false "Activate serial inductor";
        constant Boolean useRC1 = true "Activate RC1";
        constant Boolean useRC2 = true "Activate RC2";
        constant Boolean useRC3 = false "Activate RC3";
        constant Real k_Rs = 1 "Resistance gain";
        constant Real k_L = 1 "Inductance gain";
        constant Real k_R1 = 1 "Resistance gain";
        constant Real k_C1 = 1 "Capacitance gain";
        constant Real k_R2 = 1 "Resistance gain";
        constant Real k_C2 = 1 "Capacitance gain";
        constant Real k_R3 = 1 "Resistance gain";
        constant Real k_C3 = 1 "Capacitance gain";
        constant Real k_OCV = 1 "OCV gain";
        constant Modelica_SIunits_Time T_currentFilter = 0.1 "Time Constant";
        constant Modelica.Blocks.Types.Init initTypeCurrentFilter = Modelica.Blocks.Types.Init.NoInit "Type of initialization (1: no init, 2: steady state, 3/4: initial output)";
        constant Real y_start_currentFilter = 0 "Initial or guess value of output (= state)";
        constant Boolean useSingleTableOCV = true "=false to use separate tables for charging and discharging";
        constant Battery_Common_Types_TableDependencyOCV tableDependencyOCV = Battery_Common_Types_TableDependencyOCV.SOC_T "Dependency of OCV";
        constant Battery_Common_Types_TableDependency3d tableDependencyRs = Battery_Common_Types_TableDependency3d.SOC_I_T "Dependency of serial resistor";
        constant Battery_Common_Types_TableDependency3d tableDependencyL = Battery_Common_Types_TableDependency3d.SOC_T_I "Dependency of serial inductor";
        constant Battery_Common_Types_TableDependency3d tableDependencyRC1 = Battery_Common_Types_TableDependency3d.SOC_I_T "Dependency of RC1";
        constant Battery_Common_Types_TableDependency3d tableDependencyRC2 = Battery_Common_Types_TableDependency3d.SOC_I_T "Dependency of RC2";
        constant Battery_Common_Types_TableDependency3d tableDependencyRC3 = Battery_Common_Types_TableDependency3d.SOC_T_I "Dependency of RC3";
        constant Boolean readFromFile = true "Read activation of components and table dependency from file";
        constant Boolean tableOnFileChargingOCV = true "True, if charging table is defined within a file or in the function usertab";
        constant Modelica.Blocks.Types.Smoothness smoothnessChargingOCV = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
        constant Modelica.Blocks.Types.Extrapolation extrapolationChargingOCV = Modelica.Blocks.Types.Extrapolation.LastTwoPoints "Extrapolation of data outside the definition range";
        constant Boolean tableOnFileDischargingOCV = true "True, if discharging table is defined within a file or in the function usertab";
        constant Modelica.Blocks.Types.Smoothness smoothnessDischargingOCV = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
        constant Modelica.Blocks.Types.Extrapolation extrapolationDischargingOCV = Modelica.Blocks.Types.Extrapolation.LastTwoPoints "Extrapolation of data outside the definition range";
        constant Boolean tableOnFileOCV = true "True, if OCV table is defined within a file or in the function usertab";
        constant Modelica.Blocks.Types.Smoothness smoothnessOCV = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
        constant Modelica.Blocks.Types.Extrapolation extrapolationOCV = Modelica.Blocks.Types.Extrapolation.LastTwoPoints "Extrapolation of data outside the definition range";
      protected
        record p_rec
          Modelica_SIunits_ElectricPotential v "Potential at the pin";
          Modelica_SIunits_Current i "Current flowing into the pin";
        end p_rec;
      public
        p_rec p;
      protected
        record n_rec
          constant Modelica_SIunits_ElectricPotential v = 0.0 "Potential at the pin";
          Modelica_SIunits_Current i "Current flowing into the pin";
        end n_rec;
      public
        n_rec n;
      protected
        record cellBus_rec
          Battery_Common_Interfaces_ElectricChargeOutput C_actual;
          constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
          Battery_Common_Interfaces_VoltageInput OCV;
          Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
          Battery_Common_Interfaces_ElectricPowerOutput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_ElectricResistanceInput R_total;
          Battery_Common_Interfaces_StateOfChargeOutput SOC;
          Battery_Common_Interfaces_StateOfHealthOutput SOH;
          Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
          Battery_Common_Interfaces_TemperatureOutput T;
          Battery_Common_Interfaces_ElectricCurrentOutput i;
          Battery_Common_Interfaces_VoltageOutput v;
        end cellBus_rec;
      public
        cellBus_rec cellBus;
      protected
        record realExpression_rec
          Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
        end realExpression_rec;
      public
        realExpression_rec realExpression;
      protected
        record realExpression1_rec
          Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
        end realExpression1_rec;
      public
        realExpression1_rec realExpression1;
      protected
        record realExpression2_rec
          Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
        end realExpression2_rec;
      public
        realExpression2_rec realExpression2;
      protected
        record realExpression3_rec
          Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
        end realExpression3_rec;
      public
        realExpression3_rec realExpression3;
      protected
        record realExpression4_rec
          Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
        end realExpression4_rec;
      public
        realExpression4_rec realExpression4;
      protected
        record realExpression5_rec
          constant Modelica_Blocks_Interfaces_RealOutput y = 7740.0 "Value of Real output";
        end realExpression5_rec;
      public
        realExpression5_rec realExpression5;
      protected
        record realExpression6_rec
          Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
        end realExpression6_rec;
      public
        realExpression6_rec realExpression6;
      protected
        record realExpression7_rec
          Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
        end realExpression7_rec;
      public
        realExpression7_rec realExpression7;
      protected
        record realExpression8_rec
          Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
        end realExpression8_rec;
      public
        realExpression8_rec realExpression8;
      protected
        record realExpression9_rec
          Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
        end realExpression9_rec;
      public
        realExpression9_rec realExpression9;
      protected
        record stateOfCharge_rec
          Battery_Common_Interfaces_StateOfChargeInput u;
        protected
          record cellBus_rec
            Battery_Common_Interfaces_StateOfChargeInput SOC;
            Battery_Common_Interfaces_ElectricChargeOutput C_actual;
            constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
            Battery_Common_Interfaces_VoltageInput OCV;
            Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
            Battery_Common_Interfaces_ElectricPowerOutput P_loss;
            Battery_Common_Interfaces_ElectricPowerInput P_terminal;
            Battery_Common_Interfaces_ElectricResistanceInput R_total;
            Battery_Common_Interfaces_StateOfHealthOutput SOH;
            Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
            Battery_Common_Interfaces_TemperatureOutput T;
            Battery_Common_Interfaces_ElectricCurrentOutput i;
            Battery_Common_Interfaces_VoltageOutput v;
          end cellBus_rec;
        public
          cellBus_rec cellBus;
        end stateOfCharge_rec;
      public
        stateOfCharge_rec stateOfCharge;
      protected
        record openCircuitVoltage_rec
          Battery_Common_Interfaces_VoltageInput u;
        protected
          record cellBus_rec
            Battery_Common_Interfaces_VoltageInput OCV;
            Battery_Common_Interfaces_ElectricChargeOutput C_actual;
            constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
            Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
            Battery_Common_Interfaces_ElectricPowerOutput P_loss;
            Battery_Common_Interfaces_ElectricPowerInput P_terminal;
            Battery_Common_Interfaces_ElectricResistanceInput R_total;
            Battery_Common_Interfaces_StateOfChargeOutput SOC;
            Battery_Common_Interfaces_StateOfHealthOutput SOH;
            Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
            Battery_Common_Interfaces_TemperatureOutput T;
            Battery_Common_Interfaces_ElectricCurrentOutput i;
            Battery_Common_Interfaces_VoltageOutput v;
          end cellBus_rec;
        public
          cellBus_rec cellBus;
        end openCircuitVoltage_rec;
      public
        openCircuitVoltage_rec openCircuitVoltage;
      protected
        record cellVoltage_rec
          Battery_Common_Interfaces_VoltageInput u;
        protected
          record cellBus_rec
            Battery_Common_Interfaces_VoltageInput v;
            Battery_Common_Interfaces_ElectricChargeOutput C_actual;
            constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
            Battery_Common_Interfaces_VoltageInput OCV;
            Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
            Battery_Common_Interfaces_ElectricPowerOutput P_loss;
            Battery_Common_Interfaces_ElectricPowerInput P_terminal;
            Battery_Common_Interfaces_ElectricResistanceInput R_total;
            Battery_Common_Interfaces_StateOfChargeOutput SOC;
            Battery_Common_Interfaces_StateOfHealthOutput SOH;
            Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
            Battery_Common_Interfaces_TemperatureOutput T;
            Battery_Common_Interfaces_ElectricCurrentOutput i;
          end cellBus_rec;
        public
          cellBus_rec cellBus;
        end cellVoltage_rec;
      public
        cellVoltage_rec cellVoltage;
      protected
        record cellCurrent_rec
          Battery_Common_Interfaces_ElectricCurrentInput u;
        protected
          record cellBus_rec
            Battery_Common_Interfaces_ElectricCurrentInput i;
            Battery_Common_Interfaces_ElectricChargeOutput C_actual;
            constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
            Battery_Common_Interfaces_VoltageInput OCV;
            Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
            Battery_Common_Interfaces_ElectricPowerOutput P_loss;
            Battery_Common_Interfaces_ElectricPowerInput P_terminal;
            Battery_Common_Interfaces_ElectricResistanceInput R_total;
            Battery_Common_Interfaces_StateOfChargeOutput SOC;
            Battery_Common_Interfaces_StateOfHealthOutput SOH;
            Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
            Battery_Common_Interfaces_TemperatureOutput T;
            Battery_Common_Interfaces_VoltageOutput v;
          end cellBus_rec;
        public
          cellBus_rec cellBus;
        end cellCurrent_rec;
      public
        cellCurrent_rec cellCurrent;
      protected
        record actualCapacity_rec
          Battery_Common_Interfaces_ElectricChargeInput u;
        protected
          record cellBus_rec
            Battery_Common_Interfaces_ElectricChargeInput C_actual;
            constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
            Battery_Common_Interfaces_VoltageInput OCV;
            Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
            Battery_Common_Interfaces_ElectricPowerOutput P_loss;
            Battery_Common_Interfaces_ElectricPowerInput P_terminal;
            Battery_Common_Interfaces_ElectricResistanceInput R_total;
            Battery_Common_Interfaces_StateOfChargeOutput SOC;
            Battery_Common_Interfaces_StateOfHealthOutput SOH;
            Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
            Battery_Common_Interfaces_TemperatureOutput T;
            Battery_Common_Interfaces_ElectricCurrentOutput i;
            Battery_Common_Interfaces_VoltageOutput v;
          end cellBus_rec;
        public
          cellBus_rec cellBus;
        end actualCapacity_rec;
      public
        actualCapacity_rec actualCapacity;
      protected
        record nominalCapacity_rec
          constant Battery_Common_Interfaces_ElectricChargeInput u = 7740.0;
        protected
          record cellBus_rec
            constant Battery_Common_Interfaces_ElectricChargeInput C_nominal = 7740.0;
            Battery_Common_Interfaces_ElectricChargeOutput C_actual;
            Battery_Common_Interfaces_VoltageInput OCV;
            Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
            Battery_Common_Interfaces_ElectricPowerOutput P_loss;
            Battery_Common_Interfaces_ElectricPowerInput P_terminal;
            Battery_Common_Interfaces_ElectricResistanceInput R_total;
            Battery_Common_Interfaces_StateOfChargeOutput SOC;
            Battery_Common_Interfaces_StateOfHealthOutput SOH;
            Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
            Battery_Common_Interfaces_TemperatureOutput T;
            Battery_Common_Interfaces_ElectricCurrentOutput i;
            Battery_Common_Interfaces_VoltageOutput v;
          end cellBus_rec;
        public
          cellBus_rec cellBus;
        end nominalCapacity_rec;
      public
        nominalCapacity_rec nominalCapacity;
      protected
        record innerResistance_rec
          Battery_Common_Interfaces_ElectricResistanceInput u;
        protected
          record cellBus_rec
            Battery_Common_Interfaces_ElectricResistanceInput R_total;
            Battery_Common_Interfaces_ElectricChargeOutput C_actual;
            constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
            Battery_Common_Interfaces_VoltageInput OCV;
            Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
            Battery_Common_Interfaces_ElectricPowerOutput P_loss;
            Battery_Common_Interfaces_ElectricPowerInput P_terminal;
            Battery_Common_Interfaces_StateOfChargeOutput SOC;
            Battery_Common_Interfaces_StateOfHealthOutput SOH;
            Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
            Battery_Common_Interfaces_TemperatureOutput T;
            Battery_Common_Interfaces_ElectricCurrentOutput i;
            Battery_Common_Interfaces_VoltageOutput v;
          end cellBus_rec;
        public
          cellBus_rec cellBus;
        end innerResistance_rec;
      public
        innerResistance_rec innerResistance;
      protected
        record terminalPower_rec
          Battery_Common_Interfaces_ElectricPowerInput u;
        protected
          record cellBus_rec
            Battery_Common_Interfaces_ElectricPowerInput P_terminal;
            Battery_Common_Interfaces_ElectricChargeOutput C_actual;
            constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
            Battery_Common_Interfaces_VoltageInput OCV;
            Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
            Battery_Common_Interfaces_ElectricPowerOutput P_loss;
            Battery_Common_Interfaces_ElectricResistanceInput R_total;
            Battery_Common_Interfaces_StateOfChargeOutput SOC;
            Battery_Common_Interfaces_StateOfHealthOutput SOH;
            Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
            Battery_Common_Interfaces_TemperatureOutput T;
            Battery_Common_Interfaces_ElectricCurrentOutput i;
            Battery_Common_Interfaces_VoltageOutput v;
          end cellBus_rec;
        public
          cellBus_rec cellBus;
        end terminalPower_rec;
      public
        terminalPower_rec terminalPower;
      protected
        record idealPower_rec
          Battery_Common_Interfaces_ElectricPowerInput u;
        protected
          record cellBus_rec
            Battery_Common_Interfaces_ElectricPowerInput P_ideal;
            Battery_Common_Interfaces_ElectricChargeOutput C_actual;
            constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
            Battery_Common_Interfaces_VoltageInput OCV;
            Battery_Common_Interfaces_ElectricPowerOutput P_loss;
            Battery_Common_Interfaces_ElectricPowerInput P_terminal;
            Battery_Common_Interfaces_ElectricResistanceInput R_total;
            Battery_Common_Interfaces_StateOfChargeOutput SOC;
            Battery_Common_Interfaces_StateOfHealthOutput SOH;
            Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
            Battery_Common_Interfaces_TemperatureOutput T;
            Battery_Common_Interfaces_ElectricCurrentOutput i;
            Battery_Common_Interfaces_VoltageOutput v;
          end cellBus_rec;
        public
          cellBus_rec cellBus;
        end idealPower_rec;
      public
        idealPower_rec idealPower;
      protected
        record lossPower_rec
          Battery_Common_Interfaces_ElectricPowerInput u;
        protected
          record cellBus_rec
            Battery_Common_Interfaces_ElectricPowerInput P_loss;
            Battery_Common_Interfaces_ElectricChargeOutput C_actual;
            constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
            Battery_Common_Interfaces_VoltageInput OCV;
            Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
            Battery_Common_Interfaces_ElectricPowerInput P_terminal;
            Battery_Common_Interfaces_ElectricResistanceInput R_total;
            Battery_Common_Interfaces_StateOfChargeOutput SOC;
            Battery_Common_Interfaces_StateOfHealthOutput SOH;
            Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
            Battery_Common_Interfaces_TemperatureOutput T;
            Battery_Common_Interfaces_ElectricCurrentOutput i;
            Battery_Common_Interfaces_VoltageOutput v;
          end cellBus_rec;
        public
          cellBus_rec cellBus;
        end lossPower_rec;
      public
        lossPower_rec lossPower;
      protected
        record temperature_rec
          Battery_Common_Interfaces_TemperatureOutput y;
        protected
          record cellBus_rec
            Battery_Common_Interfaces_TemperatureOutput T;
            Battery_Common_Interfaces_ElectricChargeOutput C_actual;
            constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
            Battery_Common_Interfaces_VoltageInput OCV;
            Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
            Battery_Common_Interfaces_ElectricPowerOutput P_loss;
            Battery_Common_Interfaces_ElectricPowerInput P_terminal;
            Battery_Common_Interfaces_ElectricResistanceInput R_total;
            Battery_Common_Interfaces_StateOfChargeOutput SOC;
            Battery_Common_Interfaces_StateOfHealthOutput SOH;
            Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
            Battery_Common_Interfaces_ElectricCurrentOutput i;
            Battery_Common_Interfaces_VoltageOutput v;
          end cellBus_rec;
        public
          cellBus_rec cellBus;
        end temperature_rec;
      public
        temperature_rec temperature;
      protected
        record stateOfHealth_rec
          Battery_Common_Interfaces_StateOfHealthOutput y;
        protected
          record cellBus_rec
            Battery_Common_Interfaces_StateOfHealthOutput SOH;
            Battery_Common_Interfaces_ElectricChargeOutput C_actual;
            constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
            Battery_Common_Interfaces_VoltageInput OCV;
            Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
            Battery_Common_Interfaces_ElectricPowerOutput P_loss;
            Battery_Common_Interfaces_ElectricPowerInput P_terminal;
            Battery_Common_Interfaces_ElectricResistanceInput R_total;
            Battery_Common_Interfaces_StateOfChargeOutput SOC;
            Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
            Battery_Common_Interfaces_TemperatureOutput T;
            Battery_Common_Interfaces_ElectricCurrentOutput i;
            Battery_Common_Interfaces_VoltageOutput v;
          end cellBus_rec;
        public
          cellBus_rec cellBus;
        end stateOfHealth_rec;
      public
        stateOfHealth_rec stateOfHealth;
      protected
        record resistanceStateOfHealth_rec
          Battery_Common_Interfaces_StateOfHealthOutput y;
        protected
          record cellBus_rec
            Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
            Battery_Common_Interfaces_ElectricChargeOutput C_actual;
            constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
            Battery_Common_Interfaces_VoltageInput OCV;
            Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
            Battery_Common_Interfaces_ElectricPowerOutput P_loss;
            Battery_Common_Interfaces_ElectricPowerInput P_terminal;
            Battery_Common_Interfaces_ElectricResistanceInput R_total;
            Battery_Common_Interfaces_StateOfChargeOutput SOC;
            Battery_Common_Interfaces_StateOfHealthOutput SOH;
            Battery_Common_Interfaces_TemperatureOutput T;
            Battery_Common_Interfaces_ElectricCurrentOutput i;
            Battery_Common_Interfaces_VoltageOutput v;
          end cellBus_rec;
        public
          cellBus_rec cellBus;
        end resistanceStateOfHealth_rec;
      public
        resistanceStateOfHealth_rec resistanceStateOfHealth;
      protected
        record currentSensor_rec
          Modelica_Blocks_Interfaces_RealOutput i(unit = "A") "Current in the branch from p to n as output signal";
        protected
          record p_rec
            Modelica_SIunits_ElectricPotential v "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end p_rec;
        public
          p_rec p;
        protected
          record n_rec
            Modelica_SIunits_ElectricPotential v "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end n_rec;
        public
          n_rec n;
        end currentSensor_rec;
      public
        currentSensor_rec currentSensor;
      protected
        record ocv_rec
          Modelica_SIunits_Voltage v "Voltage drop of the two pins (= p.v - n.v)";
          constant Real k = 1.0 "OCV gain";
          constant Boolean singleTableOCV = true "= true to use single table for OCV evaluation (no recovery and hysteresis)";
          Battery_Common_Interfaces_ElectricCurrentInput electricCurrent "Current input";
          Battery_Common_Interfaces_StateOfChargeInput stateOfCharge "State of charge input";
          Battery_Common_Interfaces_TemperatureInput temperature "Temperature input";
        protected
          record p_rec
            Modelica_SIunits_ElectricPotential v "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end p_rec;
        public
          p_rec p;
        protected
          record n_rec
            constant Modelica_SIunits_ElectricPotential v = 0.0 "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end n_rec;
        public
          n_rec n;
        protected
          record signalVoltage_rec
            Modelica_Blocks_Interfaces_RealInput v(unit = "V") "Voltage between pin p and n (= p.v - n.v) as input signal";
            Modelica_SIunits_Current i "Current flowing from pin p to pin n";
          protected
            record p_rec
              Modelica_SIunits_ElectricPotential v "Potential at the pin";
              Modelica_SIunits_Current i "Current flowing into the pin";
            end p_rec;
          public
            p_rec p;
          protected
            record n_rec
              constant Modelica_SIunits_ElectricPotential v = 0.0 "Potential at the pin";
              Modelica_SIunits_Current i "Current flowing into the pin";
            end n_rec;
          public
            n_rec n;
          end signalVoltage_rec;
        public
          signalVoltage_rec signalVoltage;
        protected
          record gainOCV_rec
            constant Real k(unit = "1") = 1.0 "Gain value multiplied with input signal";
            Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
            Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
          end gainOCV_rec;
        public
          gainOCV_rec gainOCV;
        protected
          record singleTable_rec
            constant Battery_Common_Types_TableDependencyOCV tableDependency = Battery_Common_Types_TableDependencyOCV.SOC_T "Dependency of look-up tables";
            Real tableInput1 "Table input 1";
            Real tableInput2 "Table input 2";
            Battery_Common_Interfaces_StateOfChargeInput stateOfCharge;
            Battery_Common_Interfaces_TemperatureInput temperature;
            Battery_Common_Interfaces_VoltageOutput voltageOut;
            constant Boolean tableOnFile = true "= true, if table is defined within a file or in the function usertab";
            constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
            constant Modelica.Blocks.Types.Extrapolation extrapolation = Modelica.Blocks.Types.Extrapolation.LastTwoPoints "Extrapolation of data outside the definition range";
          protected
            record input1_rec
              Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
            end input1_rec;
          public
            input1_rec input1;
          protected
            record input2_rec
              Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
            end input2_rec;
          public
            input2_rec input2;
          protected
            record tableLookup_rec
              Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
              Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
              Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
              constant Boolean tableOnFile = true "= true, if table is defined on file or in function usertab";
              constant Boolean verboseRead = true "= true, if info message that file is loading is to be printed";
              constant Modelica.Blocks.Types.Smoothness smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
              constant Modelica.Blocks.Types.Extrapolation extrapolation = Modelica.Blocks.Types.Extrapolation.LastTwoPoints "Extrapolation of data outside the definition range";
              constant Boolean verboseExtrapolation = false "= true, if warning messages are to be printed if table input is outside the definition range";
              parameter Real 'u_min[1]'(fixed=false) "Minimum abscissa value defined in table";
              parameter Real 'u_min[2]'(fixed=false) "Minimum abscissa value defined in table";
              parameter Real 'u_max[1]'(fixed=false) "Maximum abscissa value defined in table";
              parameter Real 'u_max[2]'(fixed=false) "Maximum abscissa value defined in table";
            protected
              record tableID_rec
                parameter Integer id(fixed=false);
              end tableID_rec;
            public
              tableID_rec tableID;
            end tableLookup_rec;
          public
            tableLookup_rec tableLookup;
          end singleTable_rec;
        public
          singleTable_rec singleTable;
        end ocv_rec;
      public
        ocv_rec ocv;
      protected
        record conditionalLowPass_rec
          constant Real k = 1.0 "Gain value, active with and without filter";
          constant Modelica_SIunits_Time T = 0.1 "Time Constant";
          constant Modelica.Blocks.Types.Init initType = Modelica.Blocks.Types.Init.NoInit "Type of initialization (1: no init, 2: steady state, 3/4: initial output)";
          constant Real y_start = 0.0 "Initial or guess value of output (= state)";
          Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
          Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
        protected
          record noFilter_rec
            Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
            Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
          end noFilter_rec;
        public
          noFilter_rec noFilter;
        protected
          record scaling_rec
            constant Real k(unit = "1") = 1.0 "Gain value multiplied with input signal";
            Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
            Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
          end scaling_rec;
        public
          scaling_rec scaling;
        end conditionalLowPass_rec;
      public
        conditionalLowPass_rec conditionalLowPass;
      protected
        record shortCircuitL_rec
          constant Modelica_SIunits_Voltage v = 0.0 "Voltage drop of the two pins (= p.v - n.v)";
        protected
          record p_rec
            Modelica_SIunits_ElectricPotential v "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end p_rec;
        public
          p_rec p;
        protected
          record n_rec
            Modelica_SIunits_ElectricPotential v "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end n_rec;
        public
          n_rec n;
        end shortCircuitL_rec;
      public
        shortCircuitL_rec shortCircuitL;
      protected
        record shortCircuitRC3_rec
          constant Modelica_SIunits_Voltage v = 0.0 "Voltage drop of the two pins (= p.v - n.v)";
        protected
          record p_rec
            Modelica_SIunits_ElectricPotential v "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end p_rec;
        public
          p_rec p;
        protected
          record n_rec
            Modelica_SIunits_ElectricPotential v "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end n_rec;
        public
          n_rec n;
        end shortCircuitRC3_rec;
      public
        shortCircuitRC3_rec shortCircuitRC3;
      protected
        record resistor_rec
          Modelica_SIunits_Voltage v "Voltage drop of the two pins (= p.v - n.v)";
          Battery_Common_Interfaces_ElectricCurrentInput electricCurrent "Current input";
          Battery_Common_Interfaces_StateOfChargeInput stateOfCharge "State of charge input";
          Battery_Common_Interfaces_TemperatureInput temperature "Temperature input";
          constant Real scalingFactor = 1.0 "Scaling factor for electric component";
          constant Boolean agingDependency = true "Use aging effects";
          Battery_Common_Types_StateOfHealth SOH;
          Battery_Common_Interfaces_StateOfHealthInput stateOfHealthInput "Input for the aging factor";
          Modelica_Blocks_Interfaces_RealOutput stateOfHealthInternal;
          constant Real k = 1.0 "Resistance gain";
        protected
          record p_rec
            Modelica_SIunits_ElectricPotential v "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end p_rec;
        public
          p_rec p;
        protected
          record n_rec
            Modelica_SIunits_ElectricPotential v "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end n_rec;
        public
          n_rec n;
        protected
          record tables_rec
            Battery_Common_Interfaces_ElectricCurrentInput electricCurrent "Current input";
            Modelica_Blocks_Interfaces_RealOutput y "Table output";
            Battery_Common_Interfaces_StateOfChargeInput stateOfCharge "State of charge input";
            Battery_Common_Interfaces_TemperatureInput temperature "Temperature input";
            constant Battery_Common_Types_TableDependency3d tableDependency = Battery_Common_Types_TableDependency3d.SOC_I_T "Dependency of look-up table";
            Real tableInput1 "Table input 1";
            Real tableInput2 "Table input 2";
            Real tableInput3 "Table input 3";
          protected
            record input1_rec
              Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
            end input1_rec;
          public
            input1_rec input1;
          protected
            record input2_rec
              Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
            end input2_rec;
          public
            input2_rec input2;
          protected
            record input3_rec
              Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
            end input3_rec;
          public
            input3_rec input3;
          protected
            record ndTable_rec
              constant Integer nin = 3 "Number of inputs";
              Modelica_Blocks_Interfaces_RealInput 'u[1]' "Connector of Real input signals";
              Modelica_Blocks_Interfaces_RealInput 'u[2]' "Connector of Real input signals";
              Modelica_Blocks_Interfaces_RealInput 'u[3]'(nominal = 300.0, min = 0.0) "Connector of Real input signals";
              Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
              constant Real 'dim[1,1]' = 11.0;
              constant Real 'dim[2,1]' = 6.0;
              constant Real 'dim[3,1]' = 5.0;
              constant Integer n_grid = 22 "Size of first dimension of column matrix of grid values";
              constant Integer n_table = 330 "Size of first dimension of column matrix of table values";
              constant Real 'grid[1,1]' = 0.0 "Grid values";
              constant Real 'grid[2,1]' = 0.1 "Grid values";
              constant Real 'grid[3,1]' = 0.2 "Grid values";
              constant Real 'grid[4,1]' = 0.3 "Grid values";
              constant Real 'grid[5,1]' = 0.4 "Grid values";
              constant Real 'grid[6,1]' = 0.5 "Grid values";
              constant Real 'grid[7,1]' = 0.6 "Grid values";
              constant Real 'grid[8,1]' = 0.7 "Grid values";
              constant Real 'grid[9,1]' = 0.8 "Grid values";
              constant Real 'grid[10,1]' = 0.9 "Grid values";
              constant Real 'grid[11,1]' = 1.0 "Grid values";
              constant Real 'grid[12,1]' = -6.15 "Grid values";
              constant Real 'grid[13,1]' = -4.6125 "Grid values";
              constant Real 'grid[14,1]' = -3.075 "Grid values";
              constant Real 'grid[15,1]' = -1.5375 "Grid values";
              constant Real 'grid[16,1]' = 1.025 "Grid values";
              constant Real 'grid[17,1]' = 2.05 "Grid values";
              constant Real 'grid[18,1]' = 263.0 "Grid values";
              constant Real 'grid[19,1]' = 273.0 "Grid values";
              constant Real 'grid[20,1]' = 283.0 "Grid values";
              constant Real 'grid[21,1]' = 298.0 "Grid values";
              constant Real 'grid[22,1]' = 313.0 "Grid values";
            end ndTable_rec;
          public
            ndTable_rec ndTable;
          end tables_rec;
        public
          tables_rec tables;
        protected
          record variableResistor_rec
            constant Modelica_SIunits_Temperature T_ref = 300.15 "Reference temperature";
            constant Modelica_SIunits_LinearTemperatureCoefficient alpha = 0 "Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))";
            Modelica_SIunits_Voltage v "Voltage drop of the two pins (= p.v - n.v)";
            Modelica_SIunits_Current i "Current flowing from pin p to pin n";
            constant Modelica_SIunits_Temperature T = 300.15 "Fixed device temperature if useHeatPort = false";
            Modelica_SIunits_Power LossPower "Loss power leaving component via heatPort";
            constant Modelica_SIunits_Temperature T_heatPort = 300.15 "Temperature of heatPort";
            Modelica_SIunits_Resistance R_actual "Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))";
            Modelica_Blocks_Interfaces_RealInput R(unit = "Ohm");
          protected
            record p_rec
              Modelica_SIunits_ElectricPotential v "Potential at the pin";
              Modelica_SIunits_Current i "Current flowing into the pin";
            end p_rec;
          public
            p_rec p;
          protected
            record n_rec
              Modelica_SIunits_ElectricPotential v "Potential at the pin";
              Modelica_SIunits_Current i "Current flowing into the pin";
            end n_rec;
          public
            n_rec n;
          end variableResistor_rec;
        public
          variableResistor_rec variableResistor;
        protected
          record gainR_rec
            constant Real k(unit = "1") = 1.0 "Gain value multiplied with input signal";
            Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
            Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
          end gainR_rec;
        public
          gainR_rec gainR;
        protected
          record agingR_rec
            Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
            Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
            Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
          end agingR_rec;
        public
          agingR_rec agingR;
        protected
          record agingFactor_rec
            Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
          end agingFactor_rec;
        public
          agingFactor_rec agingFactor;
        end resistor_rec;
      public
        resistor_rec resistor;
      protected
        record rc1_rec
          Modelica_SIunits_Voltage v "Voltage drop of the two pins (= p.v - n.v)";
          Battery_Common_Interfaces_ElectricCurrentInput electricCurrent "Current input";
          Battery_Common_Interfaces_StateOfChargeInput stateOfCharge "State of charge input";
          Battery_Common_Interfaces_TemperatureInput temperature "Temperature input";
          constant Real scalingFactor = 1.0 "Scaling factor for electric components";
          constant Boolean agingDependency = true "=true to enable aging effects modeling";
          Battery_Common_Types_StateOfHealth SOH_R;
          Battery_Common_Types_StateOfHealth SOH_C;
          Battery_Common_Interfaces_StateOfHealthInput stateOfHealthInputR "Input for the aging factor of the resistor";
          Battery_Common_Interfaces_StateOfHealthInput stateOfHealthInputC "Input for the aging factor of the capacitor";
          Modelica_Blocks_Interfaces_RealOutput stateOfHealthInternalR;
          Modelica_Blocks_Interfaces_RealOutput stateOfHealthInternalC;
          constant Real kR = 1.0 "Resistance gain";
          constant Real kC = 1.0 "Capacitance gain";
        protected
          record p_rec
            Modelica_SIunits_ElectricPotential v "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end p_rec;
        public
          p_rec p;
        protected
          record n_rec
            Modelica_SIunits_ElectricPotential v "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end n_rec;
        public
          n_rec n;
        protected
          record tablesR_rec
            Battery_Common_Interfaces_ElectricCurrentInput electricCurrent "Current input";
            Modelica_Blocks_Interfaces_RealOutput y "Table output";
            Battery_Common_Interfaces_StateOfChargeInput stateOfCharge "State of charge input";
            Battery_Common_Interfaces_TemperatureInput temperature "Temperature input";
            constant Battery_Common_Types_TableDependency3d tableDependency = Battery_Common_Types_TableDependency3d.SOC_I_T "Dependency of look-up table";
            Real tableInput1 "Table input 1";
            Real tableInput2 "Table input 2";
            Real tableInput3 "Table input 3";
          protected
            record input1_rec
              Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
            end input1_rec;
          public
            input1_rec input1;
          protected
            record input2_rec
              Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
            end input2_rec;
          public
            input2_rec input2;
          protected
            record input3_rec
              Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
            end input3_rec;
          public
            input3_rec input3;
          protected
            record ndTable_rec
              constant Integer nin = 3 "Number of inputs";
              Modelica_Blocks_Interfaces_RealInput 'u[1]' "Connector of Real input signals";
              Modelica_Blocks_Interfaces_RealInput 'u[2]' "Connector of Real input signals";
              Modelica_Blocks_Interfaces_RealInput 'u[3]' "Connector of Real input signals";
              Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
              constant Real 'dim[1,1]' = 11.0;
              constant Real 'dim[2,1]' = 6.0;
              constant Real 'dim[3,1]' = 5.0;
              constant Integer n_grid = 22 "Size of first dimension of column matrix of grid values";
              constant Integer n_table = 330 "Size of first dimension of column matrix of table values";
              constant Real 'grid[1,1]' = 0.0 "Grid values";
              constant Real 'grid[2,1]' = 0.1 "Grid values";
              constant Real 'grid[3,1]' = 0.2 "Grid values";
              constant Real 'grid[4,1]' = 0.3 "Grid values";
              constant Real 'grid[5,1]' = 0.4 "Grid values";
              constant Real 'grid[6,1]' = 0.5 "Grid values";
              constant Real 'grid[7,1]' = 0.6 "Grid values";
              constant Real 'grid[8,1]' = 0.7 "Grid values";
              constant Real 'grid[9,1]' = 0.8 "Grid values";
              constant Real 'grid[10,1]' = 0.9 "Grid values";
              constant Real 'grid[11,1]' = 1.0 "Grid values";
              constant Real 'grid[12,1]' = -6.15 "Grid values";
              constant Real 'grid[13,1]' = -4.6125 "Grid values";
              constant Real 'grid[14,1]' = -3.075 "Grid values";
              constant Real 'grid[15,1]' = -1.5375 "Grid values";
              constant Real 'grid[16,1]' = 1.025 "Grid values";
              constant Real 'grid[17,1]' = 2.05 "Grid values";
              constant Real 'grid[18,1]' = 263.0 "Grid values";
              constant Real 'grid[19,1]' = 273.0 "Grid values";
              constant Real 'grid[20,1]' = 283.0 "Grid values";
              constant Real 'grid[21,1]' = 298.0 "Grid values";
              constant Real 'grid[22,1]' = 313.0 "Grid values";
            end ndTable_rec;
          public
            ndTable_rec ndTable;
          end tablesR_rec;
        public
          tablesR_rec tablesR;
        protected
          record tablesC_rec
            Battery_Common_Interfaces_ElectricCurrentInput electricCurrent "Current input";
            Modelica_Blocks_Interfaces_RealOutput y "Table output";
            Battery_Common_Interfaces_StateOfChargeInput stateOfCharge "State of charge input";
            Battery_Common_Interfaces_TemperatureInput temperature "Temperature input";
            constant Battery_Common_Types_TableDependency3d tableDependency = Battery_Common_Types_TableDependency3d.SOC_I_T "Dependency of look-up table";
            Real tableInput1 "Table input 1";
            Real tableInput2 "Table input 2";
            Real tableInput3 "Table input 3";
          protected
            record input1_rec
              Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
            end input1_rec;
          public
            input1_rec input1;
          protected
            record input2_rec
              Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
            end input2_rec;
          public
            input2_rec input2;
          protected
            record input3_rec
              Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
            end input3_rec;
          public
            input3_rec input3;
          protected
            record ndTable_rec
              constant Integer nin = 3 "Number of inputs";
              Modelica_Blocks_Interfaces_RealInput 'u[1]' "Connector of Real input signals";
              Modelica_Blocks_Interfaces_RealInput 'u[2]' "Connector of Real input signals";
              Modelica_Blocks_Interfaces_RealInput 'u[3]' "Connector of Real input signals";
              Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
              constant Real 'dim[1,1]' = 11.0;
              constant Real 'dim[2,1]' = 6.0;
              constant Real 'dim[3,1]' = 5.0;
              constant Integer n_grid = 22 "Size of first dimension of column matrix of grid values";
              constant Integer n_table = 330 "Size of first dimension of column matrix of table values";
              constant Real 'grid[1,1]' = 0.0 "Grid values";
              constant Real 'grid[2,1]' = 0.1 "Grid values";
              constant Real 'grid[3,1]' = 0.2 "Grid values";
              constant Real 'grid[4,1]' = 0.3 "Grid values";
              constant Real 'grid[5,1]' = 0.4 "Grid values";
              constant Real 'grid[6,1]' = 0.5 "Grid values";
              constant Real 'grid[7,1]' = 0.6 "Grid values";
              constant Real 'grid[8,1]' = 0.7 "Grid values";
              constant Real 'grid[9,1]' = 0.8 "Grid values";
              constant Real 'grid[10,1]' = 0.9 "Grid values";
              constant Real 'grid[11,1]' = 1.0 "Grid values";
              constant Real 'grid[12,1]' = -6.15 "Grid values";
              constant Real 'grid[13,1]' = -4.6125 "Grid values";
              constant Real 'grid[14,1]' = -3.075 "Grid values";
              constant Real 'grid[15,1]' = -1.5375 "Grid values";
              constant Real 'grid[16,1]' = 1.025 "Grid values";
              constant Real 'grid[17,1]' = 2.05 "Grid values";
              constant Real 'grid[18,1]' = 263.0 "Grid values";
              constant Real 'grid[19,1]' = 273.0 "Grid values";
              constant Real 'grid[20,1]' = 283.0 "Grid values";
              constant Real 'grid[21,1]' = 298.0 "Grid values";
              constant Real 'grid[22,1]' = 313.0 "Grid values";
            end ndTable_rec;
          public
            ndTable_rec ndTable;
          end tablesC_rec;
        public
          tablesC_rec tablesC;
        protected
          record variableCapacitor_rec
            Modelica_SIunits_Voltage v "Voltage drop of the two pins (= p.v - n.v)";
            Real _v_der(unit = "V/s") "der(Voltage drop of the two pins (= p.v - n.v))";
            Modelica_SIunits_Current i "Current flowing from pin p to pin n";
            Modelica_Blocks_Interfaces_RealInput C(unit = "F");
            constant Boolean useCharge = false "Use equations for charge conservation";
            constant Modelica_SIunits_Capacitance Cmin = 1E-15 "lower bound for variable capacitance";
            Modelica_SIunits_ElectricCharge Q;
            constant Modelica_SIunits_Voltage IC = 0 "Initial Value";
            constant Boolean UIC = true;
          protected
            record p_rec
              Modelica_SIunits_ElectricPotential v "Potential at the pin";
              Modelica_SIunits_Current i "Current flowing into the pin";
            end p_rec;
          public
            p_rec p;
          protected
            record n_rec
              Modelica_SIunits_ElectricPotential v "Potential at the pin";
              Modelica_SIunits_Current i "Current flowing into the pin";
            end n_rec;
          public
            n_rec n;
          end variableCapacitor_rec;
        public
          variableCapacitor_rec variableCapacitor;
        protected
          record variableResistor_rec
            constant Modelica_SIunits_Temperature T_ref = 300.15 "Reference temperature";
            constant Modelica_SIunits_LinearTemperatureCoefficient alpha = 0 "Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))";
            Modelica_SIunits_Voltage v "Voltage drop of the two pins (= p.v - n.v)";
            Modelica_SIunits_Current i "Current flowing from pin p to pin n";
            constant Modelica_SIunits_Temperature T = 300.15 "Fixed device temperature if useHeatPort = false";
            Modelica_SIunits_Power LossPower "Loss power leaving component via heatPort";
            constant Modelica_SIunits_Temperature T_heatPort = 300.15 "Temperature of heatPort";
            Modelica_SIunits_Resistance R_actual "Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))";
            Modelica_Blocks_Interfaces_RealInput R(unit = "Ohm");
          protected
            record p_rec
              Modelica_SIunits_ElectricPotential v "Potential at the pin";
              Modelica_SIunits_Current i "Current flowing into the pin";
            end p_rec;
          public
            p_rec p;
          protected
            record n_rec
              Modelica_SIunits_ElectricPotential v "Potential at the pin";
              Modelica_SIunits_Current i "Current flowing into the pin";
            end n_rec;
          public
            n_rec n;
          end variableResistor_rec;
        public
          variableResistor_rec variableResistor;
        protected
          record agingFactorR_rec
            Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
          end agingFactorR_rec;
        public
          agingFactorR_rec agingFactorR;
        protected
          record agingR_rec
            Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
            Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
            Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
          end agingR_rec;
        public
          agingR_rec agingR;
        protected
          record gainR_rec
            constant Real k(unit = "1") = 1.0 "Gain value multiplied with input signal";
            Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
            Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
          end gainR_rec;
        public
          gainR_rec gainR;
        protected
          record agingFactorC_rec
            Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
          end agingFactorC_rec;
        public
          agingFactorC_rec agingFactorC;
        protected
          record agingC_rec
            Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
            Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
            Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
          end agingC_rec;
        public
          agingC_rec agingC;
        protected
          record gainC_rec
            constant Real k(unit = "1") = 1.0 "Gain value multiplied with input signal";
            Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
            Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
          end gainC_rec;
        public
          gainC_rec gainC;
        end rc1_rec;
      public
        rc1_rec rc1;
      protected
        record rc2_rec
          Modelica_SIunits_Voltage v "Voltage drop of the two pins (= p.v - n.v)";
          Battery_Common_Interfaces_ElectricCurrentInput electricCurrent "Current input";
          Battery_Common_Interfaces_StateOfChargeInput stateOfCharge "State of charge input";
          Battery_Common_Interfaces_TemperatureInput temperature "Temperature input";
          constant Real scalingFactor = 1.0 "Scaling factor for electric components";
          constant Boolean agingDependency = true "=true to enable aging effects modeling";
          Battery_Common_Types_StateOfHealth SOH_R;
          Battery_Common_Types_StateOfHealth SOH_C;
          Battery_Common_Interfaces_StateOfHealthInput stateOfHealthInputR "Input for the aging factor of the resistor";
          Battery_Common_Interfaces_StateOfHealthInput stateOfHealthInputC "Input for the aging factor of the capacitor";
          Modelica_Blocks_Interfaces_RealOutput stateOfHealthInternalR;
          Modelica_Blocks_Interfaces_RealOutput stateOfHealthInternalC;
          constant Real kR = 1.0 "Resistance gain";
          constant Real kC = 1.0 "Capacitance gain";
        protected
          record p_rec
            Modelica_SIunits_ElectricPotential v "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end p_rec;
        public
          p_rec p;
        protected
          record n_rec
            Modelica_SIunits_ElectricPotential v "Potential at the pin";
            Modelica_SIunits_Current i "Current flowing into the pin";
          end n_rec;
        public
          n_rec n;
        protected
          record tablesR_rec
            Battery_Common_Interfaces_ElectricCurrentInput electricCurrent "Current input";
            Modelica_Blocks_Interfaces_RealOutput y "Table output";
            Battery_Common_Interfaces_StateOfChargeInput stateOfCharge "State of charge input";
            Battery_Common_Interfaces_TemperatureInput temperature "Temperature input";
            constant Battery_Common_Types_TableDependency3d tableDependency = Battery_Common_Types_TableDependency3d.SOC_I_T "Dependency of look-up table";
            Real tableInput1 "Table input 1";
            Real tableInput2 "Table input 2";
            Real tableInput3 "Table input 3";
          protected
            record input1_rec
              Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
            end input1_rec;
          public
            input1_rec input1;
          protected
            record input2_rec
              Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
            end input2_rec;
          public
            input2_rec input2;
          protected
            record input3_rec
              Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
            end input3_rec;
          public
            input3_rec input3;
          protected
            record ndTable_rec
              constant Integer nin = 3 "Number of inputs";
              Modelica_Blocks_Interfaces_RealInput 'u[1]' "Connector of Real input signals";
              Modelica_Blocks_Interfaces_RealInput 'u[2]' "Connector of Real input signals";
              Modelica_Blocks_Interfaces_RealInput 'u[3]' "Connector of Real input signals";
              Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
              constant Real 'dim[1,1]' = 11.0;
              constant Real 'dim[2,1]' = 6.0;
              constant Real 'dim[3,1]' = 5.0;
              constant Integer n_grid = 22 "Size of first dimension of column matrix of grid values";
              constant Integer n_table = 330 "Size of first dimension of column matrix of table values";
              constant Real 'grid[1,1]' = 0.0 "Grid values";
              constant Real 'grid[2,1]' = 0.1 "Grid values";
              constant Real 'grid[3,1]' = 0.2 "Grid values";
              constant Real 'grid[4,1]' = 0.3 "Grid values";
              constant Real 'grid[5,1]' = 0.4 "Grid values";
              constant Real 'grid[6,1]' = 0.5 "Grid values";
              constant Real 'grid[7,1]' = 0.6 "Grid values";
              constant Real 'grid[8,1]' = 0.7 "Grid values";
              constant Real 'grid[9,1]' = 0.8 "Grid values";
              constant Real 'grid[10,1]' = 0.9 "Grid values";
              constant Real 'grid[11,1]' = 1.0 "Grid values";
              constant Real 'grid[12,1]' = -6.15 "Grid values";
              constant Real 'grid[13,1]' = -4.6125 "Grid values";
              constant Real 'grid[14,1]' = -3.075 "Grid values";
              constant Real 'grid[15,1]' = -1.5375 "Grid values";
              constant Real 'grid[16,1]' = 1.025 "Grid values";
              constant Real 'grid[17,1]' = 2.05 "Grid values";
              constant Real 'grid[18,1]' = 263.0 "Grid values";
              constant Real 'grid[19,1]' = 273.0 "Grid values";
              constant Real 'grid[20,1]' = 283.0 "Grid values";
              constant Real 'grid[21,1]' = 298.0 "Grid values";
              constant Real 'grid[22,1]' = 313.0 "Grid values";
            end ndTable_rec;
          public
            ndTable_rec ndTable;
          end tablesR_rec;
        public
          tablesR_rec tablesR;
        protected
          record tablesC_rec
            Battery_Common_Interfaces_ElectricCurrentInput electricCurrent "Current input";
            Modelica_Blocks_Interfaces_RealOutput y "Table output";
            Battery_Common_Interfaces_StateOfChargeInput stateOfCharge "State of charge input";
            Battery_Common_Interfaces_TemperatureInput temperature "Temperature input";
            constant Battery_Common_Types_TableDependency3d tableDependency = Battery_Common_Types_TableDependency3d.SOC_I_T "Dependency of look-up table";
            Real tableInput1 "Table input 1";
            Real tableInput2 "Table input 2";
            Real tableInput3 "Table input 3";
          protected
            record input1_rec
              Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
            end input1_rec;
          public
            input1_rec input1;
          protected
            record input2_rec
              Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
            end input2_rec;
          public
            input2_rec input2;
          protected
            record input3_rec
              Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
            end input3_rec;
          public
            input3_rec input3;
          protected
            record ndTable_rec
              constant Integer nin = 3 "Number of inputs";
              Modelica_Blocks_Interfaces_RealInput 'u[1]' "Connector of Real input signals";
              Modelica_Blocks_Interfaces_RealInput 'u[2]' "Connector of Real input signals";
              Modelica_Blocks_Interfaces_RealInput 'u[3]' "Connector of Real input signals";
              Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
              constant Real 'dim[1,1]' = 11.0;
              constant Real 'dim[2,1]' = 6.0;
              constant Real 'dim[3,1]' = 5.0;
              constant Integer n_grid = 22 "Size of first dimension of column matrix of grid values";
              constant Integer n_table = 330 "Size of first dimension of column matrix of table values";
              constant Real 'grid[1,1]' = 0.0 "Grid values";
              constant Real 'grid[2,1]' = 0.1 "Grid values";
              constant Real 'grid[3,1]' = 0.2 "Grid values";
              constant Real 'grid[4,1]' = 0.3 "Grid values";
              constant Real 'grid[5,1]' = 0.4 "Grid values";
              constant Real 'grid[6,1]' = 0.5 "Grid values";
              constant Real 'grid[7,1]' = 0.6 "Grid values";
              constant Real 'grid[8,1]' = 0.7 "Grid values";
              constant Real 'grid[9,1]' = 0.8 "Grid values";
              constant Real 'grid[10,1]' = 0.9 "Grid values";
              constant Real 'grid[11,1]' = 1.0 "Grid values";
              constant Real 'grid[12,1]' = -6.15 "Grid values";
              constant Real 'grid[13,1]' = -4.6125 "Grid values";
              constant Real 'grid[14,1]' = -3.075 "Grid values";
              constant Real 'grid[15,1]' = -1.5375 "Grid values";
              constant Real 'grid[16,1]' = 1.025 "Grid values";
              constant Real 'grid[17,1]' = 2.05 "Grid values";
              constant Real 'grid[18,1]' = 263.0 "Grid values";
              constant Real 'grid[19,1]' = 273.0 "Grid values";
              constant Real 'grid[20,1]' = 283.0 "Grid values";
              constant Real 'grid[21,1]' = 298.0 "Grid values";
              constant Real 'grid[22,1]' = 313.0 "Grid values";
            end ndTable_rec;
          public
            ndTable_rec ndTable;
          end tablesC_rec;
        public
          tablesC_rec tablesC;
        protected
          record variableCapacitor_rec
            Modelica_SIunits_Voltage v "Voltage drop of the two pins (= p.v - n.v)";
            Real _v_der(unit = "V/s") "der(Voltage drop of the two pins (= p.v - n.v))";
            Modelica_SIunits_Current i "Current flowing from pin p to pin n";
            Modelica_Blocks_Interfaces_RealInput C(unit = "F");
            constant Boolean useCharge = false "Use equations for charge conservation";
            constant Modelica_SIunits_Capacitance Cmin = 1E-15 "lower bound for variable capacitance";
            Modelica_SIunits_ElectricCharge Q;
            constant Modelica_SIunits_Voltage IC = 0 "Initial Value";
            constant Boolean UIC = true;
          protected
            record p_rec
              Modelica_SIunits_ElectricPotential v "Potential at the pin";
              Modelica_SIunits_Current i "Current flowing into the pin";
            end p_rec;
          public
            p_rec p;
          protected
            record n_rec
              Modelica_SIunits_ElectricPotential v "Potential at the pin";
              Modelica_SIunits_Current i "Current flowing into the pin";
            end n_rec;
          public
            n_rec n;
          end variableCapacitor_rec;
        public
          variableCapacitor_rec variableCapacitor;
        protected
          record variableResistor_rec
            constant Modelica_SIunits_Temperature T_ref = 300.15 "Reference temperature";
            constant Modelica_SIunits_LinearTemperatureCoefficient alpha = 0 "Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))";
            Modelica_SIunits_Voltage v "Voltage drop of the two pins (= p.v - n.v)";
            Modelica_SIunits_Current i "Current flowing from pin p to pin n";
            constant Modelica_SIunits_Temperature T = 300.15 "Fixed device temperature if useHeatPort = false";
            Modelica_SIunits_Power LossPower "Loss power leaving component via heatPort";
            constant Modelica_SIunits_Temperature T_heatPort = 300.15 "Temperature of heatPort";
            Modelica_SIunits_Resistance R_actual "Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))";
            Modelica_Blocks_Interfaces_RealInput R(unit = "Ohm");
          protected
            record p_rec
              Modelica_SIunits_ElectricPotential v "Potential at the pin";
              Modelica_SIunits_Current i "Current flowing into the pin";
            end p_rec;
          public
            p_rec p;
          protected
            record n_rec
              Modelica_SIunits_ElectricPotential v "Potential at the pin";
              Modelica_SIunits_Current i "Current flowing into the pin";
            end n_rec;
          public
            n_rec n;
          end variableResistor_rec;
        public
          variableResistor_rec variableResistor;
        protected
          record agingFactorR_rec
            Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
          end agingFactorR_rec;
        public
          agingFactorR_rec agingFactorR;
        protected
          record agingR_rec
            Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
            Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
            Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
          end agingR_rec;
        public
          agingR_rec agingR;
        protected
          record gainR_rec
            constant Real k(unit = "1") = 1.0 "Gain value multiplied with input signal";
            Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
            Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
          end gainR_rec;
        public
          gainR_rec gainR;
        protected
          record agingFactorC_rec
            Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
          end agingFactorC_rec;
        public
          agingFactorC_rec agingFactorC;
        protected
          record agingC_rec
            Modelica_Blocks_Interfaces_RealInput u1 "Connector of Real input signal 1";
            Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
            Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
          end agingC_rec;
        public
          agingC_rec agingC;
        protected
          record gainC_rec
            constant Real k(unit = "1") = 1.0 "Gain value multiplied with input signal";
            Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
            Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
          end gainC_rec;
        public
          gainC_rec gainC;
        end rc2_rec;
      public
        rc2_rec rc2;
      end electricModel_rec;
    public
      electricModel_rec electricModel annotation(Dialog);
    protected
      record agingModel_rec
        constant Real SOH_init = 1.0 "SOH start value";
        constant Real SOHR_init = 1.0 "SOHR start value";
        constant Real ratio = 0.5 "Ratio of calendar/cyclic initial capacitiy loss (calculated from SOH_init)";
      protected
        record cellBus_rec
          Battery_Common_Interfaces_ElectricChargeOutput C_actual;
          constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
          Battery_Common_Interfaces_VoltageInput OCV;
          Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
          Battery_Common_Interfaces_ElectricPowerOutput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_ElectricResistanceInput R_total;
          Battery_Common_Interfaces_StateOfChargeOutput SOC;
          Battery_Common_Interfaces_StateOfHealthOutput SOH;
          Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
          Battery_Common_Interfaces_TemperatureOutput T;
          Battery_Common_Interfaces_ElectricCurrentOutput i;
          Battery_Common_Interfaces_VoltageOutput v;
        end cellBus_rec;
      public
        cellBus_rec cellBus;
      protected
        record stateOfHealth_rec
          Battery_Common_Interfaces_StateOfHealthInput u;
        protected
          record cellBus_rec
            Battery_Common_Interfaces_StateOfHealthInput SOH;
            Battery_Common_Interfaces_ElectricChargeOutput C_actual;
            constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
            Battery_Common_Interfaces_VoltageInput OCV;
            Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
            Battery_Common_Interfaces_ElectricPowerOutput P_loss;
            Battery_Common_Interfaces_ElectricPowerInput P_terminal;
            Battery_Common_Interfaces_ElectricResistanceInput R_total;
            Battery_Common_Interfaces_StateOfChargeOutput SOC;
            Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
            Battery_Common_Interfaces_TemperatureOutput T;
            Battery_Common_Interfaces_ElectricCurrentOutput i;
            Battery_Common_Interfaces_VoltageOutput v;
          end cellBus_rec;
        public
          cellBus_rec cellBus;
        end stateOfHealth_rec;
      public
        stateOfHealth_rec stateOfHealth;
      protected
        record resistanceStateOfHealth_rec
          Battery_Common_Interfaces_StateOfHealthInput u;
        protected
          record cellBus_rec
            Battery_Common_Interfaces_StateOfHealthInput SOH_resistance;
            Battery_Common_Interfaces_ElectricChargeOutput C_actual;
            constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
            Battery_Common_Interfaces_VoltageInput OCV;
            Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
            Battery_Common_Interfaces_ElectricPowerOutput P_loss;
            Battery_Common_Interfaces_ElectricPowerInput P_terminal;
            Battery_Common_Interfaces_ElectricResistanceInput R_total;
            Battery_Common_Interfaces_StateOfChargeOutput SOC;
            Battery_Common_Interfaces_StateOfHealthOutput SOH;
            Battery_Common_Interfaces_TemperatureOutput T;
            Battery_Common_Interfaces_ElectricCurrentOutput i;
            Battery_Common_Interfaces_VoltageOutput v;
          end cellBus_rec;
        public
          cellBus_rec cellBus;
        end resistanceStateOfHealth_rec;
      public
        resistanceStateOfHealth_rec resistanceStateOfHealth;
      protected
        record cycleAging_rec
          constant Real SOH_init = 1.0 "SOH start value";
          constant Real SOHR_init = 1.0 "SOHR start value";
          constant Boolean useLowPass_SOH = false "Use low pass filter, if false the signal is passed through (y=k*u)";
          constant Real k_SOH(unit = "1") = 1 "Gain";
          constant Modelica_SIunits_Time T_SOH = 1 "Time Constant";
          constant Modelica.Blocks.Types.Init initType_SOH = Modelica.Blocks.Types.Init.InitialOutput "Type of initialization (1: no init, 2: steady state, 3/4: initial output)";
          constant Real y_start_SOH = 1.0 "Initial or guess value of output (= state)";
          constant Boolean useLowPass_SOHR = false "Use low pass filter, if false the signal is passed through (y=k*u)";
          constant Real k_SOHR(unit = "1") = 1 "Gain";
          constant Modelica_SIunits_Time T_SOHR = 1 "Time Constant";
          constant Modelica.Blocks.Types.Init initType_SOHR = Modelica.Blocks.Types.Init.InitialOutput "Type of initialization (1: no init, 2: steady state, 3/4: initial output)";
          constant Real y_start_SOHR = 1.0 "Initial or guess value of output (= state)";
          parameter Battery_Common_Types_StateOfHealth _SOH_start = 1.0
          annotation(Dialog(tab = "Initial", group = "Approximate"));
          Battery_Common_Types_StateOfHealth SOH(start = _SOH_start) "State of health calculated in this model and connected to the output SOH";
          parameter Battery_Common_Types_StateOfHealth _SOHR_start = 1.0
          annotation(Dialog(tab = "Initial", group = "Approximate"));
          Battery_Common_Types_StateOfHealth SOHR(start = _SOHR_start) "State of health resistance calculated in this model and connected to the output SOHR";
          Battery_Common_Interfaces_StateOfHealthOutput stateOfHealth;
          Battery_Common_Interfaces_StateOfHealthOutput stateOfHealthR;
          constant Real cRate_min = 0.001 "Cycle detecion is only active for c-rates higher than this value";
          constant Integer n_cycles_init = 0 "Initial number of detected cycles";
          constant Integer n_fullCycles_init = 0 "Initial number of full cycles";
          constant Boolean discharging_init = false "Initial state for discharging detection";
          constant Real a_C = 0.00076 "Constant in aging factor";
          constant Real b_C = 0.007348 "OCV factor in aging factor";
          constant Real c_C = -3.667 "Mean OCV offset in aging factor";
          constant Real d_C = 0.004081 "DOD/DOC factor in aging factor";
          constant Real a_R = -1.521E-05 "Constant in aging factor";
          constant Real b_R = 0.0002153 "OCV factor in aging factor";
          constant Real c_R = -3.725 "Mean OCV offset in aging factor";
          constant Real d_R = 0.0002798 "DOD/DOC factor in aging factor";
          constant Modelica_SIunits_ElectricCharge C_original = 7740.0 "Original capacity the model is parameterized for";
          constant Boolean useLowPass = true "Use low pass filter, if false the signal is passed through (y=k*u)";
          constant Real k = 1 "Gain value, active with and without filter";
          constant Modelica_SIunits_Time T_c = 0.1 "Time Constant";
          constant Real y_start = 0 "Initial or guess value of output (= state)";
          constant Modelica.Blocks.Types.Init initType = Modelica.Blocks.Types.Init.InitialOutput "Type of initialization (1: no init, 2: steady state, 3/4: initial output)";
          constant Modelica_SIunits_ElectricCharge C_nominal = 7740.0 "Nominal cell capacity (scaled)";
          parameter Real _R_growth_rel_start = 0
          annotation(Dialog(tab = "Initial", group = "Approximate"));
          Real R_growth_rel(start = _R_growth_rel_start) "Relative resistance increase calculated after one cycle";
          parameter Real _C_loss_rel_start = 0
          annotation(Dialog(tab = "Initial", group = "Approximate"));
          Real C_loss_rel(start = _C_loss_rel_start) "Relative capacity loss calculated after one cycle";
          Real OCV_mean "Mean value of OCV during one cycle";
          parameter Modelica_SIunits_Time _cycleTime_start = 0
          annotation(Dialog(tab = "Initial", group = "Approximate"));
          Modelica_SIunits_Time cycleTime(start = _cycleTime_start) "Time of current cycle";
          Real _cycleTime_der(unit = "1") "der(Time of current cycle)";
          parameter Real _chargeAh_cycle_start = 0
          annotation(Dialog(tab = "Initial", group = "Approximate"));
          Real chargeAh_cycle(start = _chargeAh_cycle_start) "Charge throughput during cycle in Ah";
          Real _chargeAh_cycle_der "der(Charge throughput during cycle in Ah)";
          parameter Real _chargeAh_total_start = 0
          annotation(Dialog(tab = "Initial", group = "Approximate"));
          Real chargeAh_total(start = _chargeAh_total_start) "Charge throughput during life time";
          Real _chargeAh_total_der "der(Charge throughput during life time)";
          parameter Real _DOD_cycle_start = 0
          annotation(Dialog(tab = "Initial", group = "Approximate"));
          Real DOD_cycle(start = _DOD_cycle_start) "Depth of discharge in cycle";
          Real _DOD_cycle_der "der(Depth of discharge in cycle)";
          parameter Real _DOC_cycle_start = 0
          annotation(Dialog(tab = "Initial", group = "Approximate"));
          Real DOC_cycle(start = _DOC_cycle_start) "Depth of charge in cycle";
          Real _DOC_cycle_der "der(Depth of charge in cycle)";
          parameter Real _OCV_meanCounter_start = 0
          annotation(Dialog(tab = "Initial", group = "Approximate"));
          Real OCV_meanCounter(start = _OCV_meanCounter_start) "Helper to calculate the mean OCV";
          Real _OCV_meanCounter_der "der(Helper to calculate the mean OCV)";
          Modelica_SIunits_Voltage OCV "Open circuit voltage";
          Real C_fade "Capacity fade aging factor";
          Real R_increase "Resistance increase aging factor";
          parameter Boolean _discharging_start = false
          annotation(Dialog(tab = "Initial", group = "Approximate"));
          Boolean discharging(start = _discharging_start) "True if cell is discharging";
          parameter Real _fullCycles_start = 0
          annotation(Dialog(tab = "Initial", group = "Approximate"));
          Real fullCycles(start = _fullCycles_start) "Number of full cycles (charge throughput=2*C_nominal)";
          Real _fullCycles_der "der(Number of full cycles (charge throughput=2*C_nominal))";
          constant Modelica_SIunits_ElectricCurrent i_min = 0.00215 "Current limit for activation of cycle detection";
        protected
          record cellBus_rec
            Battery_Common_Interfaces_ElectricChargeOutput C_actual;
            constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
            Battery_Common_Interfaces_VoltageInput OCV;
            Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
            Battery_Common_Interfaces_ElectricPowerOutput P_loss;
            Battery_Common_Interfaces_ElectricPowerInput P_terminal;
            Battery_Common_Interfaces_ElectricResistanceInput R_total;
            Battery_Common_Interfaces_StateOfChargeOutput SOC;
            Battery_Common_Interfaces_StateOfHealthOutput SOH;
            Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
            Battery_Common_Interfaces_TemperatureOutput T;
            Battery_Common_Interfaces_ElectricCurrentOutput i;
            Battery_Common_Interfaces_VoltageOutput v;
          end cellBus_rec;
        public
          cellBus_rec cellBus;
        protected
          record conditionalLowPassSOH_rec
            constant Real k = 1.0 "Gain value, active with and without filter";
            constant Modelica_SIunits_Time T = 1.0 "Time Constant";
            constant Modelica.Blocks.Types.Init initType = Modelica.Blocks.Types.Init.InitialOutput "Type of initialization (1: no init, 2: steady state, 3/4: initial output)";
            constant Real y_start = 1.0 "Initial or guess value of output (= state)";
            Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
            Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
          protected
            record noFilter_rec
              Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
              Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
            end noFilter_rec;
          public
            noFilter_rec noFilter;
          protected
            record scaling_rec
              constant Real k(unit = "1") = 1.0 "Gain value multiplied with input signal";
              Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
              Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
            end scaling_rec;
          public
            scaling_rec scaling;
          end conditionalLowPassSOH_rec;
        public
          conditionalLowPassSOH_rec conditionalLowPassSOH;
        protected
          record conditionalLowPassSOHR_rec
            constant Real k = 1.0 "Gain value, active with and without filter";
            constant Modelica_SIunits_Time T = 1.0 "Time Constant";
            constant Modelica.Blocks.Types.Init initType = Modelica.Blocks.Types.Init.InitialOutput "Type of initialization (1: no init, 2: steady state, 3/4: initial output)";
            constant Real y_start = 1.0 "Initial or guess value of output (= state)";
            Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
            Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
          protected
            record noFilter_rec
              Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
              Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
            end noFilter_rec;
          public
            noFilter_rec noFilter;
          protected
            record scaling_rec
              constant Real k(unit = "1") = 1.0 "Gain value multiplied with input signal";
              Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
              Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
            end scaling_rec;
          public
            scaling_rec scaling;
          end conditionalLowPassSOHR_rec;
        public
          conditionalLowPassSOHR_rec conditionalLowPassSOHR;
        protected
          record realExpression_rec
            Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
          end realExpression_rec;
        public
          realExpression_rec realExpression;
        protected
          record realExpression1_rec
            Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
          end realExpression1_rec;
        public
          realExpression1_rec realExpression1;
        protected
          record cellCurrent_rec
            Battery_Common_Interfaces_ElectricCurrentOutput y;
          protected
            record cellBus_rec
              Battery_Common_Interfaces_ElectricCurrentOutput i;
              Battery_Common_Interfaces_ElectricChargeOutput C_actual;
              constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
              Battery_Common_Interfaces_VoltageInput OCV;
              Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
              Battery_Common_Interfaces_ElectricPowerOutput P_loss;
              Battery_Common_Interfaces_ElectricPowerInput P_terminal;
              Battery_Common_Interfaces_ElectricResistanceInput R_total;
              Battery_Common_Interfaces_StateOfChargeOutput SOC;
              Battery_Common_Interfaces_StateOfHealthOutput SOH;
              Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
              Battery_Common_Interfaces_TemperatureOutput T;
              Battery_Common_Interfaces_VoltageOutput v;
            end cellBus_rec;
          public
            cellBus_rec cellBus;
          end cellCurrent_rec;
        public
          cellCurrent_rec cellCurrent;
        protected
          record openCircuitVoltage_rec
            Battery_Common_Interfaces_VoltageOutput y;
          protected
            record cellBus_rec
              Battery_Common_Interfaces_VoltageOutput OCV;
              Battery_Common_Interfaces_ElectricChargeOutput C_actual;
              constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
              Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
              Battery_Common_Interfaces_ElectricPowerOutput P_loss;
              Battery_Common_Interfaces_ElectricPowerInput P_terminal;
              Battery_Common_Interfaces_ElectricResistanceInput R_total;
              Battery_Common_Interfaces_StateOfChargeOutput SOC;
              Battery_Common_Interfaces_StateOfHealthOutput SOH;
              Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
              Battery_Common_Interfaces_TemperatureOutput T;
              Battery_Common_Interfaces_ElectricCurrentOutput i;
              Battery_Common_Interfaces_VoltageOutput v;
            end cellBus_rec;
          public
            cellBus_rec cellBus;
          end openCircuitVoltage_rec;
        public
          openCircuitVoltage_rec openCircuitVoltage;
        protected
          record nominalCapacity_rec
            constant Battery_Common_Interfaces_ElectricChargeOutput y = 7740.0;
          protected
            record cellBus_rec
              constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
              Battery_Common_Interfaces_ElectricChargeOutput C_actual;
              Battery_Common_Interfaces_VoltageInput OCV;
              Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
              Battery_Common_Interfaces_ElectricPowerOutput P_loss;
              Battery_Common_Interfaces_ElectricPowerInput P_terminal;
              Battery_Common_Interfaces_ElectricResistanceInput R_total;
              Battery_Common_Interfaces_StateOfChargeOutput SOC;
              Battery_Common_Interfaces_StateOfHealthOutput SOH;
              Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
              Battery_Common_Interfaces_TemperatureOutput T;
              Battery_Common_Interfaces_ElectricCurrentOutput i;
              Battery_Common_Interfaces_VoltageOutput v;
            end cellBus_rec;
          public
            cellBus_rec cellBus;
          end nominalCapacity_rec;
        public
          nominalCapacity_rec nominalCapacity;
        protected
          record conditionalLowPassCurrent_rec
            constant Real k = 1.0 "Gain value, active with and without filter";
            constant Modelica_SIunits_Time T = 0.1 "Time Constant";
            constant Modelica.Blocks.Types.Init initType = Modelica.Blocks.Types.Init.InitialOutput "Type of initialization (1: no init, 2: steady state, 3/4: initial output)";
            constant Real y_start = 0.0 "Initial or guess value of output (= state)";
            Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
            Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
          protected
            record firstOrder_rec
              constant Real k(unit = "1") = 1 "Gain";
              constant Modelica_SIunits_Time T = 0.1 "Time Constant";
              constant Modelica.Blocks.Types.Init initType = Modelica.Blocks.Types.Init.InitialOutput "Type of initialization (1: no init, 2: steady state, 3/4: initial output)";
              constant Real y_start = 0.0 "Initial or guess value of output (= state)";
              Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
              Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
              Real _y_der "der(Connector of Real output signal)";
            end firstOrder_rec;
          public
            firstOrder_rec firstOrder;
          protected
            record scaling_rec
              constant Real k(unit = "1") = 1.0 "Gain value multiplied with input signal";
              Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
              Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
            end scaling_rec;
          public
            scaling_rec scaling;
          end conditionalLowPassCurrent_rec;
        public
          conditionalLowPassCurrent_rec conditionalLowPassCurrent;
        end cycleAging_rec;
      public
        cycleAging_rec cycleAging annotation(Dialog);
      protected
        record calendarAging_rec
          constant Real SOH_init = 1.0 "SOH start value";
          constant Real SOHR_init = 1.0 "SOHR start value";
          constant Boolean useLowPass_SOH = false "Use low pass filter, if false the signal is passed through (y=k*u)";
          constant Real k_SOH(unit = "1") = 1 "Gain";
          constant Modelica_SIunits_Time T_SOH = 1 "Time Constant";
          constant Modelica.Blocks.Types.Init initType_SOH = Modelica.Blocks.Types.Init.InitialOutput "Type of initialization (1: no init, 2: steady state, 3/4: initial output)";
          constant Real y_start_SOH = 1.0 "Initial or guess value of output (= state)";
          constant Boolean useLowPass_SOHR = false "Use low pass filter, if false the signal is passed through (y=k*u)";
          constant Real k_SOHR(unit = "1") = 1 "Gain";
          constant Modelica_SIunits_Time T_SOHR = 1 "Time Constant";
          constant Modelica.Blocks.Types.Init initType_SOHR = Modelica.Blocks.Types.Init.InitialOutput "Type of initialization (1: no init, 2: steady state, 3/4: initial output)";
          constant Real y_start_SOHR = 1.0 "Initial or guess value of output (= state)";
          parameter Battery_Common_Types_StateOfHealth _SOH_start = 1.0
          annotation(Dialog(tab = "Initial", group = "Approximate"));
          Battery_Common_Types_StateOfHealth SOH(start = _SOH_start) "State of health calculated in this model and connected to the output SOH";
          Real _SOH_der(unit = "s-1") "der(State of health calculated in this model and connected to the output SOH)";
          parameter Battery_Common_Types_StateOfHealth _SOHR_start = 1.0
          annotation(Dialog(tab = "Initial", group = "Approximate"));
          Battery_Common_Types_StateOfHealth SOHR(start = _SOHR_start) "State of health resistance calculated in this model and connected to the output SOHR";
          Real _SOHR_der(unit = "s-1") "der(State of health resistance calculated in this model and connected to the output SOHR)";
          Battery_Common_Interfaces_StateOfHealthOutput stateOfHealth;
          Battery_Common_Interfaces_StateOfHealthOutput stateOfHealthR;
          constant Modelica_SIunits_Time ageOfCell_init = 0 "Initial age of cell in seconds";
          parameter Modelica_SIunits_Time _ageOfCell_start = 0
          annotation(Dialog(tab = "Initial", group = "Approximate"));
          Modelica_SIunits_Time ageOfCell(start = _ageOfCell_start) "Age of cell in seconds";
          Real _ageOfCell_der(unit = "1") "der(Age of cell in seconds)";
          constant Modelica_SIunits_ElectricCharge C_lossInit = 665.05 "Lost lithium at begin of life";
          constant Modelica_SIunits_MolarEnergy E_aC = 58000 "Activation energy for capacity fade";
          constant Modelica_SIunits_MolarEnergy E_aR = 49800 "Activation energy for resistance increase";
          constant Modelica_SIunits_ElectricCharge C_original = 7740.0 "Original capacity the model is parameterized for";
          Real C_fade "Capacity fade aging factor";
          Real C_fadeArrhenius "Arrhenius factor for capacity fade";
          Real R_increase "Resistance increase aging factor";
          Real R_increaseArrhenius "Arrhenius factor for resistance increase";
          Modelica_SIunits_Temperature T "Cell temperature";
          Real C_loss_rel "Relative capacitiy lost due to aging";
          Modelica_SIunits_ElectricCharge C_loss "Capacitiy lost due to aging";
          constant Modelica_SIunits_ElectricCharge C_nominal = 7740.0 "Nominal capacity";
          Battery_Common_Types_StateOfCharge SOC "State of charge";
        protected
          record cellBus_rec
            Battery_Common_Interfaces_ElectricChargeOutput C_actual;
            constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
            Battery_Common_Interfaces_VoltageInput OCV;
            Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
            Battery_Common_Interfaces_ElectricPowerOutput P_loss;
            Battery_Common_Interfaces_ElectricPowerInput P_terminal;
            Battery_Common_Interfaces_ElectricResistanceInput R_total;
            Battery_Common_Interfaces_StateOfChargeOutput SOC;
            Battery_Common_Interfaces_StateOfHealthOutput SOH;
            Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
            Battery_Common_Interfaces_TemperatureOutput T;
            Battery_Common_Interfaces_ElectricCurrentOutput i;
            Battery_Common_Interfaces_VoltageOutput v;
          end cellBus_rec;
        public
          cellBus_rec cellBus;
        protected
          record conditionalLowPassSOH_rec
            constant Real k = 1.0 "Gain value, active with and without filter";
            constant Modelica_SIunits_Time T = 1.0 "Time Constant";
            constant Modelica.Blocks.Types.Init initType = Modelica.Blocks.Types.Init.InitialOutput "Type of initialization (1: no init, 2: steady state, 3/4: initial output)";
            constant Real y_start = 1.0 "Initial or guess value of output (= state)";
            Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
            Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
          protected
            record noFilter_rec
              Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
              Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
            end noFilter_rec;
          public
            noFilter_rec noFilter;
          protected
            record scaling_rec
              constant Real k(unit = "1") = 1.0 "Gain value multiplied with input signal";
              Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
              Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
            end scaling_rec;
          public
            scaling_rec scaling;
          end conditionalLowPassSOH_rec;
        public
          conditionalLowPassSOH_rec conditionalLowPassSOH;
        protected
          record conditionalLowPassSOHR_rec
            constant Real k = 1.0 "Gain value, active with and without filter";
            constant Modelica_SIunits_Time T = 1.0 "Time Constant";
            constant Modelica.Blocks.Types.Init initType = Modelica.Blocks.Types.Init.InitialOutput "Type of initialization (1: no init, 2: steady state, 3/4: initial output)";
            constant Real y_start = 1.0 "Initial or guess value of output (= state)";
            Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
            Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
          protected
            record noFilter_rec
              Modelica_Blocks_Interfaces_RealInput u "Connector of Real input signal";
              Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
            end noFilter_rec;
          public
            noFilter_rec noFilter;
          protected
            record scaling_rec
              constant Real k(unit = "1") = 1.0 "Gain value multiplied with input signal";
              Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
              Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
            end scaling_rec;
          public
            scaling_rec scaling;
          end conditionalLowPassSOHR_rec;
        public
          conditionalLowPassSOHR_rec conditionalLowPassSOHR;
        protected
          record realExpression_rec
            Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
          end realExpression_rec;
        public
          realExpression_rec realExpression;
        protected
          record realExpression1_rec
            Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
          end realExpression1_rec;
        public
          realExpression1_rec realExpression1;
        protected
          record C_fadeFactorTable_rec
            constant Integer nin = 1 "Number of inputs";
            Modelica_Blocks_Interfaces_RealInput 'u[1]' "Connector of Real input signals";
            Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
            constant Boolean readFromFile = true "Read data from file";
            constant SDF_Types_InterpolationMethod interpMethod = SDF_Types_InterpolationMethod.Akima "Interpolation method";
            constant SDF_Types_ExtrapolationMethod extrapMethod = SDF_Types_ExtrapolationMethod.Linear "Extrapolation method";
            constant Real 'data[1]' = 0 "Table data (as returned by readTableData())";
          protected
            record externalTable_rec
              parameter Integer id(fixed=false);
            end externalTable_rec;
          public
            externalTable_rec externalTable;
          end C_fadeFactorTable_rec;
        public
          C_fadeFactorTable_rec C_fadeFactorTable;
        protected
          record R_increaseFactorTable_rec
            constant Integer nin = 1 "Number of inputs";
            Modelica_Blocks_Interfaces_RealInput 'u[1]' "Connector of Real input signals";
            Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
            constant Boolean readFromFile = true "Read data from file";
            constant SDF_Types_InterpolationMethod interpMethod = SDF_Types_InterpolationMethod.Akima "Interpolation method";
            constant SDF_Types_ExtrapolationMethod extrapMethod = SDF_Types_ExtrapolationMethod.Linear "Extrapolation method";
            constant Real 'data[1]' = 0 "Table data (as returned by readTableData())";
          protected
            record externalTable_rec
              parameter Integer id(fixed=false);
            end externalTable_rec;
          public
            externalTable_rec externalTable;
          end R_increaseFactorTable_rec;
        public
          R_increaseFactorTable_rec R_increaseFactorTable;
        protected
          record temperature_rec
            Battery_Common_Interfaces_TemperatureOutput y;
          protected
            record cellBus_rec
              Battery_Common_Interfaces_TemperatureOutput T;
              Battery_Common_Interfaces_ElectricChargeOutput C_actual;
              constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
              Battery_Common_Interfaces_VoltageInput OCV;
              Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
              Battery_Common_Interfaces_ElectricPowerOutput P_loss;
              Battery_Common_Interfaces_ElectricPowerInput P_terminal;
              Battery_Common_Interfaces_ElectricResistanceInput R_total;
              Battery_Common_Interfaces_StateOfChargeOutput SOC;
              Battery_Common_Interfaces_StateOfHealthOutput SOH;
              Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
              Battery_Common_Interfaces_ElectricCurrentOutput i;
              Battery_Common_Interfaces_VoltageOutput v;
            end cellBus_rec;
          public
            cellBus_rec cellBus;
          end temperature_rec;
        public
          temperature_rec temperature;
        protected
          record nominalCapacity_rec
            constant Battery_Common_Interfaces_ElectricChargeOutput y = 7740.0;
          protected
            record cellBus_rec
              constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
              Battery_Common_Interfaces_ElectricChargeOutput C_actual;
              Battery_Common_Interfaces_VoltageInput OCV;
              Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
              Battery_Common_Interfaces_ElectricPowerOutput P_loss;
              Battery_Common_Interfaces_ElectricPowerInput P_terminal;
              Battery_Common_Interfaces_ElectricResistanceInput R_total;
              Battery_Common_Interfaces_StateOfChargeOutput SOC;
              Battery_Common_Interfaces_StateOfHealthOutput SOH;
              Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
              Battery_Common_Interfaces_TemperatureOutput T;
              Battery_Common_Interfaces_ElectricCurrentOutput i;
              Battery_Common_Interfaces_VoltageOutput v;
            end cellBus_rec;
          public
            cellBus_rec cellBus;
          end nominalCapacity_rec;
        public
          nominalCapacity_rec nominalCapacity;
        protected
          record stateOfCharge_rec
            Battery_Common_Interfaces_StateOfChargeOutput y;
          protected
            record cellBus_rec
              Battery_Common_Interfaces_StateOfChargeOutput SOC;
              Battery_Common_Interfaces_ElectricChargeOutput C_actual;
              constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
              Battery_Common_Interfaces_VoltageInput OCV;
              Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
              Battery_Common_Interfaces_ElectricPowerOutput P_loss;
              Battery_Common_Interfaces_ElectricPowerInput P_terminal;
              Battery_Common_Interfaces_ElectricResistanceInput R_total;
              Battery_Common_Interfaces_StateOfHealthOutput SOH;
              Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
              Battery_Common_Interfaces_TemperatureOutput T;
              Battery_Common_Interfaces_ElectricCurrentOutput i;
              Battery_Common_Interfaces_VoltageOutput v;
            end cellBus_rec;
          public
            cellBus_rec cellBus;
          end stateOfCharge_rec;
        public
          stateOfCharge_rec stateOfCharge;
        end calendarAging_rec;
      public
        calendarAging_rec calendarAging annotation(Dialog);
      protected
        record superposition_rec
          Battery_Common_Interfaces_StateOfHealthInput SOH_cycle;
          Battery_Common_Interfaces_StateOfHealthInput SOH_calendar;
          Battery_Common_Interfaces_StateOfHealthOutput SOH_out;
        protected
          record add_rec
            constant Real k1 = -1 "Gain of input signal 1";
            constant Real k2 = 1 "Gain of input signal 2";
            constant Real k3 = 1 "Gain of input signal 3";
            constant Modelica_Blocks_Interfaces_RealInput u1 = 1 "Connector of Real input signal 1";
            Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
            Modelica_Blocks_Interfaces_RealInput u3 "Connector of Real input signal 3";
            Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
          end add_rec;
        public
          add_rec add;
        protected
          record one_rec
            constant Modelica_Blocks_Interfaces_RealOutput y = 1.0 "Value of Real output";
          end one_rec;
        public
          one_rec one;
        end superposition_rec;
      public
        superposition_rec superposition;
      protected
        record superposition1_rec
          Battery_Common_Interfaces_StateOfHealthInput SOH_cycle;
          Battery_Common_Interfaces_StateOfHealthInput SOH_calendar;
          Battery_Common_Interfaces_StateOfHealthOutput SOH_out;
        protected
          record add_rec
            constant Real k1 = -1 "Gain of input signal 1";
            constant Real k2 = 1 "Gain of input signal 2";
            constant Real k3 = 1 "Gain of input signal 3";
            constant Modelica_Blocks_Interfaces_RealInput u1 = 1 "Connector of Real input signal 1";
            Modelica_Blocks_Interfaces_RealInput u2 "Connector of Real input signal 2";
            Modelica_Blocks_Interfaces_RealInput u3 "Connector of Real input signal 3";
            Modelica_Blocks_Interfaces_RealOutput y "Connector of Real output signal";
          end add_rec;
        public
          add_rec add;
        protected
          record one_rec
            constant Modelica_Blocks_Interfaces_RealOutput y = 1.0 "Value of Real output";
          end one_rec;
        public
          one_rec one;
        end superposition1_rec;
      public
        superposition1_rec superposition1;
      end agingModel_rec;
    public
      agingModel_rec agingModel annotation(Dialog);
    end cell_rec;
  public
    cell_rec cell annotation(Dialog);
  protected
    record housing_rec
      constant Integer N_x(min = 1) = 1 "Number of cells in the x direction (width)";
      constant Integer N_y(min = 1) = 1 "Number of cells in the y direction (depth)";
      constant Integer N_z(min = 1) = 5 "Number of discrete elements of each cell in z direction (height)";
      constant Boolean pinHeatTransfer = false "Use pin heat transfer (only for discretized pack)";
      constant Integer N_cellsWidth(min = 1) = 15 "Number of cells in x-direction";
      constant Integer N_cellsDepth(min = 1) = 5 "Number of cells in y-direction";
      constant Modelica_SIunits_Temperature T_init = 293.15 "Initial temperature of housing";
      constant Modelica_SIunits_Diameter cellDiameter = 0.0181 "Cell diameter";
      constant Modelica_SIunits_Length width = 0.2715 "Width of housing (x-direction)";
      constant Modelica_SIunits_Length depth = 0.09050000000000001 "Depth of housing (y-direction)";
      constant Modelica_SIunits_Length height = 0.0648 "Height of housing (z-direction)";
      constant Modelica_SIunits_Length thickness = 0.005 "Wall thickness of housing";
      constant Modelica_SIunits_ThermalConductance G_leftWall = 259.20648 "Thermal conductance for entire left housing wall";
      constant Modelica_SIunits_ThermalConductance G_rightWall = 259.20648 "Thermal conductance for entire right housing wall";
      constant Modelica_SIunits_ThermalConductance G_frontWall = 777.6194399999999 "Thermal conductance for entire front housing wall";
      constant Modelica_SIunits_ThermalConductance G_backWall = 777.6194399999999 "Thermal conductance for entire back housing wall";
      constant Modelica_SIunits_ThermalConductance G_topWall = 1086.0271500000003 "Thermal conductance for entire top housing wall";
      constant Modelica_SIunits_ThermalConductance G_bottomWall = 1086.0271500000003 "Thermal conductance for entire bottom housing wall";
      constant Modelica_SIunits_ThermalConductance G_embeddingDepth = 899.8024014705741 "Conductance of embedding material for cylindric cells for left and right wall";
      constant Modelica_SIunits_ThermalConductance G_embeddingWidth = 2699.4072044117224 "Conductance of embedding material for cylindric cells for front and back wall";
      constant Modelica_SIunits_Length meanDistance = 0.00113125 "Mean distance between a cylindric cell and the housing wall";
      constant Modelica_SIunits_Area surfaceArea = 0.0009211777978855992 "Surface area of one cell connected to the housing wall";
    protected
      record innerHousingHeatPort_rec
        constant Integer N_x(min = 1) = 1 "Number of cells in the x-direction (width)";
        constant Integer N_y(min = 1) = 1 "Number of cells in the y-direction (depth)";
        constant Integer N_z(min = 1) = 5 "Number of discrete elements of each cell in z-direction (height)";
        constant Boolean pinHeatTransfer = false "Use pin heat transfer (only for discretized pack)";
      protected
        record 'top[1,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'top[1,1]_rec';
      public
        'top[1,1]_rec' 'top[1,1]';
      protected
        record 'bottom[1,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'bottom[1,1]_rec';
      public
        'bottom[1,1]_rec' 'bottom[1,1]';
      protected
        record 'left[1,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'left[1,1]_rec';
      public
        'left[1,1]_rec' 'left[1,1]';
      protected
        record 'left[1,2]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'left[1,2]_rec';
      public
        'left[1,2]_rec' 'left[1,2]';
      protected
        record 'left[1,3]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'left[1,3]_rec';
      public
        'left[1,3]_rec' 'left[1,3]';
      protected
        record 'left[1,4]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'left[1,4]_rec';
      public
        'left[1,4]_rec' 'left[1,4]';
      protected
        record 'left[1,5]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'left[1,5]_rec';
      public
        'left[1,5]_rec' 'left[1,5]';
      protected
        record 'right[1,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'right[1,1]_rec';
      public
        'right[1,1]_rec' 'right[1,1]';
      protected
        record 'right[1,2]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'right[1,2]_rec';
      public
        'right[1,2]_rec' 'right[1,2]';
      protected
        record 'right[1,3]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'right[1,3]_rec';
      public
        'right[1,3]_rec' 'right[1,3]';
      protected
        record 'right[1,4]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'right[1,4]_rec';
      public
        'right[1,4]_rec' 'right[1,4]';
      protected
        record 'right[1,5]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'right[1,5]_rec';
      public
        'right[1,5]_rec' 'right[1,5]';
      protected
        record 'front[1,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'front[1,1]_rec';
      public
        'front[1,1]_rec' 'front[1,1]';
      protected
        record 'front[1,2]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'front[1,2]_rec';
      public
        'front[1,2]_rec' 'front[1,2]';
      protected
        record 'front[1,3]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'front[1,3]_rec';
      public
        'front[1,3]_rec' 'front[1,3]';
      protected
        record 'front[1,4]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'front[1,4]_rec';
      public
        'front[1,4]_rec' 'front[1,4]';
      protected
        record 'front[1,5]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'front[1,5]_rec';
      public
        'front[1,5]_rec' 'front[1,5]';
      protected
        record 'back[1,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'back[1,1]_rec';
      public
        'back[1,1]_rec' 'back[1,1]';
      protected
        record 'back[1,2]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'back[1,2]_rec';
      public
        'back[1,2]_rec' 'back[1,2]';
      protected
        record 'back[1,3]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'back[1,3]_rec';
      public
        'back[1,3]_rec' 'back[1,3]';
      protected
        record 'back[1,4]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'back[1,4]_rec';
      public
        'back[1,4]_rec' 'back[1,4]';
      protected
        record 'back[1,5]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'back[1,5]_rec';
      public
        'back[1,5]_rec' 'back[1,5]';
      end innerHousingHeatPort_rec;
    public
      innerHousingHeatPort_rec innerHousingHeatPort;
    protected
      record outerHousingHeatPort_rec
        constant Integer N_x(min = 1) = 1 "Number of cells in the x-direction (width)";
        constant Integer N_y(min = 1) = 1 "Number of cells in the y-direction (depth)";
        constant Integer N_z(min = 1) = 5 "Number of discrete elements of each cell in z-direction (height)";
        constant Boolean pinHeatTransfer = false "Use pin heat transfer (only for discretized pack)";
      protected
        record 'top[1,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'top[1,1]_rec';
      public
        'top[1,1]_rec' 'top[1,1]';
      protected
        record 'bottom[1,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'bottom[1,1]_rec';
      public
        'bottom[1,1]_rec' 'bottom[1,1]';
      protected
        record 'left[1,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'left[1,1]_rec';
      public
        'left[1,1]_rec' 'left[1,1]';
      protected
        record 'left[1,2]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'left[1,2]_rec';
      public
        'left[1,2]_rec' 'left[1,2]';
      protected
        record 'left[1,3]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'left[1,3]_rec';
      public
        'left[1,3]_rec' 'left[1,3]';
      protected
        record 'left[1,4]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'left[1,4]_rec';
      public
        'left[1,4]_rec' 'left[1,4]';
      protected
        record 'left[1,5]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'left[1,5]_rec';
      public
        'left[1,5]_rec' 'left[1,5]';
      protected
        record 'right[1,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'right[1,1]_rec';
      public
        'right[1,1]_rec' 'right[1,1]';
      protected
        record 'right[1,2]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'right[1,2]_rec';
      public
        'right[1,2]_rec' 'right[1,2]';
      protected
        record 'right[1,3]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'right[1,3]_rec';
      public
        'right[1,3]_rec' 'right[1,3]';
      protected
        record 'right[1,4]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'right[1,4]_rec';
      public
        'right[1,4]_rec' 'right[1,4]';
      protected
        record 'right[1,5]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'right[1,5]_rec';
      public
        'right[1,5]_rec' 'right[1,5]';
      protected
        record 'front[1,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'front[1,1]_rec';
      public
        'front[1,1]_rec' 'front[1,1]';
      protected
        record 'front[1,2]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'front[1,2]_rec';
      public
        'front[1,2]_rec' 'front[1,2]';
      protected
        record 'front[1,3]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'front[1,3]_rec';
      public
        'front[1,3]_rec' 'front[1,3]';
      protected
        record 'front[1,4]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'front[1,4]_rec';
      public
        'front[1,4]_rec' 'front[1,4]';
      protected
        record 'front[1,5]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'front[1,5]_rec';
      public
        'front[1,5]_rec' 'front[1,5]';
      protected
        record 'back[1,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'back[1,1]_rec';
      public
        'back[1,1]_rec' 'back[1,1]';
      protected
        record 'back[1,2]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'back[1,2]_rec';
      public
        'back[1,2]_rec' 'back[1,2]';
      protected
        record 'back[1,3]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'back[1,3]_rec';
      public
        'back[1,3]_rec' 'back[1,3]';
      protected
        record 'back[1,4]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'back[1,4]_rec';
      public
        'back[1,4]_rec' 'back[1,4]';
      protected
        record 'back[1,5]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'back[1,5]_rec';
      public
        'back[1,5]_rec' 'back[1,5]';
      end outerHousingHeatPort_rec;
    public
      outerHousingHeatPort_rec outerHousingHeatPort;
    protected
      record housingMaterial_rec
        constant Modelica_SIunits_Density rho = 2700 "Density";
        constant Modelica_SIunits_ThermalConductivity lambda_x = 221 "Thermal conductivity in x direction";
        constant Modelica_SIunits_ThermalConductivity lambda_y = 221 "Thermal conductivity in y direction";
        constant Modelica_SIunits_ThermalConductivity lambda_z = 221 "Thermal conductivity in z direction";
        constant Modelica_SIunits_SpecificHeatCapacity c = 920 "Specific heat capacity of the material";
        constant Modelica_SIunits_Emissivity epsilon = 0.049 "Thermal emissivity";
      end housingMaterial_rec;
    public
      housingMaterial_rec housingMaterial;
    protected
      record embeddingMaterial_rec
        constant Modelica_SIunits_Density rho = 2700 "Density";
        constant Modelica_SIunits_ThermalConductivity lambda_x = 221 "Thermal conductivity in x direction";
        constant Modelica_SIunits_ThermalConductivity lambda_y = 221 "Thermal conductivity in y direction";
        constant Modelica_SIunits_ThermalConductivity lambda_z = 221 "Thermal conductivity in z direction";
        constant Modelica_SIunits_SpecificHeatCapacity c = 920 "Specific heat capacity of the material";
        constant Modelica_SIunits_Emissivity epsilon = 0.049 "Thermal emissivity";
      end embeddingMaterial_rec;
    public
      embeddingMaterial_rec embeddingMaterial;
    protected
      record bottom_rec
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
        constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
        constant Modelica_SIunits_ThermalConductance G = 1086.0271500000003 "Constant thermal conductance of material";
      protected
        record port_a_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end bottom_rec;
    public
      bottom_rec bottom;
    protected
      record top_rec
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
        constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
        constant Modelica_SIunits_ThermalConductance G = 1086.0271500000003 "Constant thermal conductance of material";
      protected
        record port_a_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end top_rec;
    public
      top_rec top;
    protected
      record 'front[1]_rec'
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
        constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
        constant Modelica_SIunits_ThermalConductance G = 120.74175629342967 "Constant thermal conductance of material";
      protected
        record port_a_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end 'front[1]_rec';
    public
      'front[1]_rec' 'front[1]';
    protected
      record 'front[2]_rec'
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
        constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
        constant Modelica_SIunits_ThermalConductance G = 120.74175629342967 "Constant thermal conductance of material";
      protected
        record port_a_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end 'front[2]_rec';
    public
      'front[2]_rec' 'front[2]';
    protected
      record 'front[3]_rec'
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
        constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
        constant Modelica_SIunits_ThermalConductance G = 120.74175629342967 "Constant thermal conductance of material";
      protected
        record port_a_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end 'front[3]_rec';
    public
      'front[3]_rec' 'front[3]';
    protected
      record 'front[4]_rec'
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
        constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
        constant Modelica_SIunits_ThermalConductance G = 120.74175629342967 "Constant thermal conductance of material";
      protected
        record port_a_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end 'front[4]_rec';
    public
      'front[4]_rec' 'front[4]';
    protected
      record 'front[5]_rec'
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
        constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
        constant Modelica_SIunits_ThermalConductance G = 120.74175629342967 "Constant thermal conductance of material";
      protected
        record port_a_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end 'front[5]_rec';
    public
      'front[5]_rec' 'front[5]';
    protected
      record 'right[1]_rec'
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
        constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
        constant Modelica_SIunits_ThermalConductance G = 40.2472520978099 "Constant thermal conductance of material";
      protected
        record port_a_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end 'right[1]_rec';
    public
      'right[1]_rec' 'right[1]';
    protected
      record 'right[2]_rec'
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
        constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
        constant Modelica_SIunits_ThermalConductance G = 40.2472520978099 "Constant thermal conductance of material";
      protected
        record port_a_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end 'right[2]_rec';
    public
      'right[2]_rec' 'right[2]';
    protected
      record 'right[3]_rec'
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
        constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
        constant Modelica_SIunits_ThermalConductance G = 40.2472520978099 "Constant thermal conductance of material";
      protected
        record port_a_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end 'right[3]_rec';
    public
      'right[3]_rec' 'right[3]';
    protected
      record 'right[4]_rec'
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
        constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
        constant Modelica_SIunits_ThermalConductance G = 40.2472520978099 "Constant thermal conductance of material";
      protected
        record port_a_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end 'right[4]_rec';
    public
      'right[4]_rec' 'right[4]';
    protected
      record 'right[5]_rec'
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
        constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
        constant Modelica_SIunits_ThermalConductance G = 40.2472520978099 "Constant thermal conductance of material";
      protected
        record port_a_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end 'right[5]_rec';
    public
      'right[5]_rec' 'right[5]';
    protected
      record 'left[1]_rec'
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
        constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
        constant Modelica_SIunits_ThermalConductance G = 40.2472520978099 "Constant thermal conductance of material";
      protected
        record port_a_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end 'left[1]_rec';
    public
      'left[1]_rec' 'left[1]';
    protected
      record 'left[2]_rec'
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
        constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
        constant Modelica_SIunits_ThermalConductance G = 40.2472520978099 "Constant thermal conductance of material";
      protected
        record port_a_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end 'left[2]_rec';
    public
      'left[2]_rec' 'left[2]';
    protected
      record 'left[3]_rec'
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
        constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
        constant Modelica_SIunits_ThermalConductance G = 40.2472520978099 "Constant thermal conductance of material";
      protected
        record port_a_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end 'left[3]_rec';
    public
      'left[3]_rec' 'left[3]';
    protected
      record 'left[4]_rec'
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
        constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
        constant Modelica_SIunits_ThermalConductance G = 40.2472520978099 "Constant thermal conductance of material";
      protected
        record port_a_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end 'left[4]_rec';
    public
      'left[4]_rec' 'left[4]';
    protected
      record 'left[5]_rec'
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
        constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
        constant Modelica_SIunits_ThermalConductance G = 40.2472520978099 "Constant thermal conductance of material";
      protected
        record port_a_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end 'left[5]_rec';
    public
      'left[5]_rec' 'left[5]';
    protected
      record 'back[1]_rec'
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
        constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
        constant Modelica_SIunits_ThermalConductance G = 120.74175629342967 "Constant thermal conductance of material";
      protected
        record port_a_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end 'back[1]_rec';
    public
      'back[1]_rec' 'back[1]';
    protected
      record 'back[2]_rec'
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
        constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
        constant Modelica_SIunits_ThermalConductance G = 120.74175629342967 "Constant thermal conductance of material";
      protected
        record port_a_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end 'back[2]_rec';
    public
      'back[2]_rec' 'back[2]';
    protected
      record 'back[3]_rec'
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
        constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
        constant Modelica_SIunits_ThermalConductance G = 120.74175629342967 "Constant thermal conductance of material";
      protected
        record port_a_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end 'back[3]_rec';
    public
      'back[3]_rec' 'back[3]';
    protected
      record 'back[4]_rec'
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
        constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
        constant Modelica_SIunits_ThermalConductance G = 120.74175629342967 "Constant thermal conductance of material";
      protected
        record port_a_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end 'back[4]_rec';
    public
      'back[4]_rec' 'back[4]';
    protected
      record 'back[5]_rec'
        constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate from port_a -> port_b";
        constant Modelica_SIunits_TemperatureDifference dT = 0.0 "port_a.T - port_b.T";
        constant Modelica_SIunits_ThermalConductance G = 120.74175629342967 "Constant thermal conductance of material";
      protected
        record port_a_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_a_rec;
      public
        port_a_rec port_a;
      protected
        record port_b_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end port_b_rec;
      public
        port_b_rec port_b;
      end 'back[5]_rec';
    public
      'back[5]_rec' 'back[5]';
    end housing_rec;
  public
    housing_rec housing;
  protected
    record electricScalingPos_rec
      constant Integer N_serialCells(min = 1) = 15 "Number of serial cells";
      constant Integer N_parallelCells(min = 1) = 5 "Number of parallel cells";
    protected
      record p_rec
        Modelica_SIunits_ElectricPotential v "Potential at the pin";
        Modelica_SIunits_Current i "Current flowing into the pin";
      end p_rec;
    public
      p_rec p;
    protected
      record n_rec
        Modelica_SIunits_ElectricPotential v "Potential at the pin";
        Modelica_SIunits_Current i "Current flowing into the pin";
      end n_rec;
    public
      n_rec n;
    end electricScalingPos_rec;
  public
    electricScalingPos_rec electricScalingPos;
  protected
    record electricScalingNeg_rec
      constant Integer N_serialCells(min = 1) = 15 "Number of serial cells";
      constant Integer N_parallelCells(min = 1) = 5 "Number of parallel cells";
    protected
      record p_rec
        constant Modelica_SIunits_ElectricPotential v = 0.0 "Potential at the pin";
        Modelica_SIunits_Current i "Current flowing into the pin";
      end p_rec;
    public
      p_rec p;
    protected
      record n_rec
        constant Modelica_SIunits_ElectricPotential v = 0.0 "Potential at the pin";
        Modelica_SIunits_Current i "Current flowing into the pin";
      end n_rec;
    public
      n_rec n;
    end electricScalingNeg_rec;
  public
    electricScalingNeg_rec electricScalingNeg;
  protected
    record thermalScaling_rec
      constant Integer N_cells(min = 1) = 75 "Number of cells";
      constant Integer N_surface(min = 1) = 4 "Number of surface heat ports of each cell";
      constant Integer N_verticalElements(min = 1) = 5 "Number of vertical Elements in each cell";
      constant Boolean pinHeatTransfer = false "Use pin heat transfer";
    protected
      record positivePin_rec
        constant Integer N_cells(min = 1) = 75 "Number of cells";
      protected
        record battery_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end battery_rec;
      public
        battery_rec battery;
      protected
        record batteryPack_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end batteryPack_rec;
      public
        batteryPack_rec batteryPack;
      end positivePin_rec;
    public
      positivePin_rec positivePin;
    protected
      record negativePin_rec
        constant Integer N_cells(min = 1) = 75 "Number of cells";
      protected
        record battery_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end battery_rec;
      public
        battery_rec battery;
      protected
        record batteryPack_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end batteryPack_rec;
      public
        batteryPack_rec batteryPack;
      end negativePin_rec;
    public
      negativePin_rec negativePin;
    protected
      record 'surface[1,1]_rec'
        constant Integer N_cells(min = 1) = 75 "Number of cells";
      protected
        record battery_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end battery_rec;
      public
        battery_rec battery;
      protected
        record batteryPack_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end batteryPack_rec;
      public
        batteryPack_rec batteryPack;
      end 'surface[1,1]_rec';
    public
      'surface[1,1]_rec' 'surface[1,1]';
    protected
      record 'surface[1,2]_rec'
        constant Integer N_cells(min = 1) = 75 "Number of cells";
      protected
        record battery_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end battery_rec;
      public
        battery_rec battery;
      protected
        record batteryPack_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end batteryPack_rec;
      public
        batteryPack_rec batteryPack;
      end 'surface[1,2]_rec';
    public
      'surface[1,2]_rec' 'surface[1,2]';
    protected
      record 'surface[1,3]_rec'
        constant Integer N_cells(min = 1) = 75 "Number of cells";
      protected
        record battery_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end battery_rec;
      public
        battery_rec battery;
      protected
        record batteryPack_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end batteryPack_rec;
      public
        batteryPack_rec batteryPack;
      end 'surface[1,3]_rec';
    public
      'surface[1,3]_rec' 'surface[1,3]';
    protected
      record 'surface[1,4]_rec'
        constant Integer N_cells(min = 1) = 75 "Number of cells";
      protected
        record battery_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end battery_rec;
      public
        battery_rec battery;
      protected
        record batteryPack_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end batteryPack_rec;
      public
        batteryPack_rec batteryPack;
      end 'surface[1,4]_rec';
    public
      'surface[1,4]_rec' 'surface[1,4]';
    protected
      record 'surface[1,5]_rec'
        constant Integer N_cells(min = 1) = 75 "Number of cells";
      protected
        record battery_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end battery_rec;
      public
        battery_rec battery;
      protected
        record batteryPack_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end batteryPack_rec;
      public
        batteryPack_rec batteryPack;
      end 'surface[1,5]_rec';
    public
      'surface[1,5]_rec' 'surface[1,5]';
    protected
      record 'surface[2,1]_rec'
        constant Integer N_cells(min = 1) = 75 "Number of cells";
      protected
        record battery_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end battery_rec;
      public
        battery_rec battery;
      protected
        record batteryPack_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end batteryPack_rec;
      public
        batteryPack_rec batteryPack;
      end 'surface[2,1]_rec';
    public
      'surface[2,1]_rec' 'surface[2,1]';
    protected
      record 'surface[2,2]_rec'
        constant Integer N_cells(min = 1) = 75 "Number of cells";
      protected
        record battery_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end battery_rec;
      public
        battery_rec battery;
      protected
        record batteryPack_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end batteryPack_rec;
      public
        batteryPack_rec batteryPack;
      end 'surface[2,2]_rec';
    public
      'surface[2,2]_rec' 'surface[2,2]';
    protected
      record 'surface[2,3]_rec'
        constant Integer N_cells(min = 1) = 75 "Number of cells";
      protected
        record battery_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end battery_rec;
      public
        battery_rec battery;
      protected
        record batteryPack_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end batteryPack_rec;
      public
        batteryPack_rec batteryPack;
      end 'surface[2,3]_rec';
    public
      'surface[2,3]_rec' 'surface[2,3]';
    protected
      record 'surface[2,4]_rec'
        constant Integer N_cells(min = 1) = 75 "Number of cells";
      protected
        record battery_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end battery_rec;
      public
        battery_rec battery;
      protected
        record batteryPack_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end batteryPack_rec;
      public
        batteryPack_rec batteryPack;
      end 'surface[2,4]_rec';
    public
      'surface[2,4]_rec' 'surface[2,4]';
    protected
      record 'surface[2,5]_rec'
        constant Integer N_cells(min = 1) = 75 "Number of cells";
      protected
        record battery_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end battery_rec;
      public
        battery_rec battery;
      protected
        record batteryPack_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end batteryPack_rec;
      public
        batteryPack_rec batteryPack;
      end 'surface[2,5]_rec';
    public
      'surface[2,5]_rec' 'surface[2,5]';
    protected
      record 'surface[3,1]_rec'
        constant Integer N_cells(min = 1) = 75 "Number of cells";
      protected
        record battery_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end battery_rec;
      public
        battery_rec battery;
      protected
        record batteryPack_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end batteryPack_rec;
      public
        batteryPack_rec batteryPack;
      end 'surface[3,1]_rec';
    public
      'surface[3,1]_rec' 'surface[3,1]';
    protected
      record 'surface[3,2]_rec'
        constant Integer N_cells(min = 1) = 75 "Number of cells";
      protected
        record battery_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end battery_rec;
      public
        battery_rec battery;
      protected
        record batteryPack_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end batteryPack_rec;
      public
        batteryPack_rec batteryPack;
      end 'surface[3,2]_rec';
    public
      'surface[3,2]_rec' 'surface[3,2]';
    protected
      record 'surface[3,3]_rec'
        constant Integer N_cells(min = 1) = 75 "Number of cells";
      protected
        record battery_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end battery_rec;
      public
        battery_rec battery;
      protected
        record batteryPack_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end batteryPack_rec;
      public
        batteryPack_rec batteryPack;
      end 'surface[3,3]_rec';
    public
      'surface[3,3]_rec' 'surface[3,3]';
    protected
      record 'surface[3,4]_rec'
        constant Integer N_cells(min = 1) = 75 "Number of cells";
      protected
        record battery_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end battery_rec;
      public
        battery_rec battery;
      protected
        record batteryPack_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end batteryPack_rec;
      public
        batteryPack_rec batteryPack;
      end 'surface[3,4]_rec';
    public
      'surface[3,4]_rec' 'surface[3,4]';
    protected
      record 'surface[3,5]_rec'
        constant Integer N_cells(min = 1) = 75 "Number of cells";
      protected
        record battery_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end battery_rec;
      public
        battery_rec battery;
      protected
        record batteryPack_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end batteryPack_rec;
      public
        batteryPack_rec batteryPack;
      end 'surface[3,5]_rec';
    public
      'surface[3,5]_rec' 'surface[3,5]';
    protected
      record 'surface[4,1]_rec'
        constant Integer N_cells(min = 1) = 75 "Number of cells";
      protected
        record battery_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end battery_rec;
      public
        battery_rec battery;
      protected
        record batteryPack_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end batteryPack_rec;
      public
        batteryPack_rec batteryPack;
      end 'surface[4,1]_rec';
    public
      'surface[4,1]_rec' 'surface[4,1]';
    protected
      record 'surface[4,2]_rec'
        constant Integer N_cells(min = 1) = 75 "Number of cells";
      protected
        record battery_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end battery_rec;
      public
        battery_rec battery;
      protected
        record batteryPack_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end batteryPack_rec;
      public
        batteryPack_rec batteryPack;
      end 'surface[4,2]_rec';
    public
      'surface[4,2]_rec' 'surface[4,2]';
    protected
      record 'surface[4,3]_rec'
        constant Integer N_cells(min = 1) = 75 "Number of cells";
      protected
        record battery_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end battery_rec;
      public
        battery_rec battery;
      protected
        record batteryPack_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end batteryPack_rec;
      public
        batteryPack_rec batteryPack;
      end 'surface[4,3]_rec';
    public
      'surface[4,3]_rec' 'surface[4,3]';
    protected
      record 'surface[4,4]_rec'
        constant Integer N_cells(min = 1) = 75 "Number of cells";
      protected
        record battery_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end battery_rec;
      public
        battery_rec battery;
      protected
        record batteryPack_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end batteryPack_rec;
      public
        batteryPack_rec batteryPack;
      end 'surface[4,4]_rec';
    public
      'surface[4,4]_rec' 'surface[4,4]';
    protected
      record 'surface[4,5]_rec'
        constant Integer N_cells(min = 1) = 75 "Number of cells";
      protected
        record battery_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end battery_rec;
      public
        battery_rec battery;
      protected
        record batteryPack_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end batteryPack_rec;
      public
        batteryPack_rec batteryPack;
      end 'surface[4,5]_rec';
    public
      'surface[4,5]_rec' 'surface[4,5]';
    protected
      record cylindricHeatPortCell_rec
        constant Integer N_surface = 4 "Number of surface heat ports";
        constant Integer N_verticalElements = 5 "The cell can be calculated with several vertical elements";
      protected
        record 'surface[1,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[1,1]_rec';
      public
        'surface[1,1]_rec' 'surface[1,1]';
      protected
        record 'surface[1,2]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[1,2]_rec';
      public
        'surface[1,2]_rec' 'surface[1,2]';
      protected
        record 'surface[1,3]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[1,3]_rec';
      public
        'surface[1,3]_rec' 'surface[1,3]';
      protected
        record 'surface[1,4]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[1,4]_rec';
      public
        'surface[1,4]_rec' 'surface[1,4]';
      protected
        record 'surface[1,5]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[1,5]_rec';
      public
        'surface[1,5]_rec' 'surface[1,5]';
      protected
        record 'surface[2,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[2,1]_rec';
      public
        'surface[2,1]_rec' 'surface[2,1]';
      protected
        record 'surface[2,2]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[2,2]_rec';
      public
        'surface[2,2]_rec' 'surface[2,2]';
      protected
        record 'surface[2,3]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[2,3]_rec';
      public
        'surface[2,3]_rec' 'surface[2,3]';
      protected
        record 'surface[2,4]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[2,4]_rec';
      public
        'surface[2,4]_rec' 'surface[2,4]';
      protected
        record 'surface[2,5]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[2,5]_rec';
      public
        'surface[2,5]_rec' 'surface[2,5]';
      protected
        record 'surface[3,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[3,1]_rec';
      public
        'surface[3,1]_rec' 'surface[3,1]';
      protected
        record 'surface[3,2]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[3,2]_rec';
      public
        'surface[3,2]_rec' 'surface[3,2]';
      protected
        record 'surface[3,3]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[3,3]_rec';
      public
        'surface[3,3]_rec' 'surface[3,3]';
      protected
        record 'surface[3,4]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[3,4]_rec';
      public
        'surface[3,4]_rec' 'surface[3,4]';
      protected
        record 'surface[3,5]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[3,5]_rec';
      public
        'surface[3,5]_rec' 'surface[3,5]';
      protected
        record 'surface[4,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[4,1]_rec';
      public
        'surface[4,1]_rec' 'surface[4,1]';
      protected
        record 'surface[4,2]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[4,2]_rec';
      public
        'surface[4,2]_rec' 'surface[4,2]';
      protected
        record 'surface[4,3]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[4,3]_rec';
      public
        'surface[4,3]_rec' 'surface[4,3]';
      protected
        record 'surface[4,4]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[4,4]_rec';
      public
        'surface[4,4]_rec' 'surface[4,4]';
      protected
        record 'surface[4,5]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'surface[4,5]_rec';
      public
        'surface[4,5]_rec' 'surface[4,5]';
      protected
        record positivePin_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end positivePin_rec;
      public
        positivePin_rec positivePin;
      protected
        record negativePin_rec
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end negativePin_rec;
      public
        negativePin_rec negativePin;
      end cylindricHeatPortCell_rec;
    public
      cylindricHeatPortCell_rec cylindricHeatPortCell;
    protected
      record InnerHousingHeatPort_rec
        constant Integer N_x(min = 1) = 1 "Number of cells in the x-direction (width)";
        constant Integer N_y(min = 1) = 1 "Number of cells in the y-direction (depth)";
        constant Integer N_z(min = 1) = 5 "Number of discrete elements of each cell in z-direction (height)";
        constant Boolean pinHeatTransfer = false "Use pin heat transfer (only for discretized pack)";
      protected
        record 'top[1,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'top[1,1]_rec';
      public
        'top[1,1]_rec' 'top[1,1]';
      protected
        record 'bottom[1,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'bottom[1,1]_rec';
      public
        'bottom[1,1]_rec' 'bottom[1,1]';
      protected
        record 'left[1,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'left[1,1]_rec';
      public
        'left[1,1]_rec' 'left[1,1]';
      protected
        record 'left[1,2]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'left[1,2]_rec';
      public
        'left[1,2]_rec' 'left[1,2]';
      protected
        record 'left[1,3]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'left[1,3]_rec';
      public
        'left[1,3]_rec' 'left[1,3]';
      protected
        record 'left[1,4]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'left[1,4]_rec';
      public
        'left[1,4]_rec' 'left[1,4]';
      protected
        record 'left[1,5]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'left[1,5]_rec';
      public
        'left[1,5]_rec' 'left[1,5]';
      protected
        record 'right[1,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'right[1,1]_rec';
      public
        'right[1,1]_rec' 'right[1,1]';
      protected
        record 'right[1,2]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'right[1,2]_rec';
      public
        'right[1,2]_rec' 'right[1,2]';
      protected
        record 'right[1,3]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'right[1,3]_rec';
      public
        'right[1,3]_rec' 'right[1,3]';
      protected
        record 'right[1,4]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'right[1,4]_rec';
      public
        'right[1,4]_rec' 'right[1,4]';
      protected
        record 'right[1,5]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'right[1,5]_rec';
      public
        'right[1,5]_rec' 'right[1,5]';
      protected
        record 'front[1,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'front[1,1]_rec';
      public
        'front[1,1]_rec' 'front[1,1]';
      protected
        record 'front[1,2]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'front[1,2]_rec';
      public
        'front[1,2]_rec' 'front[1,2]';
      protected
        record 'front[1,3]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'front[1,3]_rec';
      public
        'front[1,3]_rec' 'front[1,3]';
      protected
        record 'front[1,4]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'front[1,4]_rec';
      public
        'front[1,4]_rec' 'front[1,4]';
      protected
        record 'front[1,5]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'front[1,5]_rec';
      public
        'front[1,5]_rec' 'front[1,5]';
      protected
        record 'back[1,1]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'back[1,1]_rec';
      public
        'back[1,1]_rec' 'back[1,1]';
      protected
        record 'back[1,2]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'back[1,2]_rec';
      public
        'back[1,2]_rec' 'back[1,2]';
      protected
        record 'back[1,3]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'back[1,3]_rec';
      public
        'back[1,3]_rec' 'back[1,3]';
      protected
        record 'back[1,4]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'back[1,4]_rec';
      public
        'back[1,4]_rec' 'back[1,4]';
      protected
        record 'back[1,5]_rec'
          Modelica_SIunits_Temperature T "Port temperature";
          constant Modelica_SIunits_HeatFlowRate Q_flow = 0.0 "Heat flow rate (positive if flowing from outside into the component)";
        end 'back[1,5]_rec';
      public
        'back[1,5]_rec' 'back[1,5]';
      end InnerHousingHeatPort_rec;
    public
      InnerHousingHeatPort_rec InnerHousingHeatPort;
    end thermalScaling_rec;
  public
    thermalScaling_rec thermalScaling;
  protected
    record idealPowerCell_rec
      Battery_Common_Interfaces_ElectricPowerOutput y;
    protected
      record cellBus_rec
        Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
        Battery_Common_Interfaces_ElectricChargeOutput C_actual;
        constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
        Battery_Common_Interfaces_VoltageInput OCV;
        Battery_Common_Interfaces_ElectricPowerOutput P_loss;
        Battery_Common_Interfaces_ElectricPowerInput P_terminal;
        Battery_Common_Interfaces_ElectricResistanceInput R_total;
        Battery_Common_Interfaces_StateOfChargeOutput SOC;
        Battery_Common_Interfaces_StateOfHealthOutput SOH;
        Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
        Battery_Common_Interfaces_TemperatureOutput T;
        Battery_Common_Interfaces_ElectricCurrentOutput i;
        Battery_Common_Interfaces_VoltageOutput v;
      end cellBus_rec;
    public
      cellBus_rec cellBus;
    end idealPowerCell_rec;
  public
    idealPowerCell_rec idealPowerCell;
  protected
    record fromCellToPack_rec
      constant Integer n_x(min = 1) = 1 "Number of cells in x-direction";
      constant Integer n_y(min = 1) = 1 "Number of cells in y-direction";
      constant Integer n_p(min = 1) = 5 "Number of cells in parallel";
      constant Integer n(min = 1) = 1 "Nuber of cells in pack";
    protected
      record packBus_rec
        Battery_Common_Interfaces_ElectricChargeInput C_actual;
        constant Battery_Common_Interfaces_ElectricChargeInput C_nominal = 38700.0;
        Battery_Common_Interfaces_ElectricCurrentInput I_max;
        Battery_Common_Interfaces_ElectricCurrentInput I_min;
        Battery_Common_Interfaces_ElectricCurrentInput I_pack;
        Battery_Common_Interfaces_ElectricPowerInput P_ideal;
        Battery_Common_Interfaces_ElectricPowerInput P_loss;
        Battery_Common_Interfaces_ElectricPowerInput P_terminal;
        Battery_Common_Interfaces_StateOfChargeInput SOC_max;
        Battery_Common_Interfaces_StateOfChargeInput SOC_mean;
        Battery_Common_Interfaces_StateOfChargeInput SOC_min;
        Battery_Common_Interfaces_StateOfHealthInput SOH_max;
        Battery_Common_Interfaces_StateOfHealthInput SOH_mean;
        Battery_Common_Interfaces_StateOfHealthInput SOH_min;
        Battery_Common_Interfaces_TemperatureInput T_max;
        Battery_Common_Interfaces_TemperatureInput T_mean;
        Battery_Common_Interfaces_TemperatureInput T_min;
        Battery_Common_Interfaces_VoltageInput V_max;
        Battery_Common_Interfaces_VoltageInput V_min;
        Battery_Common_Interfaces_VoltageInput V_pack;
      end packBus_rec;
    public
      packBus_rec packBus;
    protected
      record 'cellBus[1,1]_rec'
        Battery_Common_Interfaces_ElectricChargeOutput C_actual;
        constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
        Battery_Common_Interfaces_VoltageInput OCV;
        Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
        Battery_Common_Interfaces_ElectricPowerOutput P_loss;
        Battery_Common_Interfaces_ElectricPowerInput P_terminal;
        Battery_Common_Interfaces_ElectricResistanceInput R_total;
        Battery_Common_Interfaces_StateOfChargeOutput SOC;
        Battery_Common_Interfaces_StateOfHealthOutput SOH;
        Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
        Battery_Common_Interfaces_TemperatureOutput T;
        Battery_Common_Interfaces_ElectricCurrentOutput i;
        Battery_Common_Interfaces_VoltageOutput v;
      end 'cellBus[1,1]_rec';
    public
      'cellBus[1,1]_rec' 'cellBus[1,1]';
    protected
      record 'stateOfCharge[1,1]_rec'
        Battery_Common_Interfaces_StateOfChargeOutput y;
      protected
        record cellBus_rec
          Battery_Common_Interfaces_StateOfChargeOutput SOC;
          Battery_Common_Interfaces_ElectricChargeOutput C_actual;
          constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
          Battery_Common_Interfaces_VoltageInput OCV;
          Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
          Battery_Common_Interfaces_ElectricPowerOutput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_ElectricResistanceInput R_total;
          Battery_Common_Interfaces_StateOfHealthOutput SOH;
          Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
          Battery_Common_Interfaces_TemperatureOutput T;
          Battery_Common_Interfaces_ElectricCurrentOutput i;
          Battery_Common_Interfaces_VoltageOutput v;
        end cellBus_rec;
      public
        cellBus_rec cellBus;
      end 'stateOfCharge[1,1]_rec';
    public
      'stateOfCharge[1,1]_rec' 'stateOfCharge[1,1]';
    protected
      record 'temperature[1,1]_rec'
        Battery_Common_Interfaces_TemperatureOutput y;
      protected
        record cellBus_rec
          Battery_Common_Interfaces_TemperatureOutput T;
          Battery_Common_Interfaces_ElectricChargeOutput C_actual;
          constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
          Battery_Common_Interfaces_VoltageInput OCV;
          Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
          Battery_Common_Interfaces_ElectricPowerOutput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_ElectricResistanceInput R_total;
          Battery_Common_Interfaces_StateOfChargeOutput SOC;
          Battery_Common_Interfaces_StateOfHealthOutput SOH;
          Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
          Battery_Common_Interfaces_ElectricCurrentOutput i;
          Battery_Common_Interfaces_VoltageOutput v;
        end cellBus_rec;
      public
        cellBus_rec cellBus;
      end 'temperature[1,1]_rec';
    public
      'temperature[1,1]_rec' 'temperature[1,1]';
    protected
      record 'cellVoltage[1,1]_rec'
        Battery_Common_Interfaces_VoltageOutput y;
      protected
        record cellBus_rec
          Battery_Common_Interfaces_VoltageOutput v;
          Battery_Common_Interfaces_ElectricChargeOutput C_actual;
          constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
          Battery_Common_Interfaces_VoltageInput OCV;
          Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
          Battery_Common_Interfaces_ElectricPowerOutput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_ElectricResistanceInput R_total;
          Battery_Common_Interfaces_StateOfChargeOutput SOC;
          Battery_Common_Interfaces_StateOfHealthOutput SOH;
          Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
          Battery_Common_Interfaces_TemperatureOutput T;
          Battery_Common_Interfaces_ElectricCurrentOutput i;
        end cellBus_rec;
      public
        cellBus_rec cellBus;
      end 'cellVoltage[1,1]_rec';
    public
      'cellVoltage[1,1]_rec' 'cellVoltage[1,1]';
    protected
      record 'cellCurrent[1,1]_rec'
        Battery_Common_Interfaces_ElectricCurrentOutput y;
      protected
        record cellBus_rec
          Battery_Common_Interfaces_ElectricCurrentOutput i;
          Battery_Common_Interfaces_ElectricChargeOutput C_actual;
          constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
          Battery_Common_Interfaces_VoltageInput OCV;
          Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
          Battery_Common_Interfaces_ElectricPowerOutput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_ElectricResistanceInput R_total;
          Battery_Common_Interfaces_StateOfChargeOutput SOC;
          Battery_Common_Interfaces_StateOfHealthOutput SOH;
          Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
          Battery_Common_Interfaces_TemperatureOutput T;
          Battery_Common_Interfaces_VoltageOutput v;
        end cellBus_rec;
      public
        cellBus_rec cellBus;
      end 'cellCurrent[1,1]_rec';
    public
      'cellCurrent[1,1]_rec' 'cellCurrent[1,1]';
    protected
      record minVoltage_rec
        Battery_Common_Interfaces_VoltageInput u;
      protected
        record packBus_rec
          Battery_Common_Interfaces_VoltageInput V_min;
          Battery_Common_Interfaces_ElectricChargeInput C_actual;
          constant Battery_Common_Interfaces_ElectricChargeInput C_nominal = 38700.0;
          Battery_Common_Interfaces_ElectricCurrentInput I_max;
          Battery_Common_Interfaces_ElectricCurrentInput I_min;
          Battery_Common_Interfaces_ElectricCurrentInput I_pack;
          Battery_Common_Interfaces_ElectricPowerInput P_ideal;
          Battery_Common_Interfaces_ElectricPowerInput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_StateOfChargeInput SOC_max;
          Battery_Common_Interfaces_StateOfChargeInput SOC_mean;
          Battery_Common_Interfaces_StateOfChargeInput SOC_min;
          Battery_Common_Interfaces_StateOfHealthInput SOH_max;
          Battery_Common_Interfaces_StateOfHealthInput SOH_mean;
          Battery_Common_Interfaces_StateOfHealthInput SOH_min;
          Battery_Common_Interfaces_TemperatureInput T_max;
          Battery_Common_Interfaces_TemperatureInput T_mean;
          Battery_Common_Interfaces_TemperatureInput T_min;
          Battery_Common_Interfaces_VoltageInput V_max;
          Battery_Common_Interfaces_VoltageInput V_pack;
        end packBus_rec;
      public
        packBus_rec packBus;
      end minVoltage_rec;
    public
      minVoltage_rec minVoltage;
    protected
      record maxVoltage_rec
        Battery_Common_Interfaces_VoltageInput u;
      protected
        record packBus_rec
          Battery_Common_Interfaces_VoltageInput V_max;
          Battery_Common_Interfaces_ElectricChargeInput C_actual;
          constant Battery_Common_Interfaces_ElectricChargeInput C_nominal = 38700.0;
          Battery_Common_Interfaces_ElectricCurrentInput I_max;
          Battery_Common_Interfaces_ElectricCurrentInput I_min;
          Battery_Common_Interfaces_ElectricCurrentInput I_pack;
          Battery_Common_Interfaces_ElectricPowerInput P_ideal;
          Battery_Common_Interfaces_ElectricPowerInput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_StateOfChargeInput SOC_max;
          Battery_Common_Interfaces_StateOfChargeInput SOC_mean;
          Battery_Common_Interfaces_StateOfChargeInput SOC_min;
          Battery_Common_Interfaces_StateOfHealthInput SOH_max;
          Battery_Common_Interfaces_StateOfHealthInput SOH_mean;
          Battery_Common_Interfaces_StateOfHealthInput SOH_min;
          Battery_Common_Interfaces_TemperatureInput T_max;
          Battery_Common_Interfaces_TemperatureInput T_mean;
          Battery_Common_Interfaces_TemperatureInput T_min;
          Battery_Common_Interfaces_VoltageInput V_min;
          Battery_Common_Interfaces_VoltageInput V_pack;
        end packBus_rec;
      public
        packBus_rec packBus;
      end maxVoltage_rec;
    public
      maxVoltage_rec maxVoltage;
    protected
      record minCurrent_rec
        Battery_Common_Interfaces_ElectricCurrentInput u;
      protected
        record packBus_rec
          Battery_Common_Interfaces_ElectricCurrentInput I_min;
          Battery_Common_Interfaces_ElectricChargeInput C_actual;
          constant Battery_Common_Interfaces_ElectricChargeInput C_nominal = 38700.0;
          Battery_Common_Interfaces_ElectricCurrentInput I_max;
          Battery_Common_Interfaces_ElectricCurrentInput I_pack;
          Battery_Common_Interfaces_ElectricPowerInput P_ideal;
          Battery_Common_Interfaces_ElectricPowerInput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_StateOfChargeInput SOC_max;
          Battery_Common_Interfaces_StateOfChargeInput SOC_mean;
          Battery_Common_Interfaces_StateOfChargeInput SOC_min;
          Battery_Common_Interfaces_StateOfHealthInput SOH_max;
          Battery_Common_Interfaces_StateOfHealthInput SOH_mean;
          Battery_Common_Interfaces_StateOfHealthInput SOH_min;
          Battery_Common_Interfaces_TemperatureInput T_max;
          Battery_Common_Interfaces_TemperatureInput T_mean;
          Battery_Common_Interfaces_TemperatureInput T_min;
          Battery_Common_Interfaces_VoltageInput V_max;
          Battery_Common_Interfaces_VoltageInput V_min;
          Battery_Common_Interfaces_VoltageInput V_pack;
        end packBus_rec;
      public
        packBus_rec packBus;
      end minCurrent_rec;
    public
      minCurrent_rec minCurrent;
    protected
      record maxCurrent_rec
        Battery_Common_Interfaces_ElectricCurrentInput u;
      protected
        record packBus_rec
          Battery_Common_Interfaces_ElectricCurrentInput I_max;
          Battery_Common_Interfaces_ElectricChargeInput C_actual;
          constant Battery_Common_Interfaces_ElectricChargeInput C_nominal = 38700.0;
          Battery_Common_Interfaces_ElectricCurrentInput I_min;
          Battery_Common_Interfaces_ElectricCurrentInput I_pack;
          Battery_Common_Interfaces_ElectricPowerInput P_ideal;
          Battery_Common_Interfaces_ElectricPowerInput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_StateOfChargeInput SOC_max;
          Battery_Common_Interfaces_StateOfChargeInput SOC_mean;
          Battery_Common_Interfaces_StateOfChargeInput SOC_min;
          Battery_Common_Interfaces_StateOfHealthInput SOH_max;
          Battery_Common_Interfaces_StateOfHealthInput SOH_mean;
          Battery_Common_Interfaces_StateOfHealthInput SOH_min;
          Battery_Common_Interfaces_TemperatureInput T_max;
          Battery_Common_Interfaces_TemperatureInput T_mean;
          Battery_Common_Interfaces_TemperatureInput T_min;
          Battery_Common_Interfaces_VoltageInput V_max;
          Battery_Common_Interfaces_VoltageInput V_min;
          Battery_Common_Interfaces_VoltageInput V_pack;
        end packBus_rec;
      public
        packBus_rec packBus;
      end maxCurrent_rec;
    public
      maxCurrent_rec maxCurrent;
    protected
      record meanSOC_rec
        Battery_Common_Interfaces_StateOfChargeInput u;
      protected
        record packBus_rec
          Battery_Common_Interfaces_StateOfChargeInput SOC_mean;
          Battery_Common_Interfaces_ElectricChargeInput C_actual;
          constant Battery_Common_Interfaces_ElectricChargeInput C_nominal = 38700.0;
          Battery_Common_Interfaces_ElectricCurrentInput I_max;
          Battery_Common_Interfaces_ElectricCurrentInput I_min;
          Battery_Common_Interfaces_ElectricCurrentInput I_pack;
          Battery_Common_Interfaces_ElectricPowerInput P_ideal;
          Battery_Common_Interfaces_ElectricPowerInput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_StateOfChargeInput SOC_max;
          Battery_Common_Interfaces_StateOfChargeInput SOC_min;
          Battery_Common_Interfaces_StateOfHealthInput SOH_max;
          Battery_Common_Interfaces_StateOfHealthInput SOH_mean;
          Battery_Common_Interfaces_StateOfHealthInput SOH_min;
          Battery_Common_Interfaces_TemperatureInput T_max;
          Battery_Common_Interfaces_TemperatureInput T_mean;
          Battery_Common_Interfaces_TemperatureInput T_min;
          Battery_Common_Interfaces_VoltageInput V_max;
          Battery_Common_Interfaces_VoltageInput V_min;
          Battery_Common_Interfaces_VoltageInput V_pack;
        end packBus_rec;
      public
        packBus_rec packBus;
      end meanSOC_rec;
    public
      meanSOC_rec meanSOC;
    protected
      record minSOC_rec
        Battery_Common_Interfaces_StateOfChargeInput u;
      protected
        record packBus_rec
          Battery_Common_Interfaces_StateOfChargeInput SOC_min;
          Battery_Common_Interfaces_ElectricChargeInput C_actual;
          constant Battery_Common_Interfaces_ElectricChargeInput C_nominal = 38700.0;
          Battery_Common_Interfaces_ElectricCurrentInput I_max;
          Battery_Common_Interfaces_ElectricCurrentInput I_min;
          Battery_Common_Interfaces_ElectricCurrentInput I_pack;
          Battery_Common_Interfaces_ElectricPowerInput P_ideal;
          Battery_Common_Interfaces_ElectricPowerInput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_StateOfChargeInput SOC_max;
          Battery_Common_Interfaces_StateOfChargeInput SOC_mean;
          Battery_Common_Interfaces_StateOfHealthInput SOH_max;
          Battery_Common_Interfaces_StateOfHealthInput SOH_mean;
          Battery_Common_Interfaces_StateOfHealthInput SOH_min;
          Battery_Common_Interfaces_TemperatureInput T_max;
          Battery_Common_Interfaces_TemperatureInput T_mean;
          Battery_Common_Interfaces_TemperatureInput T_min;
          Battery_Common_Interfaces_VoltageInput V_max;
          Battery_Common_Interfaces_VoltageInput V_min;
          Battery_Common_Interfaces_VoltageInput V_pack;
        end packBus_rec;
      public
        packBus_rec packBus;
      end minSOC_rec;
    public
      minSOC_rec minSOC;
    protected
      record maxSOC_rec
        Battery_Common_Interfaces_StateOfChargeInput u;
      protected
        record packBus_rec
          Battery_Common_Interfaces_StateOfChargeInput SOC_max;
          Battery_Common_Interfaces_ElectricChargeInput C_actual;
          constant Battery_Common_Interfaces_ElectricChargeInput C_nominal = 38700.0;
          Battery_Common_Interfaces_ElectricCurrentInput I_max;
          Battery_Common_Interfaces_ElectricCurrentInput I_min;
          Battery_Common_Interfaces_ElectricCurrentInput I_pack;
          Battery_Common_Interfaces_ElectricPowerInput P_ideal;
          Battery_Common_Interfaces_ElectricPowerInput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_StateOfChargeInput SOC_mean;
          Battery_Common_Interfaces_StateOfChargeInput SOC_min;
          Battery_Common_Interfaces_StateOfHealthInput SOH_max;
          Battery_Common_Interfaces_StateOfHealthInput SOH_mean;
          Battery_Common_Interfaces_StateOfHealthInput SOH_min;
          Battery_Common_Interfaces_TemperatureInput T_max;
          Battery_Common_Interfaces_TemperatureInput T_mean;
          Battery_Common_Interfaces_TemperatureInput T_min;
          Battery_Common_Interfaces_VoltageInput V_max;
          Battery_Common_Interfaces_VoltageInput V_min;
          Battery_Common_Interfaces_VoltageInput V_pack;
        end packBus_rec;
      public
        packBus_rec packBus;
      end maxSOC_rec;
    public
      maxSOC_rec maxSOC;
    protected
      record meanTemperature_rec
        Battery_Common_Interfaces_TemperatureInput u;
      protected
        record packBus_rec
          Battery_Common_Interfaces_TemperatureInput T_mean;
          Battery_Common_Interfaces_ElectricChargeInput C_actual;
          constant Battery_Common_Interfaces_ElectricChargeInput C_nominal = 38700.0;
          Battery_Common_Interfaces_ElectricCurrentInput I_max;
          Battery_Common_Interfaces_ElectricCurrentInput I_min;
          Battery_Common_Interfaces_ElectricCurrentInput I_pack;
          Battery_Common_Interfaces_ElectricPowerInput P_ideal;
          Battery_Common_Interfaces_ElectricPowerInput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_StateOfChargeInput SOC_max;
          Battery_Common_Interfaces_StateOfChargeInput SOC_mean;
          Battery_Common_Interfaces_StateOfChargeInput SOC_min;
          Battery_Common_Interfaces_StateOfHealthInput SOH_max;
          Battery_Common_Interfaces_StateOfHealthInput SOH_mean;
          Battery_Common_Interfaces_StateOfHealthInput SOH_min;
          Battery_Common_Interfaces_TemperatureInput T_max;
          Battery_Common_Interfaces_TemperatureInput T_min;
          Battery_Common_Interfaces_VoltageInput V_max;
          Battery_Common_Interfaces_VoltageInput V_min;
          Battery_Common_Interfaces_VoltageInput V_pack;
        end packBus_rec;
      public
        packBus_rec packBus;
      end meanTemperature_rec;
    public
      meanTemperature_rec meanTemperature;
    protected
      record minTemperature_rec
        Battery_Common_Interfaces_TemperatureInput u;
      protected
        record packBus_rec
          Battery_Common_Interfaces_TemperatureInput T_min;
          Battery_Common_Interfaces_ElectricChargeInput C_actual;
          constant Battery_Common_Interfaces_ElectricChargeInput C_nominal = 38700.0;
          Battery_Common_Interfaces_ElectricCurrentInput I_max;
          Battery_Common_Interfaces_ElectricCurrentInput I_min;
          Battery_Common_Interfaces_ElectricCurrentInput I_pack;
          Battery_Common_Interfaces_ElectricPowerInput P_ideal;
          Battery_Common_Interfaces_ElectricPowerInput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_StateOfChargeInput SOC_max;
          Battery_Common_Interfaces_StateOfChargeInput SOC_mean;
          Battery_Common_Interfaces_StateOfChargeInput SOC_min;
          Battery_Common_Interfaces_StateOfHealthInput SOH_max;
          Battery_Common_Interfaces_StateOfHealthInput SOH_mean;
          Battery_Common_Interfaces_StateOfHealthInput SOH_min;
          Battery_Common_Interfaces_TemperatureInput T_max;
          Battery_Common_Interfaces_TemperatureInput T_mean;
          Battery_Common_Interfaces_VoltageInput V_max;
          Battery_Common_Interfaces_VoltageInput V_min;
          Battery_Common_Interfaces_VoltageInput V_pack;
        end packBus_rec;
      public
        packBus_rec packBus;
      end minTemperature_rec;
    public
      minTemperature_rec minTemperature;
    protected
      record maxTemperature_rec
        Battery_Common_Interfaces_TemperatureInput u;
      protected
        record packBus_rec
          Battery_Common_Interfaces_TemperatureInput T_max;
          Battery_Common_Interfaces_ElectricChargeInput C_actual;
          constant Battery_Common_Interfaces_ElectricChargeInput C_nominal = 38700.0;
          Battery_Common_Interfaces_ElectricCurrentInput I_max;
          Battery_Common_Interfaces_ElectricCurrentInput I_min;
          Battery_Common_Interfaces_ElectricCurrentInput I_pack;
          Battery_Common_Interfaces_ElectricPowerInput P_ideal;
          Battery_Common_Interfaces_ElectricPowerInput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_StateOfChargeInput SOC_max;
          Battery_Common_Interfaces_StateOfChargeInput SOC_mean;
          Battery_Common_Interfaces_StateOfChargeInput SOC_min;
          Battery_Common_Interfaces_StateOfHealthInput SOH_max;
          Battery_Common_Interfaces_StateOfHealthInput SOH_mean;
          Battery_Common_Interfaces_StateOfHealthInput SOH_min;
          Battery_Common_Interfaces_TemperatureInput T_mean;
          Battery_Common_Interfaces_TemperatureInput T_min;
          Battery_Common_Interfaces_VoltageInput V_max;
          Battery_Common_Interfaces_VoltageInput V_min;
          Battery_Common_Interfaces_VoltageInput V_pack;
        end packBus_rec;
      public
        packBus_rec packBus;
      end maxTemperature_rec;
    public
      maxTemperature_rec maxTemperature;
    protected
      record meanSOH_rec
        Battery_Common_Interfaces_StateOfHealthInput u;
      protected
        record packBus_rec
          Battery_Common_Interfaces_StateOfHealthInput SOH_mean;
          Battery_Common_Interfaces_ElectricChargeInput C_actual;
          constant Battery_Common_Interfaces_ElectricChargeInput C_nominal = 38700.0;
          Battery_Common_Interfaces_ElectricCurrentInput I_max;
          Battery_Common_Interfaces_ElectricCurrentInput I_min;
          Battery_Common_Interfaces_ElectricCurrentInput I_pack;
          Battery_Common_Interfaces_ElectricPowerInput P_ideal;
          Battery_Common_Interfaces_ElectricPowerInput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_StateOfChargeInput SOC_max;
          Battery_Common_Interfaces_StateOfChargeInput SOC_mean;
          Battery_Common_Interfaces_StateOfChargeInput SOC_min;
          Battery_Common_Interfaces_StateOfHealthInput SOH_max;
          Battery_Common_Interfaces_StateOfHealthInput SOH_min;
          Battery_Common_Interfaces_TemperatureInput T_max;
          Battery_Common_Interfaces_TemperatureInput T_mean;
          Battery_Common_Interfaces_TemperatureInput T_min;
          Battery_Common_Interfaces_VoltageInput V_max;
          Battery_Common_Interfaces_VoltageInput V_min;
          Battery_Common_Interfaces_VoltageInput V_pack;
        end packBus_rec;
      public
        packBus_rec packBus;
      end meanSOH_rec;
    public
      meanSOH_rec meanSOH;
    protected
      record minSOH_rec
        Battery_Common_Interfaces_StateOfHealthInput u;
      protected
        record packBus_rec
          Battery_Common_Interfaces_StateOfHealthInput SOH_min;
          Battery_Common_Interfaces_ElectricChargeInput C_actual;
          constant Battery_Common_Interfaces_ElectricChargeInput C_nominal = 38700.0;
          Battery_Common_Interfaces_ElectricCurrentInput I_max;
          Battery_Common_Interfaces_ElectricCurrentInput I_min;
          Battery_Common_Interfaces_ElectricCurrentInput I_pack;
          Battery_Common_Interfaces_ElectricPowerInput P_ideal;
          Battery_Common_Interfaces_ElectricPowerInput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_StateOfChargeInput SOC_max;
          Battery_Common_Interfaces_StateOfChargeInput SOC_mean;
          Battery_Common_Interfaces_StateOfChargeInput SOC_min;
          Battery_Common_Interfaces_StateOfHealthInput SOH_max;
          Battery_Common_Interfaces_StateOfHealthInput SOH_mean;
          Battery_Common_Interfaces_TemperatureInput T_max;
          Battery_Common_Interfaces_TemperatureInput T_mean;
          Battery_Common_Interfaces_TemperatureInput T_min;
          Battery_Common_Interfaces_VoltageInput V_max;
          Battery_Common_Interfaces_VoltageInput V_min;
          Battery_Common_Interfaces_VoltageInput V_pack;
        end packBus_rec;
      public
        packBus_rec packBus;
      end minSOH_rec;
    public
      minSOH_rec minSOH;
    protected
      record maxSOH_rec
        Battery_Common_Interfaces_StateOfHealthInput u;
      protected
        record packBus_rec
          Battery_Common_Interfaces_StateOfHealthInput SOH_max;
          Battery_Common_Interfaces_ElectricChargeInput C_actual;
          constant Battery_Common_Interfaces_ElectricChargeInput C_nominal = 38700.0;
          Battery_Common_Interfaces_ElectricCurrentInput I_max;
          Battery_Common_Interfaces_ElectricCurrentInput I_min;
          Battery_Common_Interfaces_ElectricCurrentInput I_pack;
          Battery_Common_Interfaces_ElectricPowerInput P_ideal;
          Battery_Common_Interfaces_ElectricPowerInput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_StateOfChargeInput SOC_max;
          Battery_Common_Interfaces_StateOfChargeInput SOC_mean;
          Battery_Common_Interfaces_StateOfChargeInput SOC_min;
          Battery_Common_Interfaces_StateOfHealthInput SOH_mean;
          Battery_Common_Interfaces_StateOfHealthInput SOH_min;
          Battery_Common_Interfaces_TemperatureInput T_max;
          Battery_Common_Interfaces_TemperatureInput T_mean;
          Battery_Common_Interfaces_TemperatureInput T_min;
          Battery_Common_Interfaces_VoltageInput V_max;
          Battery_Common_Interfaces_VoltageInput V_min;
          Battery_Common_Interfaces_VoltageInput V_pack;
        end packBus_rec;
      public
        packBus_rec packBus;
      end maxSOH_rec;
    public
      maxSOH_rec maxSOH;
    protected
      record 'stateOfHealth[1,1]_rec'
        Battery_Common_Interfaces_StateOfHealthOutput y;
      protected
        record cellBus_rec
          Battery_Common_Interfaces_StateOfHealthOutput SOH;
          Battery_Common_Interfaces_ElectricChargeOutput C_actual;
          constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
          Battery_Common_Interfaces_VoltageInput OCV;
          Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
          Battery_Common_Interfaces_ElectricPowerOutput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_ElectricResistanceInput R_total;
          Battery_Common_Interfaces_StateOfChargeOutput SOC;
          Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
          Battery_Common_Interfaces_TemperatureOutput T;
          Battery_Common_Interfaces_ElectricCurrentOutput i;
          Battery_Common_Interfaces_VoltageOutput v;
        end cellBus_rec;
      public
        cellBus_rec cellBus;
      end 'stateOfHealth[1,1]_rec';
    public
      'stateOfHealth[1,1]_rec' 'stateOfHealth[1,1]';
    protected
      record minMax_rec
        constant Integer n_x(min = 1) = 1 "Number of input connections in x-dimension";
        constant Integer n_y(min = 1) = 1 "Number of input connections in y-dimension";
        Modelica_Blocks_Interfaces_RealVectorInput 'u[1,1]';
        Modelica_Blocks_Interfaces_RealOutput yMax;
        Modelica_Blocks_Interfaces_RealOutput yMin;
      end minMax_rec;
    public
      minMax_rec minMax;
    protected
      record minMax1_rec
        constant Integer n_x(min = 1) = 1 "Number of input connections in x-dimension";
        constant Integer n_y(min = 1) = 1 "Number of input connections in y-dimension";
        Modelica_Blocks_Interfaces_RealVectorInput 'u[1,1]';
        Modelica_Blocks_Interfaces_RealOutput yMax;
        Modelica_Blocks_Interfaces_RealOutput yMin;
      end minMax1_rec;
    public
      minMax1_rec minMax1;
    protected
      record minMax2_rec
        constant Integer n_x(min = 1) = 1 "Number of input connections in x-dimension";
        constant Integer n_y(min = 1) = 1 "Number of input connections in y-dimension";
        Modelica_Blocks_Interfaces_RealVectorInput 'u[1,1]';
        Modelica_Blocks_Interfaces_RealOutput yMax;
        Modelica_Blocks_Interfaces_RealOutput yMin;
      end minMax2_rec;
    public
      minMax2_rec minMax2;
    protected
      record minMax3_rec
        constant Integer n_x(min = 1) = 1 "Number of input connections in x-dimension";
        constant Integer n_y(min = 1) = 1 "Number of input connections in y-dimension";
        Modelica_Blocks_Interfaces_RealVectorInput 'u[1,1]';
        Modelica_Blocks_Interfaces_RealOutput yMax;
        Modelica_Blocks_Interfaces_RealOutput yMin;
      end minMax3_rec;
    public
      minMax3_rec minMax3;
    protected
      record minMax4_rec
        constant Integer n_x(min = 1) = 1 "Number of input connections in x-dimension";
        constant Integer n_y(min = 1) = 1 "Number of input connections in y-dimension";
        Modelica_Blocks_Interfaces_RealVectorInput 'u[1,1]';
        Modelica_Blocks_Interfaces_RealOutput yMax;
        Modelica_Blocks_Interfaces_RealOutput yMin;
      end minMax4_rec;
    public
      minMax4_rec minMax4;
    protected
      record scaledSum2D_rec
        constant Integer n_x(min = 1) = 1 "Number of input connections in x-dimension";
        constant Integer n_y(min = 1) = 1 "Number of input connections in y-dimension";
        constant Real k = 1.0 "Scaling factor";
        Modelica_Blocks_Interfaces_RealVectorInput 'u[1,1]';
        Modelica_Blocks_Interfaces_RealOutput ySum;
      end scaledSum2D_rec;
    public
      scaledSum2D_rec scaledSum2D;
    protected
      record scaledSum2D1_rec
        constant Integer n_x(min = 1) = 1 "Number of input connections in x-dimension";
        constant Integer n_y(min = 1) = 1 "Number of input connections in y-dimension";
        constant Real k = 1.0 "Scaling factor";
        Modelica_Blocks_Interfaces_RealVectorInput 'u[1,1]';
        Modelica_Blocks_Interfaces_RealOutput ySum;
      end scaledSum2D1_rec;
    public
      scaledSum2D1_rec scaledSum2D1;
    protected
      record scaledSum2D2_rec
        constant Integer n_x(min = 1) = 1 "Number of input connections in x-dimension";
        constant Integer n_y(min = 1) = 1 "Number of input connections in y-dimension";
        constant Real k = 1.0 "Scaling factor";
        Modelica_Blocks_Interfaces_RealVectorInput 'u[1,1]';
        Modelica_Blocks_Interfaces_RealOutput ySum;
      end scaledSum2D2_rec;
    public
      scaledSum2D2_rec scaledSum2D2;
    protected
      record actualCapacity_rec
        Battery_Common_Interfaces_ElectricChargeInput u;
      protected
        record packBus_rec
          Battery_Common_Interfaces_ElectricChargeInput C_actual;
          constant Battery_Common_Interfaces_ElectricChargeInput C_nominal = 38700.0;
          Battery_Common_Interfaces_ElectricCurrentInput I_max;
          Battery_Common_Interfaces_ElectricCurrentInput I_min;
          Battery_Common_Interfaces_ElectricCurrentInput I_pack;
          Battery_Common_Interfaces_ElectricPowerInput P_ideal;
          Battery_Common_Interfaces_ElectricPowerInput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_StateOfChargeInput SOC_max;
          Battery_Common_Interfaces_StateOfChargeInput SOC_mean;
          Battery_Common_Interfaces_StateOfChargeInput SOC_min;
          Battery_Common_Interfaces_StateOfHealthInput SOH_max;
          Battery_Common_Interfaces_StateOfHealthInput SOH_mean;
          Battery_Common_Interfaces_StateOfHealthInput SOH_min;
          Battery_Common_Interfaces_TemperatureInput T_max;
          Battery_Common_Interfaces_TemperatureInput T_mean;
          Battery_Common_Interfaces_TemperatureInput T_min;
          Battery_Common_Interfaces_VoltageInput V_max;
          Battery_Common_Interfaces_VoltageInput V_min;
          Battery_Common_Interfaces_VoltageInput V_pack;
        end packBus_rec;
      public
        packBus_rec packBus;
      end actualCapacity_rec;
    public
      actualCapacity_rec actualCapacity;
    protected
      record nominalCapacity_rec
        constant Battery_Common_Interfaces_ElectricChargeInput u = 38700.0;
      protected
        record packBus_rec
          constant Battery_Common_Interfaces_ElectricChargeInput C_nominal = 38700.0;
          Battery_Common_Interfaces_ElectricChargeInput C_actual;
          Battery_Common_Interfaces_ElectricCurrentInput I_max;
          Battery_Common_Interfaces_ElectricCurrentInput I_min;
          Battery_Common_Interfaces_ElectricCurrentInput I_pack;
          Battery_Common_Interfaces_ElectricPowerInput P_ideal;
          Battery_Common_Interfaces_ElectricPowerInput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_StateOfChargeInput SOC_max;
          Battery_Common_Interfaces_StateOfChargeInput SOC_mean;
          Battery_Common_Interfaces_StateOfChargeInput SOC_min;
          Battery_Common_Interfaces_StateOfHealthInput SOH_max;
          Battery_Common_Interfaces_StateOfHealthInput SOH_mean;
          Battery_Common_Interfaces_StateOfHealthInput SOH_min;
          Battery_Common_Interfaces_TemperatureInput T_max;
          Battery_Common_Interfaces_TemperatureInput T_mean;
          Battery_Common_Interfaces_TemperatureInput T_min;
          Battery_Common_Interfaces_VoltageInput V_max;
          Battery_Common_Interfaces_VoltageInput V_min;
          Battery_Common_Interfaces_VoltageInput V_pack;
        end packBus_rec;
      public
        packBus_rec packBus;
      end nominalCapacity_rec;
    public
      nominalCapacity_rec nominalCapacity;
    protected
      record min2D_rec
        constant Integer n_x(min = 1) = 1 "Number of input connections in x-dimension";
        constant Integer n_y(min = 1) = 1 "Number of input connections in y-dimension";
        Modelica_Blocks_Interfaces_RealVectorInput 'u[1,1]';
        Modelica_Blocks_Interfaces_RealOutput yMin;
      end min2D_rec;
    public
      min2D_rec min2D;
    protected
      record min2D1_rec
        constant Integer n_x(min = 1) = 1 "Number of input connections in x-dimension";
        constant Integer n_y(min = 1) = 1 "Number of input connections in y-dimension";
        constant Modelica_Blocks_Interfaces_RealVectorInput 'u[1,1]' = 7740.0;
        constant Modelica_Blocks_Interfaces_RealOutput yMin = 7740.0;
      end min2D1_rec;
    public
      min2D1_rec min2D1;
    protected
      record 'actualCapacityCell[1,1]_rec'
        Battery_Common_Interfaces_ElectricChargeOutput y;
      protected
        record cellBus_rec
          Battery_Common_Interfaces_ElectricChargeOutput C_actual;
          constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
          Battery_Common_Interfaces_VoltageInput OCV;
          Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
          Battery_Common_Interfaces_ElectricPowerOutput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_ElectricResistanceInput R_total;
          Battery_Common_Interfaces_StateOfChargeOutput SOC;
          Battery_Common_Interfaces_StateOfHealthOutput SOH;
          Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
          Battery_Common_Interfaces_TemperatureOutput T;
          Battery_Common_Interfaces_ElectricCurrentOutput i;
          Battery_Common_Interfaces_VoltageOutput v;
        end cellBus_rec;
      public
        cellBus_rec cellBus;
      end 'actualCapacityCell[1,1]_rec';
    public
      'actualCapacityCell[1,1]_rec' 'actualCapacityCell[1,1]';
    protected
      record 'nominalCapacityCell[1,1]_rec'
        constant Battery_Common_Interfaces_ElectricChargeOutput y = 7740.0;
      protected
        record cellBus_rec
          constant Battery_Common_Interfaces_ElectricChargeOutput C_nominal = 7740.0;
          Battery_Common_Interfaces_ElectricChargeOutput C_actual;
          Battery_Common_Interfaces_VoltageInput OCV;
          Battery_Common_Interfaces_ElectricPowerOutput P_ideal;
          Battery_Common_Interfaces_ElectricPowerOutput P_loss;
          Battery_Common_Interfaces_ElectricPowerInput P_terminal;
          Battery_Common_Interfaces_ElectricResistanceInput R_total;
          Battery_Common_Interfaces_StateOfChargeOutput SOC;
          Battery_Common_Interfaces_StateOfHealthOutput SOH;
          Battery_Common_Interfaces_StateOfHealthOutput SOH_resistance;
          Battery_Common_Interfaces_TemperatureOutput T;
          Battery_Common_Interfaces_ElectricCurrentOutput i;
          Battery_Common_Interfaces_VoltageOutput v;
        end cellBus_rec;
      public
        cellBus_rec cellBus;
      end 'nominalCapacityCell[1,1]_rec';
    public
      'nominalCapacityCell[1,1]_rec' 'nominalCapacityCell[1,1]';
    protected
      record gain_rec
        constant Real k(unit = "1") = 5 "Gain value multiplied with input signal";
        Modelica_Blocks_Interfaces_RealInput u "Input signal connector";
        Modelica_Blocks_Interfaces_RealOutput y "Output signal connector";
      end gain_rec;
    public
      gain_rec gain;
    protected
      record gain1_rec
        constant Real k(unit = "1") = 5 "Gain value multiplied with input signal";
        constant Modelica_Blocks_Interfaces_RealInput u = 7740.0 "Input signal connector";
        constant Modelica_Blocks_Interfaces_RealOutput y = 38700.0 "Output signal connector";
      end gain1_rec;
    public
      gain1_rec gain1;
    end fromCellToPack_rec;
  public
    fromCellToPack_rec fromCellToPack;
  protected
    record realExpression3_rec
      Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
    end realExpression3_rec;
  public
    realExpression3_rec realExpression3;
  protected
    record realExpression4_rec
      Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
    end realExpression4_rec;
  public
    realExpression4_rec realExpression4;
  protected
    record realExpression5_rec
      Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
    end realExpression5_rec;
  public
    realExpression5_rec realExpression5;
  protected
    record realExpression1_rec
      Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
    end realExpression1_rec;
  public
    realExpression1_rec realExpression1;
  protected
    record realExpression2_rec
      Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
    end realExpression2_rec;
  public
    realExpression2_rec realExpression2;
  protected
    record packCurrent_rec
      Battery_Common_Interfaces_ElectricCurrentInput u;
    protected
      record packBus_rec
        Battery_Common_Interfaces_ElectricCurrentInput I_pack;
        Battery_Common_Interfaces_ElectricChargeInput C_actual;
        constant Battery_Common_Interfaces_ElectricChargeInput C_nominal = 38700.0;
        Battery_Common_Interfaces_ElectricCurrentInput I_max;
        Battery_Common_Interfaces_ElectricCurrentInput I_min;
        Battery_Common_Interfaces_ElectricPowerInput P_ideal;
        Battery_Common_Interfaces_ElectricPowerInput P_loss;
        Battery_Common_Interfaces_ElectricPowerInput P_terminal;
        Battery_Common_Interfaces_StateOfChargeInput SOC_max;
        Battery_Common_Interfaces_StateOfChargeInput SOC_mean;
        Battery_Common_Interfaces_StateOfChargeInput SOC_min;
        Battery_Common_Interfaces_StateOfHealthInput SOH_max;
        Battery_Common_Interfaces_StateOfHealthInput SOH_mean;
        Battery_Common_Interfaces_StateOfHealthInput SOH_min;
        Battery_Common_Interfaces_TemperatureInput T_max;
        Battery_Common_Interfaces_TemperatureInput T_mean;
        Battery_Common_Interfaces_TemperatureInput T_min;
        Battery_Common_Interfaces_VoltageInput V_max;
        Battery_Common_Interfaces_VoltageInput V_min;
        Battery_Common_Interfaces_VoltageInput V_pack;
      end packBus_rec;
    public
      packBus_rec packBus;
    end packCurrent_rec;
  public
    packCurrent_rec packCurrent;
  protected
    record packVoltage_rec
      Battery_Common_Interfaces_VoltageInput u;
    protected
      record packBus_rec
        Battery_Common_Interfaces_VoltageInput V_pack;
        Battery_Common_Interfaces_ElectricChargeInput C_actual;
        constant Battery_Common_Interfaces_ElectricChargeInput C_nominal = 38700.0;
        Battery_Common_Interfaces_ElectricCurrentInput I_max;
        Battery_Common_Interfaces_ElectricCurrentInput I_min;
        Battery_Common_Interfaces_ElectricCurrentInput I_pack;
        Battery_Common_Interfaces_ElectricPowerInput P_ideal;
        Battery_Common_Interfaces_ElectricPowerInput P_loss;
        Battery_Common_Interfaces_ElectricPowerInput P_terminal;
        Battery_Common_Interfaces_StateOfChargeInput SOC_max;
        Battery_Common_Interfaces_StateOfChargeInput SOC_mean;
        Battery_Common_Interfaces_StateOfChargeInput SOC_min;
        Battery_Common_Interfaces_StateOfHealthInput SOH_max;
        Battery_Common_Interfaces_StateOfHealthInput SOH_mean;
        Battery_Common_Interfaces_StateOfHealthInput SOH_min;
        Battery_Common_Interfaces_TemperatureInput T_max;
        Battery_Common_Interfaces_TemperatureInput T_mean;
        Battery_Common_Interfaces_TemperatureInput T_min;
        Battery_Common_Interfaces_VoltageInput V_max;
        Battery_Common_Interfaces_VoltageInput V_min;
      end packBus_rec;
    public
      packBus_rec packBus;
    end packVoltage_rec;
  public
    packVoltage_rec packVoltage;
  protected
    record idealPower_rec
      Battery_Common_Interfaces_ElectricPowerInput u;
    protected
      record packBus_rec
        Battery_Common_Interfaces_ElectricPowerInput P_ideal;
        Battery_Common_Interfaces_ElectricChargeInput C_actual;
        constant Battery_Common_Interfaces_ElectricChargeInput C_nominal = 38700.0;
        Battery_Common_Interfaces_ElectricCurrentInput I_max;
        Battery_Common_Interfaces_ElectricCurrentInput I_min;
        Battery_Common_Interfaces_ElectricCurrentInput I_pack;
        Battery_Common_Interfaces_ElectricPowerInput P_loss;
        Battery_Common_Interfaces_ElectricPowerInput P_terminal;
        Battery_Common_Interfaces_StateOfChargeInput SOC_max;
        Battery_Common_Interfaces_StateOfChargeInput SOC_mean;
        Battery_Common_Interfaces_StateOfChargeInput SOC_min;
        Battery_Common_Interfaces_StateOfHealthInput SOH_max;
        Battery_Common_Interfaces_StateOfHealthInput SOH_mean;
        Battery_Common_Interfaces_StateOfHealthInput SOH_min;
        Battery_Common_Interfaces_TemperatureInput T_max;
        Battery_Common_Interfaces_TemperatureInput T_mean;
        Battery_Common_Interfaces_TemperatureInput T_min;
        Battery_Common_Interfaces_VoltageInput V_max;
        Battery_Common_Interfaces_VoltageInput V_min;
        Battery_Common_Interfaces_VoltageInput V_pack;
      end packBus_rec;
    public
      packBus_rec packBus;
    end idealPower_rec;
  public
    idealPower_rec idealPower;
  protected
    record lossPower_rec
      Battery_Common_Interfaces_ElectricPowerInput u;
    protected
      record packBus_rec
        Battery_Common_Interfaces_ElectricPowerInput P_loss;
        Battery_Common_Interfaces_ElectricChargeInput C_actual;
        constant Battery_Common_Interfaces_ElectricChargeInput C_nominal = 38700.0;
        Battery_Common_Interfaces_ElectricCurrentInput I_max;
        Battery_Common_Interfaces_ElectricCurrentInput I_min;
        Battery_Common_Interfaces_ElectricCurrentInput I_pack;
        Battery_Common_Interfaces_ElectricPowerInput P_ideal;
        Battery_Common_Interfaces_ElectricPowerInput P_terminal;
        Battery_Common_Interfaces_StateOfChargeInput SOC_max;
        Battery_Common_Interfaces_StateOfChargeInput SOC_mean;
        Battery_Common_Interfaces_StateOfChargeInput SOC_min;
        Battery_Common_Interfaces_StateOfHealthInput SOH_max;
        Battery_Common_Interfaces_StateOfHealthInput SOH_mean;
        Battery_Common_Interfaces_StateOfHealthInput SOH_min;
        Battery_Common_Interfaces_TemperatureInput T_max;
        Battery_Common_Interfaces_TemperatureInput T_mean;
        Battery_Common_Interfaces_TemperatureInput T_min;
        Battery_Common_Interfaces_VoltageInput V_max;
        Battery_Common_Interfaces_VoltageInput V_min;
        Battery_Common_Interfaces_VoltageInput V_pack;
      end packBus_rec;
    public
      packBus_rec packBus;
    end lossPower_rec;
  public
    lossPower_rec lossPower;
  protected
    record terminalPower_rec
      Battery_Common_Interfaces_ElectricPowerInput u;
    protected
      record packBus_rec
        Battery_Common_Interfaces_ElectricPowerInput P_terminal;
        Battery_Common_Interfaces_ElectricChargeInput C_actual;
        constant Battery_Common_Interfaces_ElectricChargeInput C_nominal = 38700.0;
        Battery_Common_Interfaces_ElectricCurrentInput I_max;
        Battery_Common_Interfaces_ElectricCurrentInput I_min;
        Battery_Common_Interfaces_ElectricCurrentInput I_pack;
        Battery_Common_Interfaces_ElectricPowerInput P_ideal;
        Battery_Common_Interfaces_ElectricPowerInput P_loss;
        Battery_Common_Interfaces_StateOfChargeInput SOC_max;
        Battery_Common_Interfaces_StateOfChargeInput SOC_mean;
        Battery_Common_Interfaces_StateOfChargeInput SOC_min;
        Battery_Common_Interfaces_StateOfHealthInput SOH_max;
        Battery_Common_Interfaces_StateOfHealthInput SOH_mean;
        Battery_Common_Interfaces_StateOfHealthInput SOH_min;
        Battery_Common_Interfaces_TemperatureInput T_max;
        Battery_Common_Interfaces_TemperatureInput T_mean;
        Battery_Common_Interfaces_TemperatureInput T_min;
        Battery_Common_Interfaces_VoltageInput V_max;
        Battery_Common_Interfaces_VoltageInput V_min;
        Battery_Common_Interfaces_VoltageInput V_pack;
      end packBus_rec;
    public
      packBus_rec packBus;
    end terminalPower_rec;
  public
    terminalPower_rec terminalPower;
  end batteryPack_rec;
public
  batteryPack_rec batteryPack annotation(Dialog);
protected
  record speedInput_rec
    Modelica_Blocks_Interfaces_RealOutput y "Value of Real output";
  end speedInput_rec;
public
  speedInput_rec speedInput;
protected
  record realExtend_rec
    Modelica_Blocks_Interfaces_RealInput u;
    constant Modelica_Blocks_Interfaces_RealOutput 'y[1]' = 0.0;
    constant Modelica_Blocks_Interfaces_RealOutput 'y[2]' = 0.0;
    Modelica_Blocks_Interfaces_RealOutput 'y[3]';
  end realExtend_rec;
public
  realExtend_rec realExtend;
protected
  record realExtend1_rec
    Modelica_Blocks_Interfaces_RealInput u;
    constant Modelica_Blocks_Interfaces_RealOutput 'y[1]' = 0.0;
    constant Modelica_Blocks_Interfaces_RealOutput 'y[2]' = 0.0;
    Modelica_Blocks_Interfaces_RealOutput 'y[3]';
  end realExtend1_rec;
public
  realExtend1_rec realExtend1 annotation(Dialog);
  parameter Boolean _rotationCW_start = false
  annotation (Dialog( group="Start values for inputs "));
  Modelica.Blocks.Interfaces.BooleanInput rotationCW(start = _rotationCW_start)
  annotation (Placement(transformation(extent={{-124,30},{-84,70}})));
  parameter Real _omega_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
  Modelica.Blocks.Interfaces.RealInput omega(start = _omega_start)
  annotation (Placement(transformation(extent={{-124,-20},{-84,20}})));
  parameter Real _tau_start = 0.0
  annotation (Dialog( group="Start values for inputs "));
  Modelica.Blocks.Interfaces.RealInput tau(start = _tau_start) "Accelerating torque acting at flange (= -flange.tau)"
  annotation (Placement(transformation(extent={{-124,-70},{-84,-30}})));
  Modelica.Blocks.Interfaces.RealOutput tau_out "Torque in flange flange_a and flange_b (tau = flange_a.tau = -flange_b.tau) as output signal"
  annotation (Placement(transformation(extent={{100,40},{140,80}})));
  Modelica.Blocks.Interfaces.RealOutput omega_out "Absolute angular velocity of flange_a as output signal"
  annotation (Placement(transformation(extent={{100,0},{140,40}})));
  Modelica.Blocks.Interfaces.RealOutput CPUtime(unit = "s")
  annotation (Placement(transformation(extent={{100,-40},{140,0}})));
  Modelica.Blocks.Interfaces.RealOutput EventCounter
  annotation (Placement(transformation(extent={{100,-80},{140,-40}})));
public
  parameter String fmi_instanceName="Hacker_Q150_45_fmu"
  annotation (Dialog(tab="FMI", group="Instance name"));
  parameter Boolean fmi_loggingOn=false
  annotation (Dialog(tab="FMI", group="Enable logging"));
  constant Integer fmi_NumberOfContinuousStates = 31;
  constant Integer fmi_NumberOfEventIndicators = 36;
protected
  Real fmi_x[fmi_NumberOfContinuousStates](each fixed=false) "States";
  Real fmi_z[fmi_NumberOfEventIndicators] "Event indicators";
  Boolean fmi_z_positive[fmi_NumberOfEventIndicators](each start=false, fixed=true);
  fmi_Functions.fmiModel fmi;
  parameter Real fmi_Initialized(fixed=false);
  Real myTime;
  Boolean fmi_StepEvent;
  Boolean fmi_NewStates;
  Boolean fmi_NewStates2(start=false,fixed=true);
  Real fmi_TNext(start=fmi_TNext_Start,fixed=true);
  parameter Real fmi_TNext_Start(fixed=false);
package fmi_Functions
  class fmiModel
  extends ExternalObject;
    function constructor "Initialize FMI model"
      extends Modelica.Icons.Function;
      input String instanceName;
      input Boolean loggingOn;
      output fmiModel fmi;
      external"C" fmi = Hacker_Q150_45803824301498893067688144_fmiInstantiateModel2(instanceName, loggingOn)
      annotation(Include="
#ifndef Hacker_Q150_45803824301498893067688144_Instantiate_C
#define Hacker_Q150_45803824301498893067688144_Instantiate_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
#ifndef Hacker_Q150_45803824301498893067688144_MYSTRCMP_C
#define Hacker_Q150_45803824301498893067688144_MYSTRCMP_C 1
int Hacker_Q150_45803824301498893067688144mystrcmp(const void *_a, const void *_b) {
  char *a = _a;
  char *const *b = _b;
  return strcmp(a, *b);
}
#endif
void Hacker_Q150_45803824301498893067688144Logger(fmiComponent c, fmiString instanceName, fmiStatus status,
	 fmiString category, fmiString message, ...) {
  char msg[4096];
  char buf[4096];
  int len;
  va_list ap;
  va_start(ap,message);
#if defined(_MSC_VER) && _MSC_VER>=1200
  len = _snprintf(msg, sizeof(msg)/sizeof(*msg), \"%s: %s\", instanceName, message);
  if (len < 0) goto fail;
  len = _vsnprintf(buf, sizeof(buf)/sizeof(*buf) - 2, msg, ap);
  if (len < 0) goto fail;
#else
  len = snprintf(msg, sizeof(msg)/sizeof(*msg), \"%s: %s\", instanceName, message);
  if (len < 0) goto fail;
  len = vsnprintf(buf, sizeof(buf)/sizeof(*buf) - 2, msg, ap);
  if (len < 0) goto fail;
#endif
  if( len>0 && len <4096 && buf[len - 1]!='\\n'){
    buf[len] = '\\n';
    buf[len + 1] = 0;
  }
  va_end(ap);
  switch (status) {
    case fmiFatal:
      ModelicaMessage(\"[fmiFatal]: \");
      break;
    case fmiError:
      ModelicaMessage(\"[fmiError]: \");
      break;
    case fmiDiscard:
      ModelicaMessage(\"[fmiDiscard]: \");
      break;
    case fmiWarning:
      ModelicaMessage(\"[fmiWarning]: \");
      break;
    case fmiOK:
      ModelicaMessage(\"[fmiOK]: \");
      break;
  }
  ModelicaMessage(buf);
  return;
fail:
  ModelicaMessage(\"Logger failed, message too long?\");
}
void * Hacker_Q150_45803824301498893067688144_fmiInstantiateModel2(const char*instanceName, fmiBoolean loggingOn) {
  static fmiMECallbackFunctions funcs = {&Hacker_Q150_45803824301498893067688144Logger, &calloc, &free};
  struct dy_Extended* res;

  res = calloc(1, sizeof(struct dy_Extended));
  if (res!=0) {
    if (!(res->hInst=LoadLibraryW(L\"Hacker_Q150_45.dll\"))) {
      ModelicaError(\"Loading of FMU dynamic link library (Hacker_Q150_45.dll) failed!\");
      return 0;
    }
    if (!(res->dyFmiInstantiateModel=(fmiInstantiateModelFunc)GetProcAddress(res->hInst,\"Hacker_Q150_45_fmiInstantiateModel\"))) {
      ModelicaError(\"GetProcAddress failed for fmiInstantiateModel!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiInstantiateModel\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiFreeModelInstance=(fmiFreeModelInstanceFunc)GetProcAddress(res->hInst,\"Hacker_Q150_45_fmiFreeModelInstance\"))) {
      ModelicaError(\"GetProcAddress failed for fmiFreeModelInstance!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiFreeModelInstance\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiSetTime=(fmiSetTimeFunc)GetProcAddress(res->hInst,\"Hacker_Q150_45_fmiSetTime\"))) {
      ModelicaError(\"GetProcAddress failed for fmiSetTime!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiSetTime\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiSetContinuousStates=(fmiSetContinuousStatesFunc)GetProcAddress(res->hInst,\"Hacker_Q150_45_fmiSetContinuousStates\"))) {
      ModelicaError(\"GetProcAddress failed for fmiSetContinuousStates!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiSetContinuousStates\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiGetContinuousStates=(fmiGetContinuousStatesFunc)GetProcAddress(res->hInst,\"Hacker_Q150_45_fmiGetContinuousStates\"))) {
      ModelicaError(\"GetProcAddress failed for fmiGetContinuousStates!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiGetContinuousStates\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiCompletedIntegratorStep=(fmiCompletedIntegratorStepFunc)GetProcAddress(res->hInst,\"Hacker_Q150_45_fmiCompletedIntegratorStep\"))) {
      ModelicaError(\"GetProcAddress failed for fmiCompletedIntegratorStep!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiCompletedIntegratorStep\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiEventUpdate=(fmiEventUpdateFunc)GetProcAddress(res->hInst,\"Hacker_Q150_45_fmiEventUpdate\"))) {
      ModelicaError(\"GetProcAddress failed for fmiEventUpdate!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiEventUpdate\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiInitialize=(fmiInitializeFunc)GetProcAddress(res->hInst,\"Hacker_Q150_45_fmiInitialize\"))) {
      ModelicaError(\"GetProcAddress failed for fmiInitialize!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiInitialize\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiGetDerivatives=(fmiGetDerivativesFunc)GetProcAddress(res->hInst,\"Hacker_Q150_45_fmiGetDerivatives\"))) {
      ModelicaError(\"GetProcAddress failed for fmiGetDerivatives!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiGetDerivatives\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiGetEventIndicators=(fmiGetEventIndicatorsFunc)GetProcAddress(res->hInst,\"Hacker_Q150_45_fmiGetEventIndicators\"))) {
      ModelicaError(\"GetProcAddress failed for fmiGetEventIndicators!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiGetEventIndicators\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiTerminate=(fmiTerminateFunc)GetProcAddress(res->hInst,\"Hacker_Q150_45_fmiTerminate\"))) {
      ModelicaError(\"GetProcAddress failed for fmiTerminate!\\n The model was imported as a model exchange FMU but could not load the ME specific function fmiTerminate\\n Verify that the FMU supports Model Exchange\");
      return 0;
    }
    if (!(res->dyFmiSetReal=(fmiSetRealFunc)GetProcAddress(res->hInst,\"Hacker_Q150_45_fmiSetReal\"))) {
      ModelicaError(\"GetProcAddress failed for fmiSetReal!\");
      return 0;
    }
    if (!(res->dyFmiGetReal=(fmiGetRealFunc)GetProcAddress(res->hInst,\"Hacker_Q150_45_fmiGetReal\"))) {
      ModelicaError(\"GetProcAddress failed for fmiGetReal!\");
      return 0;
    }
    if (!(res->dyFmiSetInteger=(fmiSetIntegerFunc)GetProcAddress(res->hInst,\"Hacker_Q150_45_fmiSetInteger\"))) {
      ModelicaError(\"GetProcAddress failed for fmiSetInteger!\");
      return 0;
    }
    if (!(res->dyFmiGetInteger=(fmiGetIntegerFunc)GetProcAddress(res->hInst,\"Hacker_Q150_45_fmiGetInteger\"))) {
      ModelicaError(\"GetProcAddress failed for fmiGetInteger!\");
      return 0;
    }
    if (!(res->dyFmiSetBoolean=(fmiSetBooleanFunc)GetProcAddress(res->hInst,\"Hacker_Q150_45_fmiSetBoolean\"))) {
      ModelicaError(\"GetProcAddress failed for fmiSetBoolean!\");
      return 0;
    }
    if (!(res->dyFmiGetBoolean=(fmiGetBooleanFunc)GetProcAddress(res->hInst,\"Hacker_Q150_45_fmiGetBoolean\"))) {
      ModelicaError(\"GetProcAddress failed for fmiGetBoolean!\");
      return 0;
    }
    if (!(res->dyFmiSetString=(fmiSetStringFunc)GetProcAddress(res->hInst,\"Hacker_Q150_45_fmiSetString\"))) {
      ModelicaError(\"GetProcAddress failed for fmiSetString!\");
      return 0;
    }
    if (!(res->dyFmiGetString=(fmiGetStringFunc)GetProcAddress(res->hInst,\"Hacker_Q150_45_fmiGetString\"))) {
      ModelicaError(\"GetProcAddress failed for fmiGetString!\");
      return 0;
    }
    if (!(res->dyFmiSetDebugLogging=(fmiSetDebugLoggingFunc)GetProcAddress(res->hInst,\"Hacker_Q150_45_fmiSetDebugLogging\"))) {
      ModelicaError(\"GetProcAddress failed for fmiSetDebugLogging!\");
      return 0;
    }
    res->m=res->dyFmiInstantiateModel(instanceName, \"{8c038d24-301c-49c8-8930-67a6cb88a144}\", funcs, loggingOn);
    if (0==res->m) {free(res);res=0;ModelicaError(\"InstantiateModel failed\");}
    else {res->dyTriggered=0;res->dyTime=res->dyLastTime=-1e37;res->dyFirstTimeEvent=1e37;res->currentMode=dyInstantiationMode;}
  }
  return res;
}
#endif", Library="Hacker_Q150_45", LibraryDirectory="modelica://Hacker_Q150_45_fmu/Resources/Library/FMU/Hacker_Q150_45/binaries");
        annotation (__Dymola_CriticalRegion="Hacker_Q150_45");
    end constructor;

    function destructor "Release storage of FMI model"
      extends Modelica.Icons.Function;
      input fmiModel fmi;
      external"C"
                 Hacker_Q150_45803824301498893067688144_fmiFreeModelInstance2(fmi)
      annotation (Include="
#ifndef Hacker_Q150_45803824301498893067688144_Free_C
#define Hacker_Q150_45803824301498893067688144_Free_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
void Hacker_Q150_45803824301498893067688144_fmiFreeModelInstance2(void*m) {
  struct dy_Extended*a=m;
  if (a) {
    a->dyFmiTerminate(a->m);
    a->dyFmiFreeModelInstance(a->m);
    FreeLibrary(a->hInst);
    free(a);
  }
}
#endif", Library="Hacker_Q150_45", LibraryDirectory="modelica://Hacker_Q150_45_fmu/Resources/Library/FMU/Hacker_Q150_45/binaries");
        annotation (__Dymola_CriticalRegion="Hacker_Q150_45");
    end destructor;
  end fmiModel;

    function fmiSetTime
      input fmiModel fmi;
      input Real ti;
      external"C" Hacker_Q150_45803824301498893067688144_fmiSetTime2(fmi, ti)
      annotation (Include="
#ifndef Hacker_Q150_45803824301498893067688144_SetTime_C
#define Hacker_Q150_45803824301498893067688144_SetTime_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
void Hacker_Q150_45803824301498893067688144_fmiSetTime2(void*m, double ti) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if (a) {
    if(a->currentMode==dyInstantiationMode){
      a->dyTime=ti;
      status=a->dyFmiSetTime(a->m, ti);
    }else if(ti>a->dyTime || (a->currentMode==dyEventMode && ti==a->dyTime && !isModelicaEvent())){
      a->currentMode=dyContinuousTimeMode;
      a->dyTime=ti;
      status=a->dyFmiSetTime(a->m, ti);
    }else if(ti <= a->dyTime && a->currentMode == dyContinuousTimeMode){
      a->dyTime=ti;
      status=a->dyFmiSetTime(a->m, ti);
    }else{
      status=fmiOK;
    }
  }
  if (status!=fmiOK ) ModelicaError(\"SetTime failed\");
}
#endif", Library="Hacker_Q150_45", LibraryDirectory="modelica://Hacker_Q150_45_fmu/Resources/Library/FMU/Hacker_Q150_45/binaries");
      annotation (__Dymola_CriticalRegion="Hacker_Q150_45");
    end fmiSetTime;

    function fmiSetContinuousStates
      input fmiModel fmi;
      input Real x[:];
      external"C" Hacker_Q150_45803824301498893067688144_fmiSetContinuousStates2(
        fmi,
        x,
        size(x, 1))
      annotation (Include="
#ifndef Hacker_Q150_45803824301498893067688144_SetContinuousStates_C
#define Hacker_Q150_45803824301498893067688144_SetContinuousStates_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
void Hacker_Q150_45803824301498893067688144_fmiSetContinuousStates2(void*m, const double*x, size_t nx) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if (a) {
    if(a->currentMode==dyContinuousTimeMode){
      status=a->dyFmiSetContinuousStates(a->m, x, nx);
    }else{
      status=fmiOK;
    }
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"SetContinuousStates failed\");
}
#endif", Library="Hacker_Q150_45", LibraryDirectory="modelica://Hacker_Q150_45_fmu/Resources/Library/FMU/Hacker_Q150_45/binaries");
      annotation (__Dymola_CriticalRegion="Hacker_Q150_45");
    end fmiSetContinuousStates;

    function fmiGetContinuousStates
      input fmiModel fmi;
      input Integer nx;
      output Real x[nx];
      external"C" Hacker_Q150_45803824301498893067688144_fmiGetContinuousStates2(
        fmi,
        x,
        nx)
      annotation (Include="
#ifndef Hacker_Q150_45803824301498893067688144_GetContinuousStates_C
#define Hacker_Q150_45803824301498893067688144_GetContinuousStates_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
void Hacker_Q150_45803824301498893067688144_fmiGetContinuousStates2(void*m, double*x, int nx) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if (a) {
    status=a->dyFmiGetContinuousStates(a->m, x, nx);
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"GetContinuousStates failed\");
}
#endif", Library="Hacker_Q150_45", LibraryDirectory="modelica://Hacker_Q150_45_fmu/Resources/Library/FMU/Hacker_Q150_45/binaries");
      annotation (__Dymola_CriticalRegion="Hacker_Q150_45");
    end fmiGetContinuousStates;

    function fmiCompletedStep
      input fmiModel fmi;
      output Real crossing;
      external"C" crossing = Hacker_Q150_45803824301498893067688144_fmiCompletedStep2(fmi)
      annotation (Include="
#ifndef Hacker_Q150_45803824301498893067688144_CompletedStep_C
#define Hacker_Q150_45803824301498893067688144_CompletedStep_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
double Hacker_Q150_45803824301498893067688144_fmiCompletedStep2(void*m) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if (a) {
    if (a->dyTime>a->dyLastTime) {
      fmiBoolean b=0;
      status=a->dyFmiCompletedIntegratorStep(a->m, &b);
      a->dyLastTime=a->dyTime;
      if (b) a->dyTriggered=1;
    } else status=fmiOK;
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"CompletedIntegratorStep failed\");
  return a->dyTriggered && a->dyTime>=a->dyLastTime;
}
#endif", Library="Hacker_Q150_45", LibraryDirectory="modelica://Hacker_Q150_45_fmu/Resources/Library/FMU/Hacker_Q150_45/binaries");
      annotation (__Dymola_CriticalRegion="Hacker_Q150_45");
    end fmiCompletedStep;

    function CompletedStep
      input fmiModel fmi;
      output Real crossing;
      input Real dummyTime;
      input Real realInputs[:];
      input Integer integerInputs[:];
      input Boolean booleanInputs[:];
      input Integer realInputValueReferences[:];
      input Integer integerInputValueReferences[:];
      input Integer booleanInputValueReferences[:];
    algorithm
      fmiSetReal(fmi,realInputValueReferences,realInputs);
      fmiSetBoolean(fmi,booleanInputValueReferences,booleanInputs);
      fmiSetInteger(fmi,integerInputValueReferences,integerInputs);
      crossing := fmiCompletedStep(fmi);
      annotation(LateInline=true);
    end CompletedStep;

    function fmiEventUpdate
      input fmiModel fmi;
      output Real tnext;
      output Boolean stateReset;
      external"C" stateReset = Hacker_Q150_45803824301498893067688144_fmiEventUpdate2(fmi, tnext)
      annotation(Include="
#ifndef Hacker_Q150_45803824301498893067688144_EventUpdate_C
#define Hacker_Q150_45803824301498893067688144_EventUpdate_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
int Hacker_Q150_45803824301498893067688144_fmiEventUpdate2(void*m, double*tnext){
  struct dy_Extended*a=m;
  fmiEventInfo ev;
  fmiStatus status=fmiFatal;
  ev.nextEventTime=1e37;
  if (a) {
    if(a->currentMode==dyContinuousTimeMode){
      fmiBoolean b;
      status=a->dyFmiCompletedIntegratorStep(a->m, &b);
      a->currentMode=dyEventMode;
    }
    status=a->dyFmiEventUpdate(a->m, 0, &ev);
    a->dyTriggered=0;
    a->dyLastTime=a->dyTime;
  }
  if (ev.terminateSimulation) terminate(\"Terminate signaled by FMU\");
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"EventUpdate failed\");
  *tnext=ev.nextEventTime;
  return ev.stateValuesChanged;
}
#endif", Library="Hacker_Q150_45", LibraryDirectory="modelica://Hacker_Q150_45_fmu/Resources/Library/FMU/Hacker_Q150_45/binaries");
      annotation (__Dymola_CriticalRegion="Hacker_Q150_45");
    end fmiEventUpdate;

    function EventUpdate
      input fmiModel fmi;
      output Real tnext;
      output Boolean stateReset;
      input Real dummyTime;
      input Real realInputs[:];
      input Integer integerInputs[:];
      input Boolean booleanInputs[:];
      input Integer realInputValueReferences[:];
      input Integer integerInputValueReferences[:];
      input Integer booleanInputValueReferences[:];
    algorithm
      fmiSetReal(fmi,realInputValueReferences,realInputs);
      fmiSetBoolean(fmi,booleanInputValueReferences,booleanInputs);
      fmiSetInteger(fmi,integerInputValueReferences,integerInputs);
      (tnext, stateReset) := fmiEventUpdate(fmi);
      annotation(LateInline=true);
    end EventUpdate;

    function fmiInitialize
      input fmiModel fmi;
      output Real tnext;
      output Real initialized=1;
      external"C" tnext = Hacker_Q150_45803824301498893067688144_fmiInitialize2(fmi)
      annotation (Include="
#ifndef Hacker_Q150_45803824301498893067688144_Initialize_C
#define Hacker_Q150_45803824301498893067688144_Initialize_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
double Hacker_Q150_45803824301498893067688144_fmiInitialize2(void*m) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  fmiBoolean toleranceControlled=fmiFalse;
  fmiReal tolerance=0;
  fmiEventInfo ev;
  ev.nextEventTime=1e37;
  if (a) {
    if(a->currentMode == dyInstantiationMode){
      status=a->dyFmiInitialize(a->m, toleranceControlled, tolerance, &ev);
      a->currentMode=dyEventMode;
      a->dyTriggered=0;
      a->dyLastTime=a->dyTime;
      a->dyFirstTimeEvent=ev.nextEventTime;
    }else{
      status=fmiOK;
    }
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"Initialize failed\");
  return a->dyFirstTimeEvent;
}
#endif", Library="Hacker_Q150_45", LibraryDirectory="modelica://Hacker_Q150_45_fmu/Resources/Library/FMU/Hacker_Q150_45/binaries");
      annotation (__Dymola_CriticalRegion="Hacker_Q150_45");
    end fmiInitialize;

    function fmiGetDerivatives
    input fmiModel fmi;
    input Integer nx;
    output Real dx[nx];
    external"C" Hacker_Q150_45803824301498893067688144_fmiGetDerivatives2(
      fmi,
      dx,
      nx)
      annotation (Include="
#ifndef Hacker_Q150_45803824301498893067688144_GetDerivatives_C
#define Hacker_Q150_45803824301498893067688144_GetDerivatives_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
void Hacker_Q150_45803824301498893067688144_fmiGetDerivatives2(void*m,double*dx,int nx) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if (a) {
    status=a->dyFmiGetDerivatives(a->m, dx, nx);
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"GetDerivatives failed\");
}
#endif", Library="Hacker_Q150_45", LibraryDirectory="modelica://Hacker_Q150_45_fmu/Resources/Library/FMU/Hacker_Q150_45/binaries");
      annotation (__Dymola_CriticalRegion="Hacker_Q150_45");
    end fmiGetDerivatives;

    function GetDerivatives
      input fmiModel fmi;
      input Integer nx;
      output Real dx[nx];
      input Real dummyTime;
      input Real realInputs[:];
      input Integer integerInputs[:];
      input Boolean booleanInputs[:];
      input Integer realInputValueReferences[:];
      input Integer integerInputValueReferences[:];
      input Integer booleanInputValueReferences[:];
    algorithm
      fmiSetReal(fmi,realInputValueReferences,realInputs);
      fmiSetBoolean(fmi,booleanInputValueReferences,booleanInputs);
      fmiSetInteger(fmi,integerInputValueReferences,integerInputs);
      dx := fmiGetDerivatives(fmi, nx);
      annotation(LateInline=true);
    end GetDerivatives;

    function fmiGetEventIndicators
      input fmiModel fmi;
      input Integer nz;
      output Real z[nz];
      external"C" Hacker_Q150_45803824301498893067688144_fmiGetEventIndicators2(
        fmi,
        z,
        nz)
      annotation (Include="
#ifndef Hacker_Q150_45803824301498893067688144_GetEventIndicators_C
#define Hacker_Q150_45803824301498893067688144_GetEventIndicators_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
void Hacker_Q150_45803824301498893067688144_fmiGetEventIndicators2(void*m,double*z,int nz) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if (a) {
    status=a->dyFmiGetEventIndicators(a->m, z, nz);
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"GetEventIndicators failed\");
}
#endif", Library="Hacker_Q150_45", LibraryDirectory="modelica://Hacker_Q150_45_fmu/Resources/Library/FMU/Hacker_Q150_45/binaries");
      annotation (__Dymola_CriticalRegion="Hacker_Q150_45");
    end fmiGetEventIndicators;

    function GetEventIndicators
      input fmiModel fmi;
      input Integer nz;
      output Real z[nz];
      input Real dummyTime;
      input Real realInputs[:];
      input Integer integerInputs[:];
      input Boolean booleanInputs[:];
      input Integer realInputValueReferences[:];
      input Integer integerInputValueReferences[:];
      input Integer booleanInputValueReferences[:];
    algorithm
      fmiSetReal(fmi,realInputValueReferences,realInputs);
      fmiSetBoolean(fmi,booleanInputValueReferences,booleanInputs);
      fmiSetInteger(fmi,integerInputValueReferences,integerInputs);
      z := fmiGetEventIndicators(fmi, nz);
      annotation(LateInline=true);
    end GetEventIndicators;

    function GetOutput
      input fmiModel fmi;
      input Real Time;
      input Integer outputValueReference[1];
      output Real outputVariable;
      input Real realInputs[:];
      input Integer integerInputs[:];
      input Boolean booleanInputs[:];
      input Integer realInputValueReferences[:];
      input Integer integerInputValueReferences[:];
      input Integer booleanInputValueReferences[:];
    algorithm
      fmiSetReal(fmi,realInputValueReferences,realInputs);
      fmiSetBoolean(fmi,booleanInputValueReferences,booleanInputs);
      fmiSetInteger(fmi,integerInputValueReferences,integerInputs);
      outputVariable:=fmiGetRealScalar(fmi,outputValueReference[1],1);
      annotation(LateInline=true);
    end GetOutput;

    function fmiSetReal
      input fmiModel fmi;
      input Integer refs[:];
      input Real vals[size(refs, 1)];
      output Real dummy= 1;
      external"C"
                 Hacker_Q150_45803824301498893067688144_fmiSetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals)
        annotation (Include="
#ifndef Hacker_Q150_45803824301498893067688144_SetReal_C
#define Hacker_Q150_45803824301498893067688144_SetReal_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
void Hacker_Q150_45803824301498893067688144_fmiSetReal2(void*m, const int*refs, size_t nrefs, const double*vals) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if(!nrefs){return;}
  if (a) {
    status=a->dyFmiSetReal(a->m, refs, nrefs, vals);
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"SetReal failed\");
}
#endif", Library="Hacker_Q150_45", LibraryDirectory="modelica://Hacker_Q150_45_fmu/Resources/Library/FMU/Hacker_Q150_45/binaries");
      annotation (
        __Dymola_CriticalRegion="Hacker_Q150_45",
        __Dymola_IdemPotent=true,
        __Dymola_VectorizedExceptFirst=true);
    end fmiSetReal;

    function fmiSetRealParam
      input fmiModel fmi;
      input Integer refs[:];
      input Real vals[size(refs, 1)];
    protected
      Real oldVals[size(refs, 1)];
      external"C"
                 Hacker_Q150_45803824301498893067688144_fmiSetRealParam2(
        fmi,
        refs,
        size(refs, 1),
        vals,
        oldVals)
        annotation (Include="
#ifndef Hacker_Q150_45803824301498893067688144_SetRealParam_C
#define Hacker_Q150_45803824301498893067688144_SetRealParam_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
void Hacker_Q150_45803824301498893067688144_fmiSetRealParam2(void*m, const int*refs, size_t nrefs, const double*vals, double*oldVals) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  int i = 0;
  if(!nrefs){return;}
  if (a) {
    if(a->currentMode == dyInstantiationMode){
		status=a->dyFmiSetReal(a->m, refs, nrefs, vals);
    }else{
      status=a->dyFmiGetReal(a->m, refs, nrefs, oldVals);
      for(i=0; i<nrefs;++i){
        if( abs(vals[i]-oldVals[i])> 5e-16){
          ModelicaError(\"SetRealParameter: new parameters with diferent values are being set after initialization, this is not allowed\");
        }
      }
    }
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"SetReal failed\");
}
#endif", Library="Hacker_Q150_45", LibraryDirectory="modelica://Hacker_Q150_45_fmu/Resources/Library/FMU/Hacker_Q150_45/binaries");
      annotation (
        __Dymola_CriticalRegion="Hacker_Q150_45",
        __Dymola_IdemPotent=true,
        __Dymola_VectorizedExceptFirst=true);
    end fmiSetRealParam;

    function fmiGetRealScalar
      input fmiModel fmi;
      input Integer ref;
      input Real dummy;
      output Real val;
    algorithm
        val := scalar(fmiGetReal(fmi, {ref}, dummy));
    end fmiGetRealScalar;

    function fmiGetReal
      input fmiModel fmi;
      input Integer refs[:];
      output Real vals[size(refs, 1)];
      input Real preAvailable;
      external"C" Hacker_Q150_45803824301498893067688144_fmiGetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals)
      annotation (Include="
#ifndef Hacker_Q150_45803824301498893067688144_GetReal_C
#define Hacker_Q150_45803824301498893067688144_GetReal_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
void Hacker_Q150_45803824301498893067688144_fmiGetReal2(void*m, const int*refs, size_t nrefs, double*vals) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if (a) {
    status=a->dyFmiGetReal(a->m, refs, nrefs, vals);
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"GetReal failed\");
}
#endif", Library="Hacker_Q150_45", LibraryDirectory="modelica://Hacker_Q150_45_fmu/Resources/Library/FMU/Hacker_Q150_45/binaries");
      annotation (__Dymola_CriticalRegion="Hacker_Q150_45");
    end fmiGetReal;

    function fmiGetIntegerScalar
      input fmiModel fmi;
      input Integer ref;
      input Integer dummy;
      output Integer val;
    algorithm
        val := scalar(fmiGetInteger(fmi, {ref}, dummy));
    end fmiGetIntegerScalar;

    function fmiGetInteger
      input fmiModel fmi;
      input Integer refs[:];
      output Integer vals[size(refs, 1)];
      input Integer preAvailable;
      external"C" Hacker_Q150_45803824301498893067688144_fmiGetInteger2(
        fmi,
        refs,
        size(refs, 1),
        vals)
      annotation (Include="
#ifndef Hacker_Q150_45803824301498893067688144_GetInteger_C
#define Hacker_Q150_45803824301498893067688144_GetInteger_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
void Hacker_Q150_45803824301498893067688144_fmiGetInteger2(void*m, const int*refs, size_t nrefs, int*vals) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if (a) {
    status=a->dyFmiGetInteger(a->m, refs, nrefs, vals);
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"GetInteger failed\");
}
#endif", Library="Hacker_Q150_45", LibraryDirectory="modelica://Hacker_Q150_45_fmu/Resources/Library/FMU/Hacker_Q150_45/binaries");
      annotation (__Dymola_CriticalRegion="Hacker_Q150_45");
    end fmiGetInteger;

    function fmiSetInteger
    input fmiModel fmi;
      input Integer refs[:];
      input Integer vals[size(refs, 1)];
      output Real dummy= 1;
      external"C" Hacker_Q150_45803824301498893067688144_fmiSetInteger2(
        fmi,
        refs,
        size(refs, 1),
        vals)
        annotation (Include="
#ifndef Hacker_Q150_45803824301498893067688144_SetInteger_C
#define Hacker_Q150_45803824301498893067688144_SetInteger_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
void Hacker_Q150_45803824301498893067688144_fmiSetInteger2(void*m, const int*refs, size_t nrefs, int*vals) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if(!nrefs){return;}
  if (a) {
    status=a->dyFmiSetInteger(a->m, refs, nrefs, vals);
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"SetInteger failed\");
}
#endif", Library="Hacker_Q150_45", LibraryDirectory="modelica://Hacker_Q150_45_fmu/Resources/Library/FMU/Hacker_Q150_45/binaries");
      annotation (
        __Dymola_CriticalRegion="Hacker_Q150_45",
        __Dymola_IdemPotent=true,
        __Dymola_VectorizedExceptFirst=true);
    end fmiSetInteger;

    function fmiSetIntegerParam
    input fmiModel fmi;
      input Integer refs[:];
      input Integer vals[size(refs, 1)];
    protected
      Integer oldVals[size(refs, 1)];
      external"C" Hacker_Q150_45803824301498893067688144_fmiSetIntegerParam2(
        fmi,
        refs,
        size(refs, 1),
        vals,
        oldVals)
        annotation (Include="
#ifndef Hacker_Q150_45803824301498893067688144_SetIntegerParam_C
#define Hacker_Q150_45803824301498893067688144_SetIntegerParam_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
void Hacker_Q150_45803824301498893067688144_fmiSetIntegerParam2(void*m, const int*refs, size_t nrefs, int*vals, int*oldVals) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  int i=0;
  if(!nrefs){return;}
  if (a) {
    if(a->currentMode == dyInstantiationMode){
      status=a->dyFmiSetInteger(a->m, refs, nrefs, vals);
    }else{
      status=a->dyFmiGetInteger(a->m, refs, nrefs, oldVals);
      for(i = 0; i< nrefs; ++i){
        if(vals[i]!=oldVals[i]){
          ModelicaError(\"SetIntegerParameter: new parameters with diferent values are being set after initialization, this is not allowed\");
        }
      }
    }
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"SetInteger failed\");
}
#endif", Library="Hacker_Q150_45", LibraryDirectory="modelica://Hacker_Q150_45_fmu/Resources/Library/FMU/Hacker_Q150_45/binaries");
      annotation (
        __Dymola_CriticalRegion="Hacker_Q150_45",
        __Dymola_IdemPotent=true,
        __Dymola_VectorizedExceptFirst=true);
    end fmiSetIntegerParam;

    function fmiGetBooleanScalar
      input fmiModel fmi;
      input Integer ref;
      input Integer dummy;
      output Boolean val;
    algorithm
        val := scalar(fmiGetBoolean(fmi, {ref}, dummy));
    end fmiGetBooleanScalar;

    function fmiGetBoolean
      input fmiModel fmi;
      input Integer refs[:];
      output Boolean vals[size(refs, 1)];
      input Integer preAvailable;
      external"C" Hacker_Q150_45803824301498893067688144_fmiGetBoolean2(
        fmi,
        refs,
        size(refs, 1),
        vals)
        annotation (Include="
#ifndef Hacker_Q150_45803824301498893067688144_GetBoolean_C
#define Hacker_Q150_45803824301498893067688144_GetBoolean_C 1
#include \"FMI/fmiImport.h\"
void Hacker_Q150_45803824301498893067688144_fmiGetBoolean2(void*m, const int* refs, size_t nr, int* vals) {
  int i;
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if (a) {
    status=a->dyFmiGetBoolean(a->m, refs, nr, (fmiBoolean*)(vals));
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"GetBoolean failed\");
  for(i=nr-1;i>=0;i--) vals[i]=((fmiBoolean*)(vals))[i];
}
#endif", Library="Hacker_Q150_45", LibraryDirectory="modelica://Hacker_Q150_45_fmu/Resources/Library/FMU/Hacker_Q150_45/binaries");
      annotation (__Dymola_CriticalRegion="Hacker_Q150_45");
    end fmiGetBoolean;

    function fmiSetBoolean
      input fmiModel fmi;
      input Integer refs[:];
      input Boolean vals[size(refs, 1)];
      output Real dummy2= 1;
    protected
      Boolean dummy[size(refs, 1)];
      external"C" Hacker_Q150_45803824301498893067688144_fmiSetBoolean2(
        fmi,
        refs,
        size(refs, 1),
        vals,
        dummy)
        annotation (Include="
#ifndef Hacker_Q150_45803824301498893067688144_SetBoolean_C
#define Hacker_Q150_45803824301498893067688144_SetBoolean_C 1
#include \"FMI/fmiImport.h\"
void Hacker_Q150_45803824301498893067688144_fmiSetBoolean2(void*m, const int* refs, size_t nr, const int* vals,int*dummy) {
  int i;
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if(!nr){return;}
  for(i=0;i<nr;++i) ((fmiBoolean*)(dummy))[i]=vals[i];
  if (a) {
    status=a->dyFmiSetBoolean(a->m, refs, nr, (fmiBoolean*)(dummy));
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"SetBoolean failed\");
}
#endif", Library="Hacker_Q150_45", LibraryDirectory="modelica://Hacker_Q150_45_fmu/Resources/Library/FMU/Hacker_Q150_45/binaries");
      annotation (
        __Dymola_CriticalRegion="Hacker_Q150_45",
        __Dymola_IdemPotent=true,
        __Dymola_VectorizedExceptFirst=true);
    end fmiSetBoolean;

    function fmiSetBooleanParam
      input fmiModel fmi;
      input Integer refs[:];
      input Boolean vals[size(refs, 1)];
    protected
      Boolean dummy[size(refs, 1)];
      Boolean oldVals[size(refs, 1)];
      external"C" Hacker_Q150_45803824301498893067688144_fmiSetBooleanParam2(
      fmi,
        refs,
        size(refs, 1),
        vals,
        dummy,
        oldVals)
        annotation (Include="
#ifndef Hacker_Q150_45803824301498893067688144_SetBooleanParam_C
#define Hacker_Q150_45803824301498893067688144_SetBooleanParam_C 1
#include \"FMI/fmiImport.h\"
void Hacker_Q150_45803824301498893067688144_fmiSetBooleanParam2(void*m, const int* refs, size_t nr, const int* vals,int*dummy,int*oldVals) {
  int i;
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if(!nr){return;}
  for(i=0;i<nr;++i) ((fmiBoolean*)(dummy))[i]=vals[i];
  if (a) {
    if(a->currentMode == dyInstantiationMode){
      status=a->dyFmiSetBoolean(a->m, refs, nr, (fmiBoolean*)(dummy));
    }else{
      status=a->dyFmiGetBoolean(a->m, refs, nr, (fmiBoolean*)(oldVals));
      for(i=nr-1;i>=0;i--){
        oldVals[i]=((fmiBoolean*)(oldVals))[i];
        if(oldVals[i]!=dummy[i]){
          ModelicaError(\"SetIntegerParameter: new parameters with diferent values are being set after initialization, this is not allowed\");
        }
      }
    }
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"SetBoolean failed\");
}
#endif", Library="Hacker_Q150_45", LibraryDirectory="modelica://Hacker_Q150_45_fmu/Resources/Library/FMU/Hacker_Q150_45/binaries");
      annotation (
        __Dymola_CriticalRegion="Hacker_Q150_45",
        __Dymola_IdemPotent=true,
        __Dymola_VectorizedExceptFirst=true);
    end fmiSetBooleanParam;

    function fmiGetString
      input fmiModel fmi;
      input Integer refs[:];
      output String vals[size(refs, 1)];
      input Integer preAvailable;
      external"C" Hacker_Q150_45803824301498893067688144_fmiGetString2(
        fmi,
        refs,
        size(refs, 1),
        vals)
      annotation (Include="
#ifndef Hacker_Q150_45803824301498893067688144_GetString_C
#define Hacker_Q150_45803824301498893067688144_GetString_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
void Hacker_Q150_45803824301498893067688144_fmiGetString2(void*m, const int*refs, size_t nrefs, fmiString* vals) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if (a) {
    status=a->dyFmiGetString(a->m, refs, nrefs, vals);
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"StringInteger failed\");
}
#endif", Library="Hacker_Q150_45", LibraryDirectory="modelica://Hacker_Q150_45_fmu/Resources/Library/FMU/Hacker_Q150_45/binaries");
      annotation (__Dymola_CriticalRegion="Hacker_Q150_45");
    end fmiGetString;

    function fmiSetString
    input fmiModel fmi;
      input Integer refs[:];
      input String vals[size(refs, 1)];
      external"C" Hacker_Q150_45803824301498893067688144_fmiSetString2(
        fmi,
        refs,
        size(refs, 1),
        vals)
        annotation (Include="
#ifndef Hacker_Q150_45803824301498893067688144_SetString_C
#define Hacker_Q150_45803824301498893067688144_SetString_C 1
#include \"FMI/fmiImport.h\"
#include <stdlib.h>
void Hacker_Q150_45803824301498893067688144_fmiSetString2(void*m, const int*refs, size_t nrefs, const fmiString vals[]) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if(!nrefs){return;}
  if (a) {
    status=a->dyFmiSetString(a->m, refs, nrefs, vals);
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"SetString failed\");
}
#endif", Library="Hacker_Q150_45", LibraryDirectory="modelica://Hacker_Q150_45_fmu/Resources/Library/FMU/Hacker_Q150_45/binaries");
      annotation (
        __Dymola_CriticalRegion="Hacker_Q150_45",
        __Dymola_IdemPotent=true,
        __Dymola_VectorizedExceptFirst=true);
    end fmiSetString;

    function fmiSetStringParam
    input fmiModel fmi;
      input Integer refs[:];
      input String vals[size(refs, 1)];
      external"C" Hacker_Q150_45803824301498893067688144_fmiSetStringParam2(
        fmi,
        refs,
        size(refs, 1),
        vals)
        annotation (Include="
#ifndef Hacker_Q150_45803824301498893067688144_SetStringParam_C
#define Hacker_Q150_45803824301498893067688144_SetStringParam_C 1
#include \"FMI/fmiImport.h\"
#include <stdlib.h>
void Hacker_Q150_45803824301498893067688144_fmiSetStringParam2(void*m, const int*refs, size_t nrefs, const fmiString vals[]) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if(!nrefs){return;}
  if (a) {
    if(a->currentMode == dyInstantiationMode){
		status=a->dyFmiSetString(a->m, refs, nrefs, vals);
    }else{
      status=fmiOK;
    }
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"SetString failed\");
}
#endif", Library="Hacker_Q150_45", LibraryDirectory="modelica://Hacker_Q150_45_fmu/Resources/Library/FMU/Hacker_Q150_45/binaries");
      annotation (
        __Dymola_CriticalRegion="Hacker_Q150_45",
        __Dymola_IdemPotent=true,
        __Dymola_VectorizedExceptFirst=true);
    end fmiSetStringParam;

    function noHysteresis
      input Real x;
      output Real y;
    algorithm
      y:=x+(if (x < 0) then -1 else 1);
    end noHysteresis;
end fmi_Functions;
equation
  when initial() then
    fmi = fmi_Functions.fmiModel(fmi_instanceName, fmi_loggingOn);
  end when;
  fmi_StepEvent = fmi_Functions.CompletedStep(fmi, myTime, {omega, tau}, fill(0,0), {rotationCW}, {352321537, 352321538}, fill(0,0), {352321536})>0.5;
  der(fmi_x) = fmi_Functions.GetDerivatives(fmi, size(fmi_x, 1), myTime, {omega, tau}, fill(0,0), {rotationCW}, {352321537, 352321538}, fill(0,0), {352321536});
  fmi_z  = fmi_Functions.GetEventIndicators(fmi, fmi_NumberOfEventIndicators, myTime, {omega, tau}, fill(0,0), {rotationCW}, {352321537, 352321538}, fill(0,0), {352321536});
  for i in 1:size(fmi_z,1) loop
    fmi_z_positive[i] = fmi_Functions.noHysteresis(fmi_z[i]) > 0;
  end for;
  when cat(1, change(fmi_z_positive), {time>=pre(fmi_TNext), fmi_StepEvent, not initial()}) then
    (fmi_TNext, fmi_NewStates) =  fmi_Functions.EventUpdate(fmi, myTime, {omega, tau}, fill(0,0), {rotationCW}, {352321537, 352321538}, fill(0,0), {352321536});
    fmi_NewStates2 = if fmi_NewStates then not pre(fmi_NewStates2) else pre(fmi_NewStates2);
  end when;
  for i in 1:size(fmi_x,1) loop
    when {fmi_NewStates2, not fmi_NewStates2} then
      reinit(fmi_x[i], fmi_Functions.fmiGetContinuousStates(fmi, size(fmi_x,1))*{if i==j then 1 else 0 for j in 1:size(fmi_x,1)});
    end when;
  end for;
algorithm
  fmi_Functions.fmiSetTime(fmi, time);
  myTime := time;
  fmi_Functions.fmiSetContinuousStates(fmi, fmi_x);
initial algorithm
 // 0 Real parameters
 // 23 Real start values
  fmi_Functions.fmiSetRealParam(fmi, {33554433, 33554434, 905969831, 33554456, 33554457, 33554458, 33554459, 33554460, 33554444, 637534672, 637534673, 637534705, 637534706, 33554445, 33554446, 33554447, 33554448, 33554449, 33554450, 33554451, 33554453, 33554454, 33554455}, {drive.machine.coreElement.damper._w_rel_start, drive.machine.coreElement.overallInductance._i_start, drive.inertia._phi_start, batteryPack.cell.thermalModel.'coreHeatCapacitor[1]'._T_start, batteryPack.cell.thermalModel.'coreHeatCapacitor[2]'._T_start, batteryPack.cell.thermalModel.'coreHeatCapacitor[3]'._T_start, batteryPack.cell.thermalModel.'coreHeatCapacitor[4]'._T_start, batteryPack.cell.thermalModel.'coreHeatCapacitor[5]'._T_start, batteryPack.cell.electricModel._SOC_start, batteryPack.cell.agingModel.cycleAging._SOH_start, batteryPack.cell.agingModel.cycleAging._SOHR_start, batteryPack.cell.agingModel.cycleAging._R_growth_rel_start, batteryPack.cell.agingModel.cycleAging._C_loss_rel_start, batteryPack.cell.agingModel.cycleAging._cycleTime_start, batteryPack.cell.agingModel.cycleAging._chargeAh_cycle_start, batteryPack.cell.agingModel.cycleAging._chargeAh_total_start, batteryPack.cell.agingModel.cycleAging._DOD_cycle_start, batteryPack.cell.agingModel.cycleAging._DOC_cycle_start, batteryPack.cell.agingModel.cycleAging._OCV_meanCounter_start, batteryPack.cell.agingModel.cycleAging._fullCycles_start, batteryPack.cell.agingModel.calendarAging._SOH_start, batteryPack.cell.agingModel.calendarAging._SOHR_start, batteryPack.cell.agingModel.calendarAging._ageOfCell_start});
 // 0 Integer parameters
 // 0 Integer start values
 // 0 Boolean parameters
 // 1 Boolean start values
  fmi_Functions.fmiSetBooleanParam(fmi, {637534710}, {batteryPack.cell.agingModel.cycleAging._discharging_start});
 // 0 Enumeration parameters
 // 0 Enumeration start values
 // 0 String parameters
 // Set InitalInputs
fmi_Functions.fmiSetReal(fmi, {352321537, 352321538}, {_omega_start, _tau_start});
fmi_Functions.fmiSetBoolean(fmi, {352321536}, {_rotationCW_start});
  fmi_Functions.fmiSetTime(fmi, time);
  (fmi_TNext_Start,fmi_Initialized) :=fmi_Functions.fmiInitialize(fmi);
  fmi_x :=fmi_Functions.fmiGetContinuousStates(fmi, size(fmi_x, 1));
initial equation
 // 4 Real Dependent Parameters
{batteryPack.cell.electricModel.ocv.singleTable.tableLookup.'u_min[1]', batteryPack.cell.electricModel.ocv.singleTable.tableLookup.'u_min[2]', batteryPack.cell.electricModel.ocv.singleTable.tableLookup.'u_max[1]', batteryPack.cell.electricModel.ocv.singleTable.tableLookup.'u_max[2]'} = fmi_Functions.fmiGetReal(fmi, {100666242, 100666243, 100666244, 100666245}, fmi_Initialized);
 // 3 Integer Dependent Parameters
{batteryPack.cell.electricModel.ocv.singleTable.tableLookup.tableID.id, batteryPack.cell.agingModel.calendarAging.C_fadeFactorTable.externalTable.id, batteryPack.cell.agingModel.calendarAging.R_increaseFactorTable.externalTable.id} = fmi_Functions.fmiGetInteger(fmi, {100666246, 100663854, 100663861}, integer(fmi_Initialized));
 // 0 Boolean Dependent Parameters
 // 0 Enumeration Dependent Parameters
 // 0 String Dependent Parameters
equation
    tau_out =  fmi_Functions.GetOutput(fmi,myTime,{335544320}, {tau},fill(0,0), fill(false,0), {352321538}, fill(0,0), fill(0,0));
    omega_out =  fmi_Functions.GetOutput(fmi,myTime,{335544321}, fill(0.0,0),fill(0,0), fill(false,0), fill(0,0), fill(0,0), fill(0,0));
    CPUtime =  fmi_Functions.GetOutput(fmi,myTime,{67108866}, fill(0.0,0),fill(0,0), fill(false,0), fill(0,0), fill(0,0), fill(0,0));
    EventCounter =  fmi_Functions.GetOutput(fmi,myTime,{67108867}, fill(0.0,0),fill(0,0), fill(false,0), fill(0,0), fill(0,0), fill(0,0));
{drive.dutyCycleIn, drive.tau, drive.w1, drive.tau1, drive.controller.dutyCycleOut, drive.controller.dutyCycleIn, drive.controller.bldcBus.airgapTorque, drive.controller.bldcBus.currentAC_Averaged, drive.controller.bldcBus.currentDC, drive.controller.bldcBus.electricMachinePower, drive.controller.bldcBus.innerMechanicPower, drive.controller.bldcBus.innerTorque, drive.controller.bldcBus.machineAngle, drive.controller.bldcBus.machineSpeed, drive.controller.bldcBus.voltageDC, drive.modulation.dutyCycleIn, drive.modulation.dutyCycleOut, drive.modulation.bldcBus.airgapTorque, drive.modulation.bldcBus.currentAC_Averaged, drive.modulation.bldcBus.currentDC, drive.modulation.bldcBus.electricMachinePower, drive.modulation.bldcBus.innerMechanicPower, drive.modulation.bldcBus.innerTorque, drive.modulation.bldcBus.machineAngle, drive.modulation.bldcBus.machineSpeed, drive.modulation.bldcBus.voltageDC, drive.inverter.dutyCycleIn, drive.inverter.pin_p.v, drive.inverter.pin_p.i, drive.inverter.pin_n.i, drive.inverter.bldcBus.airgapTorque, drive.inverter.bldcBus.currentAC_Averaged, drive.inverter.bldcBus.currentDC, drive.inverter.bldcBus.electricMachinePower, drive.inverter.bldcBus.innerMechanicPower, drive.inverter.bldcBus.innerTorque, drive.inverter.bldcBus.machineAngle, drive.inverter.bldcBus.machineSpeed, drive.inverter.bldcBus.voltageDC, drive.inverter.pin_p_Out.v, drive.inverter.pin_p_Out.i, drive.inverter.pin_n_Out.i, drive.inverter.coreElement.dutyCycle, drive.inverter.coreElement.uniOrBidirectional.u, drive.inverter.coreElement.uniOrBidirectional.y, drive.inverter.coreElement.uniOrBidirectional.gradient.u, drive.inverter.coreElement.uniOrBidirectional.gradient.y, drive.inverter.coreElement.uniOrBidirectional.add.u2, drive.inverter.coreElement.uniOrBidirectional.add.y, drive.inverter.coreElement.uniOrBidirectional.limiter.u, drive.inverter.coreElement.uniOrBidirectional.limiter.y, drive.inverter.coreElement.uniOrBidirectional.limiter.simplifiedExpr, drive.inverter.coreElement.idealBuckConverter.v1, drive.inverter.coreElement.idealBuckConverter.v2, drive.inverter.coreElement.idealBuckConverter.i1, drive.inverter.coreElement.idealBuckConverter.i2, drive.inverter.coreElement.idealBuckConverter.dutyCycle, drive.inverter.coreElement.idealBuckConverter.p1.v, drive.inverter.coreElement.idealBuckConverter.p1.i, drive.inverter.coreElement.idealBuckConverter.n1.i, drive.inverter.coreElement.idealBuckConverter.p2.v, drive.inverter.coreElement.idealBuckConverter.p2.i, drive.inverter.coreElement.idealBuckConverter.n2.i, drive.inverter.coreElement.pin_p_supply.v, drive.inverter.coreElement.pin_p_supply.i, drive.inverter.coreElement.pin_n_supply.i, drive.inverter.coreElement.pin_p.v, drive.inverter.coreElement.pin_p.i, drive.inverter.coreElement.pin_n.i, drive.inverter.coreElement.signChanger.y, drive.inverter.coreElement.'product'.u1, drive.inverter.coreElement.'product'.u2, drive.inverter.coreElement.'product'.y, drive.inverter.currentSensorDC.i, drive.inverter.currentSensorDC.p.v, drive.inverter.currentSensorDC.p.i, drive.inverter.currentSensorDC.n.v, drive.inverter.currentSensorDC.n.i, drive.inverter.currentDC.u, drive.inverter.currentDC.bldcBus.currentDC, drive.inverter.currentDC.bldcBus.airgapTorque, drive.inverter.currentDC.bldcBus.currentAC_Averaged, drive.inverter.currentDC.bldcBus.electricMachinePower, drive.inverter.currentDC.bldcBus.innerMechanicPower, drive.inverter.currentDC.bldcBus.innerTorque, drive.inverter.currentDC.bldcBus.machineAngle, drive.inverter.currentDC.bldcBus.machineSpeed, drive.inverter.currentDC.bldcBus.voltageDC, drive.inverter.currentSensorAC.i, drive.inverter.currentSensorAC.p.v, drive.inverter.currentSensorAC.p.i, drive.inverter.currentSensorAC.n.v, drive.inverter.currentSensorAC.n.i, drive.inverter.currentAC_Averaged.u, drive.inverter.currentAC_Averaged.bldcBus.currentAC_Averaged, drive.inverter.currentAC_Averaged.bldcBus.airgapTorque, drive.inverter.currentAC_Averaged.bldcBus.currentDC, drive.inverter.currentAC_Averaged.bldcBus.electricMachinePower, drive.inverter.currentAC_Averaged.bldcBus.innerMechanicPower, drive.inverter.currentAC_Averaged.bldcBus.innerTorque} = fmi_Functions.fmiGetReal(fmi, {637534380, 436207618, 335544321, 335544320, 637534380, 637534380, 369101904, 905969700, 637534382, 637537361, 637537362, 637537363, 905969831, 369101908, 637534381, 637534380, 637534380, 369101904, 905969700, 637534382, 637537361, 637537362, 637537363, 905969831, 369101908, 637534381, 637534380, 637534381, 637534382, 637534508, 369101904, 905969700, 637534382, 637537361, 637537362, 637537363, 905969831, 369101908, 637534381, 637534214, 100663323, 33554434, 637534380, 637534380, 637534217, 637534380, 637534380, 637534380, 637534380, 637534380, 637534217, 637534380, 637534381, 637534214, 637534382, 100663323, 637534238, 637534381, 637534382, 637534508, 637534214, 100663323, 33554434, 637534381, 637534382, 637534508, 637534214, 100663323, 33554434, 637534241, 637534217, 637534241, 637534238, 637534382, 637534381, 637534382, 637534381, 637534508, 637534382, 637534382, 369101904, 905969700, 637537361, 637537362, 637537363, 905969831, 369101908, 637534381, 33554434, 637534214, 33554434, 637534214, 100663323, 905969700, 905969700, 369101904, 637534382, 637537361, 637537362, 637537363}, myTime);
{drive.inverter.currentAC_Averaged.bldcBus.machineAngle, drive.inverter.currentAC_Averaged.bldcBus.machineSpeed, drive.inverter.currentAC_Averaged.bldcBus.voltageDC, drive.inverter.voltageChanger.y, drive.inverter.'product'.u1, drive.inverter.'product'.u2, drive.inverter.'product'.y, drive.inverter.voltageSensorDC.v, drive.inverter.voltageSensorDC.p.v, drive.inverter.voltageDC.u, drive.inverter.voltageDC.bldcBus.voltageDC, drive.inverter.voltageDC.bldcBus.airgapTorque, drive.inverter.voltageDC.bldcBus.currentAC_Averaged, drive.inverter.voltageDC.bldcBus.currentDC, drive.inverter.voltageDC.bldcBus.electricMachinePower, drive.inverter.voltageDC.bldcBus.innerMechanicPower, drive.inverter.voltageDC.bldcBus.innerTorque, drive.inverter.voltageDC.bldcBus.machineAngle, drive.inverter.voltageDC.bldcBus.machineSpeed, drive.multiSensorMotor.power, drive.multiSensorMotor.w, drive.multiSensorMotor.tau, drive.multiSensorMotor.flange_a.phi, drive.multiSensorMotor.flange_a._phi_der, drive.multiSensorMotor.flange_a.tau, drive.multiSensorMotor.flange_b.phi, drive.multiSensorMotor.flange_b.tau, drive.machine.bldcBus.airgapTorque, drive.machine.bldcBus.currentAC_Averaged, drive.machine.bldcBus.currentDC, drive.machine.bldcBus.electricMachinePower, drive.machine.bldcBus.innerMechanicPower, drive.machine.bldcBus.innerTorque, drive.machine.bldcBus.machineAngle, drive.machine.bldcBus.machineSpeed, drive.machine.bldcBus.voltageDC, drive.machine.flange.phi, drive.machine.flange.tau, drive.machine.pin_p.v, drive.machine.pin_p.i, drive.machine.pin_n.i, drive.machine.powerBalance.electricMachinePower, drive.machine.powerBalance.innerMachinePower, drive.machine.powerBalance.rotorInertiaPower, drive.machine.powerBalance.totalLossPower, drive.machine.powerBalance.statorWindingLossPower, drive.machine.powerBalance.frictionLossPower, drive.machine.coreElement.w, drive.machine.coreElement.v, drive.machine.coreElement.innerTorque, drive.machine.coreElement.airgapTorque, drive.machine.coreElement.flange.phi, drive.machine.coreElement.flange._phi_der, drive.machine.coreElement.flange.tau, drive.machine.coreElement.pin_p.v, drive.machine.coreElement.pin_p.i, drive.machine.coreElement.pin_n.i, drive.machine.coreElement.resistor.v, drive.machine.coreElement.resistor.i, drive.machine.coreElement.resistor.LossPower, drive.machine.coreElement.resistor.p.v, drive.machine.coreElement.resistor.p.i, drive.machine.coreElement.resistor.n.v, drive.machine.coreElement.resistor.n.i, drive.machine.coreElement.backEMF.v, drive.machine.coreElement.backEMF.i, drive.machine.coreElement.backEMF.phi, drive.machine.coreElement.backEMF._phi_der, drive.machine.coreElement.backEMF.w, drive.machine.coreElement.backEMF.tau, drive.machine.coreElement.backEMF.tauElectrical, drive.machine.coreElement.backEMF.p.v, drive.machine.coreElement.backEMF.p.i, drive.machine.coreElement.backEMF.n.i, drive.machine.coreElement.backEMF.flange.phi, drive.machine.coreElement.backEMF.flange.tau, drive.machine.coreElement.backEMF.support.tau, drive.machine.coreElement.backEMF.internalSupport.tau, drive.machine.coreElement.backEMF.internalSupport.flange.tau, drive.machine.coreElement.inertiaRotor.phi, drive.machine.coreElement.inertiaRotor._phi_der, drive.machine.coreElement.inertiaRotor.w, drive.machine.coreElement.inertiaRotor._w_der, drive.machine.coreElement.inertiaRotor.a, drive.machine.coreElement.inertiaRotor.flange_a.phi, drive.machine.coreElement.inertiaRotor.flange_a.tau, drive.machine.coreElement.inertiaRotor.flange_b.phi, drive.machine.coreElement.inertiaRotor.flange_b.tau, drive.machine.coreElement.damper.phi_rel, drive.machine.coreElement.damper._phi_rel_der, drive.machine.coreElement.damper.w_rel, drive.machine.coreElement.damper._w_rel_der, drive.machine.coreElement.damper.a_rel, drive.machine.coreElement.damper.tau, drive.machine.coreElement.damper.lossPower, drive.machine.coreElement.damper.flange_a.phi, drive.machine.coreElement.damper.flange_a.tau, drive.machine.coreElement.damper.flange_b.tau, drive.machine.coreElement.fixed.flange.tau, drive.machine.coreElement.airGapSensor.tau} = fmi_Functions.fmiGetReal(fmi, {905969831, 369101908, 637534381, 905969701, 100663334, 905969701, 905969703, 637534381, 637534381, 637534381, 637534381, 369101904, 905969700, 637534382, 637537361, 637537362, 637537363, 905969831, 369101908, 905969707, 369098920, 369098842, 905969831, 369098920, 369098842, 905969831, 369098915, 369101904, 905969700, 637534382, 637537361, 637537362, 637537363, 905969831, 369101908, 637534381, 905969831, 369098842, 637534214, 33554434, 100663323, 637537361, 637537362, 905969741, 905969742, 905969743, 905969744, 369098920, 637534214, 637534340, 369098886, 905969831, 369098920, 369098842, 637534214, 33554434, 100663323, 637534303, 33554434, 905969743, 637534214, 33554434, 637534304, 100663323, 637534311, 33554434, 905969831, 369098920, 369098920, 369098885, 369101904, 637534311, 33554434, 100663323, 905969831, 369098885, 369101904, 369101904, 369101904, 905969831, 369098920, 369098920, 369098921, 369098921, 905969831, 369101904, 905969831, 369098860, 33554432, 587202560, 33554433, 318767105, 318767105, 369098863, 905969744, 905969831, 369098864, 369098863, 905969795, 369101904}, myTime);
{drive.machine.coreElement.airGapSensor.flange_a.phi, drive.machine.coreElement.airGapSensor.flange_a.tau, drive.machine.coreElement.airGapSensor.flange_b.phi, drive.machine.coreElement.airGapSensor.flange_b.tau, drive.machine.coreElement.innerTorqueComp.y, drive.machine.coreElement.overallInductance.v, drive.machine.coreElement.overallInductance.i, drive.machine.coreElement.overallInductance._i_der, drive.machine.coreElement.overallInductance.p.v, drive.machine.coreElement.overallInductance.p.i, drive.machine.coreElement.overallInductance.n.v, drive.machine.coreElement.overallInductance.n.i, drive.machine.torqueSensor.tau, drive.machine.torqueSensor.flange_a.phi, drive.machine.torqueSensor.flange_a.tau, drive.machine.torqueSensor.flange_b.phi, drive.machine.torqueSensor.flange_b.tau, drive.machine.signChange.u, drive.machine.signChange.y, drive.machine.innerPower.u1, drive.machine.innerPower.u2, drive.machine.innerPower.y, drive.machine.innerMachinePower.u, drive.machine.innerMachinePower.bldcBus.innerMechanicPower, drive.machine.innerMachinePower.bldcBus.airgapTorque, drive.machine.innerMachinePower.bldcBus.currentAC_Averaged, drive.machine.innerMachinePower.bldcBus.currentDC, drive.machine.innerMachinePower.bldcBus.electricMachinePower, drive.machine.innerMachinePower.bldcBus.innerTorque, drive.machine.innerMachinePower.bldcBus.machineAngle, drive.machine.innerMachinePower.bldcBus.machineSpeed, drive.machine.innerMachinePower.bldcBus.voltageDC, drive.machine.electricMachinePower.u, drive.machine.electricMachinePower.bldcBus.electricMachinePower, drive.machine.electricMachinePower.bldcBus.airgapTorque, drive.machine.electricMachinePower.bldcBus.currentAC_Averaged, drive.machine.electricMachinePower.bldcBus.currentDC, drive.machine.electricMachinePower.bldcBus.innerMechanicPower, drive.machine.electricMachinePower.bldcBus.innerTorque, drive.machine.electricMachinePower.bldcBus.machineAngle, drive.machine.electricMachinePower.bldcBus.machineSpeed, drive.machine.electricMachinePower.bldcBus.voltageDC, drive.machine.powerSensor.power, drive.machine.powerSensor.pc.v, drive.machine.powerSensor.pc.i, drive.machine.powerSensor.nc.v, drive.machine.powerSensor.nc.i, drive.machine.powerSensor.pv.v, drive.machine.powerSensor.voltageSensor.v, drive.machine.powerSensor.voltageSensor.p.v, drive.machine.powerSensor.currentSensor.i, drive.machine.powerSensor.currentSensor.p.v, drive.machine.powerSensor.currentSensor.p.i, drive.machine.powerSensor.currentSensor.n.v, drive.machine.powerSensor.currentSensor.n.i, drive.machine.powerSensor.'product'.u1, drive.machine.powerSensor.'product'.u2, drive.machine.powerSensor.'product'.y, drive.machine.innerTorque.u, drive.machine.innerTorque.bldcBus.innerTorque, drive.machine.innerTorque.bldcBus.airgapTorque, drive.machine.innerTorque.bldcBus.currentAC_Averaged, drive.machine.innerTorque.bldcBus.currentDC, drive.machine.innerTorque.bldcBus.electricMachinePower, drive.machine.innerTorque.bldcBus.innerMechanicPower, drive.machine.innerTorque.bldcBus.machineAngle, drive.machine.innerTorque.bldcBus.machineSpeed, drive.machine.innerTorque.bldcBus.voltageDC, drive.machine.airGapTorque.u, drive.machine.airGapTorque.bldcBus.airgapTorque, drive.machine.airGapTorque.bldcBus.currentAC_Averaged, drive.machine.airGapTorque.bldcBus.currentDC, drive.machine.airGapTorque.bldcBus.electricMachinePower, drive.machine.airGapTorque.bldcBus.innerMechanicPower, drive.machine.airGapTorque.bldcBus.innerTorque, drive.machine.airGapTorque.bldcBus.machineAngle, drive.machine.airGapTorque.bldcBus.machineSpeed, drive.machine.airGapTorque.bldcBus.voltageDC, drive.machine.angleSensorIdeal.phi_rel, drive.machine.angleSensorIdeal.flange_b.phi, drive.machine.speedSensor.phi_rel, drive.machine.speedSensor._phi_rel_der, drive.machine.speedSensor.w_rel, drive.machine.speedSensor.flange_b.phi, drive.machine.machineAngle.u, drive.machine.machineAngle.bldcBus.machineAngle, drive.machine.machineAngle.bldcBus.airgapTorque, drive.machine.machineAngle.bldcBus.currentAC_Averaged, drive.machine.machineAngle.bldcBus.currentDC, drive.machine.machineAngle.bldcBus.electricMachinePower, drive.machine.machineAngle.bldcBus.innerMechanicPower, drive.machine.machineAngle.bldcBus.innerTorque, drive.machine.machineAngle.bldcBus.machineSpeed, drive.machine.machineAngle.bldcBus.voltageDC, drive.machine.machineSpeed.u, drive.machine.machineSpeed.bldcBus.machineSpeed, drive.machine.machineSpeed.bldcBus.airgapTorque, drive.machine.machineSpeed.bldcBus.currentAC_Averaged, drive.machine.machineSpeed.bldcBus.currentDC, drive.machine.machineSpeed.bldcBus.electricMachinePower} = fmi_Functions.fmiGetReal(fmi, {905969831, 369101904, 905969831, 369098885, 637534340, 637534343, 33554434, 587202562, 637534304, 33554434, 637534311, 100663323, 369098915, 905969831, 369098915, 905969831, 369098842, 637534340, 637534348, 335544321, 637534348, 587202564, 637537362, 637537362, 369101904, 905969700, 637534382, 637537361, 637537363, 905969831, 369101908, 637534381, 637537361, 637537361, 369101904, 905969700, 637534382, 637537362, 637537363, 905969831, 369101908, 637534381, 637537361, 637534214, 33554434, 637534214, 100663323, 637534214, 637534214, 637534214, 33554434, 637534214, 33554434, 637534214, 100663323, 637534355, 100663334, 587202563, 637537363, 637537363, 369101904, 905969700, 637534382, 637537361, 637537362, 905969831, 369101908, 637534381, 369101904, 369101904, 905969700, 637534382, 637537361, 637537362, 637537363, 905969831, 369101908, 637534381, 905969831, 905969831, 905969831, 369098920, 369098920, 905969831, 905969831, 905969831, 369101904, 905969700, 637534382, 637537361, 637537362, 637537363, 369101908, 637534381, 369101908, 369101908, 369101904, 905969700, 637534382, 637537361}, myTime);
{drive.machine.machineSpeed.bldcBus.innerMechanicPower, drive.machine.machineSpeed.bldcBus.innerTorque, drive.machine.machineSpeed.bldcBus.machineAngle, drive.machine.machineSpeed.bldcBus.voltageDC, drive.ground.p.i, drive.speedDependentTorque.tau, drive.speedDependentTorque.flange.phi, drive.speedDependentTorque.flange.tau, drive.inertia.phi, drive.inertia._phi_der, drive.inertia.w, drive.inertia._w_der, drive.inertia.a, drive.inertia.flange_a.phi, drive.inertia.flange_a.tau, drive.inertia.flange_b.phi, drive.inertia.flange_b.tau, drive.multiSensorLoad.power, drive.multiSensorLoad.w, drive.multiSensorLoad.tau, drive.multiSensorLoad.flange_a.phi, drive.multiSensorLoad.flange_a._phi_der, drive.multiSensorLoad.flange_a.tau, drive.multiSensorLoad.flange_b.phi, drive.multiSensorLoad.flange_b.tau, drive.pin_p.v, drive.pin_p.i, drive.pin_n.i, drive.machineAnalyser.powerEfficiencyLimited, drive.machineAnalyser.powerEfficiency, drive.machineAnalyser.energyEfficiency, drive.machineAnalyser.motorEnergyEfficiency, drive.machineAnalyser.generatorEnergyEfficiency, drive.machineAnalyser.generatedElectricPower.u1, drive.machineAnalyser.generatedElectricPower.y, drive.machineAnalyser.consumedElectricPower.u1, drive.machineAnalyser.consumedElectricPower.y, drive.machineAnalyser.generatedMechanicPower.u2, drive.machineAnalyser.generatedMechanicPower.y, drive.machineAnalyser.consumedMechanicPower.u1, drive.machineAnalyser.consumedMechanicPower.y, drive.machineAnalyser.motorLosses.u1, drive.machineAnalyser.motorLosses.u2, drive.machineAnalyser.motorLosses.y, drive.machineAnalyser.generatorLosses.u1, drive.machineAnalyser.generatorLosses.u2, drive.machineAnalyser.generatorLosses.y, drive.machineAnalyser.electricEnergy.u, drive.machineAnalyser.electricEnergy.y, drive.machineAnalyser.electricEnergy._y_der, drive.machineAnalyser.mechanicEnergy.u, drive.machineAnalyser.mechanicEnergy.y, drive.machineAnalyser.mechanicEnergy._y_der, drive.machineAnalyser.limiter.u, drive.machineAnalyser.limiter.y, drive.machineAnalyser.limiter.simplifiedExpr, drive.machineAnalyser.mechanicPowerPassThrough.u, drive.machineAnalyser.mechanicPowerPassThrough.y, drive.machineAnalyser.electricPowerPassThrough.u, drive.machineAnalyser.electricPowerPassThrough.y, drive.machineAnalyser.losses.u1, drive.machineAnalyser.losses.u2, drive.machineAnalyser.losses.y, drive.machineAnalyser.consumedElectricEnergyComp.u, drive.machineAnalyser.consumedElectricEnergyComp.y, drive.machineAnalyser.consumedElectricEnergyComp._y_der, drive.machineAnalyser.generatedElectricEnergyComp.u, drive.machineAnalyser.generatedElectricEnergyComp.y, drive.machineAnalyser.generatedElectricEnergyComp._y_der, drive.machineAnalyser.consumedMechanicEnergyComp.u, drive.machineAnalyser.consumedMechanicEnergyComp.y, drive.machineAnalyser.consumedMechanicEnergyComp._y_der, drive.machineAnalyser.generatedMechanicEnergyComp.u, drive.machineAnalyser.generatedMechanicEnergyComp.y, drive.machineAnalyser.generatedMechanicEnergyComp._y_der, drive.machineAnalyser.lossEnergyComp.u, drive.machineAnalyser.lossEnergyComp.y, drive.machineAnalyser.lossEnergyComp._y_der, drive.machineAnalyser.powerEfficiencyComp.u1, drive.machineAnalyser.powerEfficiencyComp.u2, drive.machineAnalyser.powerEfficiencyComp.y, drive.machineAnalyser.consumedPower.u1, drive.machineAnalyser.consumedPower.u2, drive.machineAnalyser.consumedPower.y, drive.machineAnalyser.generatedPower.u1, drive.machineAnalyser.generatedPower.u2, drive.machineAnalyser.generatedPower.y, drive.machineAnalyser.generatedEnergyComp.u, drive.machineAnalyser.generatedEnergyComp.y, drive.machineAnalyser.generatedEnergyComp._y_der, drive.machineAnalyser.consumedEnergyComp.u, drive.machineAnalyser.consumedEnergyComp.y, drive.machineAnalyser.consumedEnergyComp._y_der, drive.machineAnalyser.energyEfficiencyComp.u1, drive.machineAnalyser.energyEfficiencyComp.u2, drive.machineAnalyser.energyEfficiencyComp.y, drive.machineAnalyser.motorEnergyEfficiencyComp.u1, drive.machineAnalyser.motorEnergyEfficiencyComp.u2, drive.machineAnalyser.motorEnergyEfficiencyComp.y, drive.machineAnalyser.generatorEnergyEfficiencyComp.u1} = fmi_Functions.fmiGetReal(fmi, {637537362, 637537363, 905969831, 637534381, 905969824, 905969828, 905969831, 905969834, 905969831, 369098920, 369098920, 369098921, 369098921, 905969831, 369098915, 905969831, 905969828, 905969835, 369098920, 905969834, 905969831, 369098920, 905969834, 905969831, 905969828, 637534381, 637534382, 905969840, 905969843, 905969844, 905969845, 905969846, 905969847, 587202563, 637534393, 587202563, 587202565, 587202564, 637534396, 587202564, 587202567, 587202565, 587202568, 637534398, 587202566, 587202567, 637534401, 587202563, 33554435, 587202563, 587202564, 33554436, 587202564, 905969844, 905969843, 905969844, 587202564, 587202564, 587202563, 587202563, 637534398, 637534401, 587202569, 587202565, 33554437, 587202565, 587202566, 33554438, 587202566, 587202567, 33554439, 587202567, 587202568, 33554440, 587202568, 587202569, 33554441, 587202569, 587202570, 587202571, 905969844, 587202564, 587202563, 637534462, 587202564, 587202563, 637534463, 587202570, 33554442, 587202570, 587202571, 33554443, 587202571, 33554442, 33554443, 905969845, 33554440, 33554437, 905969846, 33554438}, myTime);
{drive.machineAnalyser.generatorEnergyEfficiencyComp.u2, drive.machineAnalyser.generatorEnergyEfficiencyComp.y, drive.machineAnalyser.signChange.u, drive.machineAnalyser.signChange.y, drive.machineAnalyser.signChangeElectric.u, drive.machineAnalyser.signChangeElectric.y, drive.machineAnalyser.signChangeMechanic.u, drive.machineAnalyser.signChangeMechanic.y, drive.machineAnalyser.noNegativeGeneratedPower.u1, drive.machineAnalyser.noNegativeGeneratedPower.y, drive.machineAnalyser.additionalConsumedPower.u1, drive.machineAnalyser.additionalConsumedPower.u2, drive.machineAnalyser.additionalConsumedPower.y, drive.machineAnalyser.overallConsumedPower.u1, drive.machineAnalyser.overallConsumedPower.u2, drive.machineAnalyser.overallConsumedPower.y, drive.machineAnalyser.bldcBus.airgapTorque, drive.machineAnalyser.bldcBus.currentAC_Averaged, drive.machineAnalyser.bldcBus.currentDC, drive.machineAnalyser.bldcBus.electricMachinePower, drive.machineAnalyser.bldcBus.innerMechanicPower, drive.machineAnalyser.bldcBus.innerTorque, drive.machineAnalyser.bldcBus.machineAngle, drive.machineAnalyser.bldcBus.machineSpeed, drive.machineAnalyser.bldcBus.voltageDC, drive.machineAnalyser.electricPowerFromBus.y, drive.machineAnalyser.electricPowerFromBus.bldcBus.electricMachinePower, drive.machineAnalyser.electricPowerFromBus.bldcBus.airgapTorque, drive.machineAnalyser.electricPowerFromBus.bldcBus.currentAC_Averaged, drive.machineAnalyser.electricPowerFromBus.bldcBus.currentDC, drive.machineAnalyser.electricPowerFromBus.bldcBus.innerMechanicPower, drive.machineAnalyser.electricPowerFromBus.bldcBus.innerTorque, drive.machineAnalyser.electricPowerFromBus.bldcBus.machineAngle, drive.machineAnalyser.electricPowerFromBus.bldcBus.machineSpeed, drive.machineAnalyser.electricPowerFromBus.bldcBus.voltageDC, drive.machineAnalyser.mechanicPowerFromBus.y, drive.machineAnalyser.mechanicPowerFromBus.bldcBus.innerMechanicPower, drive.machineAnalyser.mechanicPowerFromBus.bldcBus.airgapTorque, drive.machineAnalyser.mechanicPowerFromBus.bldcBus.currentAC_Averaged, drive.machineAnalyser.mechanicPowerFromBus.bldcBus.currentDC, drive.machineAnalyser.mechanicPowerFromBus.bldcBus.electricMachinePower, drive.machineAnalyser.mechanicPowerFromBus.bldcBus.innerTorque, drive.machineAnalyser.mechanicPowerFromBus.bldcBus.machineAngle, drive.machineAnalyser.mechanicPowerFromBus.bldcBus.machineSpeed, drive.machineAnalyser.mechanicPowerFromBus.bldcBus.voltageDC, batteryPack.V_pack, batteryPack.I_pack, batteryPack.P_terminal, batteryPack.P_ideal, batteryPack.P_loss, batteryPack.p.v, batteryPack.p.i, batteryPack.n.i, batteryPack.housingHeatPort.'top[1,1]'.T, batteryPack.housingHeatPort.'bottom[1,1]'.T, batteryPack.housingHeatPort.'left[1,1]'.T, batteryPack.housingHeatPort.'left[1,2]'.T, batteryPack.housingHeatPort.'left[1,3]'.T, batteryPack.housingHeatPort.'left[1,4]'.T, batteryPack.housingHeatPort.'left[1,5]'.T, batteryPack.housingHeatPort.'right[1,1]'.T, batteryPack.housingHeatPort.'right[1,2]'.T, batteryPack.housingHeatPort.'right[1,3]'.T, batteryPack.housingHeatPort.'right[1,4]'.T, batteryPack.housingHeatPort.'right[1,5]'.T, batteryPack.housingHeatPort.'front[1,1]'.T, batteryPack.housingHeatPort.'front[1,2]'.T, batteryPack.housingHeatPort.'front[1,3]'.T, batteryPack.housingHeatPort.'front[1,4]'.T, batteryPack.housingHeatPort.'front[1,5]'.T, batteryPack.housingHeatPort.'back[1,1]'.T, batteryPack.housingHeatPort.'back[1,2]'.T, batteryPack.housingHeatPort.'back[1,3]'.T, batteryPack.housingHeatPort.'back[1,4]'.T, batteryPack.housingHeatPort.'back[1,5]'.T, batteryPack.packBus.C_actual, batteryPack.packBus.I_max, batteryPack.packBus.I_min, batteryPack.packBus.I_pack, batteryPack.packBus.P_ideal, batteryPack.packBus.P_loss, batteryPack.packBus.P_terminal, batteryPack.packBus.SOC_max, batteryPack.packBus.SOC_mean, batteryPack.packBus.SOC_min, batteryPack.packBus.SOH_max, batteryPack.packBus.SOH_mean, batteryPack.packBus.SOH_min, batteryPack.packBus.T_max, batteryPack.packBus.T_mean, batteryPack.packBus.T_min, batteryPack.packBus.V_max, batteryPack.packBus.V_min, batteryPack.packBus.V_pack, batteryPack.cell.v, batteryPack.cell.cellBus.C_actual, batteryPack.cell.cellBus.OCV, batteryPack.cell.cellBus.P_ideal, batteryPack.cell.cellBus.P_loss, batteryPack.cell.cellBus.P_terminal} = fmi_Functions.fmiGetReal(fmi, {33554439, 905969847, 637534488, 587202570, 637534393, 587202566, 637534396, 587202568, 637534463, 637534488, 637534488, 637534463, 637534489, 637534489, 637534462, 587202571, 369101904, 905969700, 637534382, 637537361, 637537362, 637537363, 905969831, 369101908, 637534381, 637537361, 637537361, 369101904, 905969700, 637534382, 637537362, 637537363, 905969831, 369101908, 637534381, 637537362, 637537362, 369101904, 905969700, 637534382, 637537361, 637537363, 905969831, 369101908, 637534381, 637534381, 637534508, 905970322, 905970323, 905970324, 637534381, 637534508, 905970330, 33554460, 33554456, 33554456, 33554457, 33554458, 33554459, 33554460, 33554456, 33554457, 33554458, 33554459, 33554460, 33554456, 33554457, 33554458, 33554459, 33554460, 33554456, 33554457, 33554458, 33554459, 33554460, 905970476, 637537305, 637537305, 637534508, 905970323, 905970324, 905970322, 33554444, 33554444, 33554444, 637534596, 637534596, 637534596, 637534756, 637534756, 637534756, 637534522, 637534522, 637534381, 637534522, 637534592, 637534591, 637534996, 637534595, 637534594}, myTime);
{batteryPack.cell.cellBus.R_total, batteryPack.cell.cellBus.SOC, batteryPack.cell.cellBus.SOH, batteryPack.cell.cellBus.SOH_resistance, batteryPack.cell.cellBus.T, batteryPack.cell.cellBus.i, batteryPack.cell.cellBus.v, batteryPack.cell.p.v, batteryPack.cell.p.i, batteryPack.cell.n.i, batteryPack.cell.heatPort.positivePin.T, batteryPack.cell.heatPort.negativePin.T, batteryPack.cell.heatPort.'surface[1,1]'.T, batteryPack.cell.heatPort.'surface[1,2]'.T, batteryPack.cell.heatPort.'surface[1,3]'.T, batteryPack.cell.heatPort.'surface[1,4]'.T, batteryPack.cell.heatPort.'surface[1,5]'.T, batteryPack.cell.heatPort.'surface[2,1]'.T, batteryPack.cell.heatPort.'surface[2,2]'.T, batteryPack.cell.heatPort.'surface[2,3]'.T, batteryPack.cell.heatPort.'surface[2,4]'.T, batteryPack.cell.heatPort.'surface[2,5]'.T, batteryPack.cell.heatPort.'surface[3,1]'.T, batteryPack.cell.heatPort.'surface[3,2]'.T, batteryPack.cell.heatPort.'surface[3,3]'.T, batteryPack.cell.heatPort.'surface[3,4]'.T, batteryPack.cell.heatPort.'surface[3,5]'.T, batteryPack.cell.heatPort.'surface[4,1]'.T, batteryPack.cell.heatPort.'surface[4,2]'.T, batteryPack.cell.heatPort.'surface[4,3]'.T, batteryPack.cell.heatPort.'surface[4,4]'.T, batteryPack.cell.heatPort.'surface[4,5]'.T, batteryPack.cell.thermalModel.'T[1]', batteryPack.cell.thermalModel.'T[2]', batteryPack.cell.thermalModel.'T[3]', batteryPack.cell.thermalModel.'T[4]', batteryPack.cell.thermalModel.'T[5]', batteryPack.cell.thermalModel.cellBus.C_actual, batteryPack.cell.thermalModel.cellBus.OCV, batteryPack.cell.thermalModel.cellBus.P_ideal, batteryPack.cell.thermalModel.cellBus.P_loss, batteryPack.cell.thermalModel.cellBus.P_terminal, batteryPack.cell.thermalModel.cellBus.R_total, batteryPack.cell.thermalModel.cellBus.SOC, batteryPack.cell.thermalModel.cellBus.SOH, batteryPack.cell.thermalModel.cellBus.SOH_resistance, batteryPack.cell.thermalModel.cellBus.T, batteryPack.cell.thermalModel.cellBus.i, batteryPack.cell.thermalModel.cellBus.v, batteryPack.cell.thermalModel.cylindricHeatPort.positivePin.T, batteryPack.cell.thermalModel.cylindricHeatPort.negativePin.T, batteryPack.cell.thermalModel.cylindricHeatPort.'surface[1,1]'.T, batteryPack.cell.thermalModel.cylindricHeatPort.'surface[1,2]'.T, batteryPack.cell.thermalModel.cylindricHeatPort.'surface[1,3]'.T, batteryPack.cell.thermalModel.cylindricHeatPort.'surface[1,4]'.T, batteryPack.cell.thermalModel.cylindricHeatPort.'surface[1,5]'.T, batteryPack.cell.thermalModel.cylindricHeatPort.'surface[2,1]'.T, batteryPack.cell.thermalModel.cylindricHeatPort.'surface[2,2]'.T, batteryPack.cell.thermalModel.cylindricHeatPort.'surface[2,3]'.T, batteryPack.cell.thermalModel.cylindricHeatPort.'surface[2,4]'.T, batteryPack.cell.thermalModel.cylindricHeatPort.'surface[2,5]'.T, batteryPack.cell.thermalModel.cylindricHeatPort.'surface[3,1]'.T, batteryPack.cell.thermalModel.cylindricHeatPort.'surface[3,2]'.T, batteryPack.cell.thermalModel.cylindricHeatPort.'surface[3,3]'.T, batteryPack.cell.thermalModel.cylindricHeatPort.'surface[3,4]'.T, batteryPack.cell.thermalModel.cylindricHeatPort.'surface[3,5]'.T, batteryPack.cell.thermalModel.cylindricHeatPort.'surface[4,1]'.T, batteryPack.cell.thermalModel.cylindricHeatPort.'surface[4,2]'.T, batteryPack.cell.thermalModel.cylindricHeatPort.'surface[4,3]'.T, batteryPack.cell.thermalModel.cylindricHeatPort.'surface[4,4]'.T, batteryPack.cell.thermalModel.cylindricHeatPort.'surface[4,5]'.T, batteryPack.cell.thermalModel.positivPin.port_a.T, batteryPack.cell.thermalModel.positivPin.port_b.T, batteryPack.cell.thermalModel.negativePin.port_a.T, batteryPack.cell.thermalModel.negativePin.port_b.T, batteryPack.cell.thermalModel.oneToMany.T, batteryPack.cell.thermalModel.oneToMany.P_loss, batteryPack.cell.thermalModel.oneToMany.'manyHeatPort[1]'.T, batteryPack.cell.thermalModel.oneToMany.'manyHeatPort[1]'.Q_flow, batteryPack.cell.thermalModel.oneToMany.'manyHeatPort[2]'.T, batteryPack.cell.thermalModel.oneToMany.'manyHeatPort[2]'.Q_flow, batteryPack.cell.thermalModel.oneToMany.'manyHeatPort[3]'.T, batteryPack.cell.thermalModel.oneToMany.'manyHeatPort[3]'.Q_flow, batteryPack.cell.thermalModel.oneToMany.'manyHeatPort[4]'.T, batteryPack.cell.thermalModel.oneToMany.'manyHeatPort[4]'.Q_flow, batteryPack.cell.thermalModel.oneToMany.'manyHeatPort[5]'.T, batteryPack.cell.thermalModel.oneToMany.'manyHeatPort[5]'.Q_flow, batteryPack.cell.thermalModel.temperature.u, batteryPack.cell.thermalModel.temperature.cellBus.T, batteryPack.cell.thermalModel.temperature.cellBus.C_actual, batteryPack.cell.thermalModel.temperature.cellBus.OCV, batteryPack.cell.thermalModel.temperature.cellBus.P_ideal, batteryPack.cell.thermalModel.temperature.cellBus.P_loss, batteryPack.cell.thermalModel.temperature.cellBus.P_terminal, batteryPack.cell.thermalModel.temperature.cellBus.R_total, batteryPack.cell.thermalModel.temperature.cellBus.SOC, batteryPack.cell.thermalModel.temperature.cellBus.SOH, batteryPack.cell.thermalModel.temperature.cellBus.SOH_resistance, batteryPack.cell.thermalModel.temperature.cellBus.i, batteryPack.cell.thermalModel.temperature.cellBus.v} = fmi_Functions.fmiGetReal(fmi, {905970049, 33554444, 637534596, 637534606, 637534756, 637537305, 637534522, 637534522, 637537305, 905969980, 33554460, 33554456, 33554456, 33554457, 33554458, 33554459, 33554460, 33554456, 33554457, 33554458, 33554459, 33554460, 33554456, 33554457, 33554458, 33554459, 33554460, 33554456, 33554457, 33554458, 33554459, 33554460, 33554456, 33554457, 33554458, 33554459, 33554460, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637534756, 637537305, 637534522, 33554460, 33554456, 33554456, 33554457, 33554458, 33554459, 33554460, 33554456, 33554457, 33554458, 33554459, 33554460, 33554456, 33554457, 33554458, 33554459, 33554460, 33554456, 33554457, 33554458, 33554459, 33554460, 33554460, 33554460, 33554456, 33554456, 637534756, 637534595, 33554456, 637535251, 33554457, 637535252, 33554458, 637535253, 33554459, 637535254, 33554460, 637535255, 637534756, 637534756, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637537305, 637534522}, myTime);
{batteryPack.cell.thermalModel.lossPower.y, batteryPack.cell.thermalModel.lossPower.cellBus.P_loss, batteryPack.cell.thermalModel.lossPower.cellBus.C_actual, batteryPack.cell.thermalModel.lossPower.cellBus.OCV, batteryPack.cell.thermalModel.lossPower.cellBus.P_ideal, batteryPack.cell.thermalModel.lossPower.cellBus.P_terminal, batteryPack.cell.thermalModel.lossPower.cellBus.R_total, batteryPack.cell.thermalModel.lossPower.cellBus.SOC, batteryPack.cell.thermalModel.lossPower.cellBus.SOH, batteryPack.cell.thermalModel.lossPower.cellBus.SOH_resistance, batteryPack.cell.thermalModel.lossPower.cellBus.T, batteryPack.cell.thermalModel.lossPower.cellBus.i, batteryPack.cell.thermalModel.lossPower.cellBus.v, batteryPack.cell.thermalModel.'coreHeatCapacitor[1]'.T, batteryPack.cell.thermalModel.'coreHeatCapacitor[1]'._T_der, batteryPack.cell.thermalModel.'coreHeatCapacitor[1]'.der_T, batteryPack.cell.thermalModel.'coreHeatCapacitor[1]'.port.T, batteryPack.cell.thermalModel.'coreHeatCapacitor[1]'.port.Q_flow, batteryPack.cell.thermalModel.'coreHeatCapacitor[2]'.T, batteryPack.cell.thermalModel.'coreHeatCapacitor[2]'._T_der, batteryPack.cell.thermalModel.'coreHeatCapacitor[2]'.der_T, batteryPack.cell.thermalModel.'coreHeatCapacitor[2]'.port.T, batteryPack.cell.thermalModel.'coreHeatCapacitor[2]'.port.Q_flow, batteryPack.cell.thermalModel.'coreHeatCapacitor[3]'.T, batteryPack.cell.thermalModel.'coreHeatCapacitor[3]'._T_der, batteryPack.cell.thermalModel.'coreHeatCapacitor[3]'.der_T, batteryPack.cell.thermalModel.'coreHeatCapacitor[3]'.port.T, batteryPack.cell.thermalModel.'coreHeatCapacitor[3]'.port.Q_flow, batteryPack.cell.thermalModel.'coreHeatCapacitor[4]'.T, batteryPack.cell.thermalModel.'coreHeatCapacitor[4]'._T_der, batteryPack.cell.thermalModel.'coreHeatCapacitor[4]'.der_T, batteryPack.cell.thermalModel.'coreHeatCapacitor[4]'.port.T, batteryPack.cell.thermalModel.'coreHeatCapacitor[4]'.port.Q_flow, batteryPack.cell.thermalModel.'coreHeatCapacitor[5]'.T, batteryPack.cell.thermalModel.'coreHeatCapacitor[5]'._T_der, batteryPack.cell.thermalModel.'coreHeatCapacitor[5]'.der_T, batteryPack.cell.thermalModel.'coreHeatCapacitor[5]'.port.T, batteryPack.cell.thermalModel.'coreHeatCapacitor[5]'.port.Q_flow, batteryPack.cell.thermalModel.'sheet[1,1]'.port_a.T, batteryPack.cell.thermalModel.'sheet[1,1]'.port_b.T, batteryPack.cell.thermalModel.'sheet[1,2]'.port_a.T, batteryPack.cell.thermalModel.'sheet[1,2]'.port_b.T, batteryPack.cell.thermalModel.'sheet[1,3]'.port_a.T, batteryPack.cell.thermalModel.'sheet[1,3]'.port_b.T, batteryPack.cell.thermalModel.'sheet[1,4]'.port_a.T, batteryPack.cell.thermalModel.'sheet[1,4]'.port_b.T, batteryPack.cell.thermalModel.'sheet[1,5]'.port_a.T, batteryPack.cell.thermalModel.'sheet[1,5]'.port_b.T, batteryPack.cell.thermalModel.'sheet[2,1]'.port_a.T, batteryPack.cell.thermalModel.'sheet[2,1]'.port_b.T, batteryPack.cell.thermalModel.'sheet[2,2]'.port_a.T, batteryPack.cell.thermalModel.'sheet[2,2]'.port_b.T, batteryPack.cell.thermalModel.'sheet[2,3]'.port_a.T, batteryPack.cell.thermalModel.'sheet[2,3]'.port_b.T, batteryPack.cell.thermalModel.'sheet[2,4]'.port_a.T, batteryPack.cell.thermalModel.'sheet[2,4]'.port_b.T, batteryPack.cell.thermalModel.'sheet[2,5]'.port_a.T, batteryPack.cell.thermalModel.'sheet[2,5]'.port_b.T, batteryPack.cell.thermalModel.'sheet[3,1]'.port_a.T, batteryPack.cell.thermalModel.'sheet[3,1]'.port_b.T, batteryPack.cell.thermalModel.'sheet[3,2]'.port_a.T, batteryPack.cell.thermalModel.'sheet[3,2]'.port_b.T, batteryPack.cell.thermalModel.'sheet[3,3]'.port_a.T, batteryPack.cell.thermalModel.'sheet[3,3]'.port_b.T, batteryPack.cell.thermalModel.'sheet[3,4]'.port_a.T, batteryPack.cell.thermalModel.'sheet[3,4]'.port_b.T, batteryPack.cell.thermalModel.'sheet[3,5]'.port_a.T, batteryPack.cell.thermalModel.'sheet[3,5]'.port_b.T, batteryPack.cell.thermalModel.'sheet[4,1]'.port_a.T, batteryPack.cell.thermalModel.'sheet[4,1]'.port_b.T, batteryPack.cell.thermalModel.'sheet[4,2]'.port_a.T, batteryPack.cell.thermalModel.'sheet[4,2]'.port_b.T, batteryPack.cell.thermalModel.'sheet[4,3]'.port_a.T, batteryPack.cell.thermalModel.'sheet[4,3]'.port_b.T, batteryPack.cell.thermalModel.'sheet[4,4]'.port_a.T, batteryPack.cell.thermalModel.'sheet[4,4]'.port_b.T, batteryPack.cell.thermalModel.'sheet[4,5]'.port_a.T, batteryPack.cell.thermalModel.'sheet[4,5]'.port_b.T, batteryPack.cell.thermalModel.'top[1]'.Q_flow, batteryPack.cell.thermalModel.'top[1]'.dT, batteryPack.cell.thermalModel.'top[1]'.port_a.T, batteryPack.cell.thermalModel.'top[1]'.port_a.Q_flow, batteryPack.cell.thermalModel.'top[1]'.port_b.T, batteryPack.cell.thermalModel.'top[1]'.port_b.Q_flow, batteryPack.cell.thermalModel.'top[2]'.Q_flow, batteryPack.cell.thermalModel.'top[2]'.dT, batteryPack.cell.thermalModel.'top[2]'.port_a.T, batteryPack.cell.thermalModel.'top[2]'.port_a.Q_flow, batteryPack.cell.thermalModel.'top[2]'.port_b.T, batteryPack.cell.thermalModel.'top[2]'.port_b.Q_flow, batteryPack.cell.thermalModel.'top[3]'.Q_flow, batteryPack.cell.thermalModel.'top[3]'.dT, batteryPack.cell.thermalModel.'top[3]'.port_a.T, batteryPack.cell.thermalModel.'top[3]'.port_a.Q_flow, batteryPack.cell.thermalModel.'top[3]'.port_b.T, batteryPack.cell.thermalModel.'top[3]'.port_b.Q_flow, batteryPack.cell.thermalModel.'top[4]'.Q_flow, batteryPack.cell.thermalModel.'top[4]'.dT, batteryPack.cell.thermalModel.'top[4]'.port_a.T, batteryPack.cell.thermalModel.'top[4]'.port_a.Q_flow} = fmi_Functions.fmiGetReal(fmi, {637534595, 637534595, 637534592, 637534591, 637534996, 637534594, 905970049, 33554444, 637534596, 637534606, 637534756, 637537305, 637534522, 33554456, 587202584, 587202584, 33554456, 637535104, 33554457, 587202585, 587202585, 33554457, 637535106, 33554458, 587202586, 587202586, 33554458, 637535108, 33554459, 587202587, 587202587, 33554459, 637535110, 33554460, 587202588, 587202588, 33554460, 637535112, 33554456, 33554456, 33554457, 33554457, 33554458, 33554458, 33554459, 33554459, 33554460, 33554460, 33554456, 33554456, 33554457, 33554457, 33554458, 33554458, 33554459, 33554459, 33554460, 33554460, 33554456, 33554456, 33554457, 33554457, 33554458, 33554458, 33554459, 33554459, 33554460, 33554460, 33554456, 33554456, 33554457, 33554457, 33554458, 33554458, 33554459, 33554459, 33554460, 33554460, 637535213, 637535214, 33554456, 637535213, 637535215, 637535239, 637535217, 637535218, 33554457, 637535217, 637535219, 637535242, 637535221, 637535222, 33554458, 637535221, 637535223, 637535245, 637535225, 637535226, 33554459, 637535225}, myTime);
{batteryPack.cell.thermalModel.'top[4]'.port_b.T, batteryPack.cell.thermalModel.'top[4]'.port_b.Q_flow, batteryPack.cell.thermalModel.'top[5]'.port_a.T, batteryPack.cell.thermalModel.'top[5]'.port_b.T, batteryPack.cell.thermalModel.'bottom[1]'.port_a.T, batteryPack.cell.thermalModel.'bottom[1]'.port_b.T, batteryPack.cell.thermalModel.'bottom[2]'.Q_flow, batteryPack.cell.thermalModel.'bottom[2]'.dT, batteryPack.cell.thermalModel.'bottom[2]'.port_a.T, batteryPack.cell.thermalModel.'bottom[2]'.port_a.Q_flow, batteryPack.cell.thermalModel.'bottom[2]'.port_b.T, batteryPack.cell.thermalModel.'bottom[2]'.port_b.Q_flow, batteryPack.cell.thermalModel.'bottom[3]'.Q_flow, batteryPack.cell.thermalModel.'bottom[3]'.dT, batteryPack.cell.thermalModel.'bottom[3]'.port_a.T, batteryPack.cell.thermalModel.'bottom[3]'.port_a.Q_flow, batteryPack.cell.thermalModel.'bottom[3]'.port_b.T, batteryPack.cell.thermalModel.'bottom[3]'.port_b.Q_flow, batteryPack.cell.thermalModel.'bottom[4]'.Q_flow, batteryPack.cell.thermalModel.'bottom[4]'.dT, batteryPack.cell.thermalModel.'bottom[4]'.port_a.T, batteryPack.cell.thermalModel.'bottom[4]'.port_a.Q_flow, batteryPack.cell.thermalModel.'bottom[4]'.port_b.T, batteryPack.cell.thermalModel.'bottom[4]'.port_b.Q_flow, batteryPack.cell.thermalModel.'bottom[5]'.Q_flow, batteryPack.cell.thermalModel.'bottom[5]'.dT, batteryPack.cell.thermalModel.'bottom[5]'.port_a.T, batteryPack.cell.thermalModel.'bottom[5]'.port_a.Q_flow, batteryPack.cell.thermalModel.'bottom[5]'.port_b.T, batteryPack.cell.thermalModel.'bottom[5]'.port_b.Q_flow, batteryPack.cell.electricModel.SOC, batteryPack.cell.electricModel._SOC_der, batteryPack.cell.electricModel.T, batteryPack.cell.electricModel.OCV, batteryPack.cell.electricModel.C_actual, batteryPack.cell.electricModel.R_total, batteryPack.cell.electricModel.P_terminal, batteryPack.cell.electricModel.P_ideal, batteryPack.cell.electricModel.P_loss, batteryPack.cell.electricModel.i, batteryPack.cell.electricModel.v, batteryPack.cell.electricModel.SOH, batteryPack.cell.electricModel.p.v, batteryPack.cell.electricModel.p.i, batteryPack.cell.electricModel.n.i, batteryPack.cell.electricModel.cellBus.C_actual, batteryPack.cell.electricModel.cellBus.OCV, batteryPack.cell.electricModel.cellBus.P_ideal, batteryPack.cell.electricModel.cellBus.P_loss, batteryPack.cell.electricModel.cellBus.P_terminal, batteryPack.cell.electricModel.cellBus.R_total, batteryPack.cell.electricModel.cellBus.SOC, batteryPack.cell.electricModel.cellBus.SOH, batteryPack.cell.electricModel.cellBus.SOH_resistance, batteryPack.cell.electricModel.cellBus.T, batteryPack.cell.electricModel.cellBus.i, batteryPack.cell.electricModel.cellBus.v, batteryPack.cell.electricModel.realExpression.y, batteryPack.cell.electricModel.realExpression1.y, batteryPack.cell.electricModel.realExpression2.y, batteryPack.cell.electricModel.realExpression3.y, batteryPack.cell.electricModel.realExpression4.y, batteryPack.cell.electricModel.realExpression6.y, batteryPack.cell.electricModel.realExpression7.y, batteryPack.cell.electricModel.realExpression8.y, batteryPack.cell.electricModel.realExpression9.y, batteryPack.cell.electricModel.stateOfCharge.u, batteryPack.cell.electricModel.stateOfCharge.cellBus.SOC, batteryPack.cell.electricModel.stateOfCharge.cellBus.C_actual, batteryPack.cell.electricModel.stateOfCharge.cellBus.OCV, batteryPack.cell.electricModel.stateOfCharge.cellBus.P_ideal, batteryPack.cell.electricModel.stateOfCharge.cellBus.P_loss, batteryPack.cell.electricModel.stateOfCharge.cellBus.P_terminal, batteryPack.cell.electricModel.stateOfCharge.cellBus.R_total, batteryPack.cell.electricModel.stateOfCharge.cellBus.SOH, batteryPack.cell.electricModel.stateOfCharge.cellBus.SOH_resistance, batteryPack.cell.electricModel.stateOfCharge.cellBus.T, batteryPack.cell.electricModel.stateOfCharge.cellBus.i, batteryPack.cell.electricModel.stateOfCharge.cellBus.v, batteryPack.cell.electricModel.openCircuitVoltage.u, batteryPack.cell.electricModel.openCircuitVoltage.cellBus.OCV, batteryPack.cell.electricModel.openCircuitVoltage.cellBus.C_actual, batteryPack.cell.electricModel.openCircuitVoltage.cellBus.P_ideal, batteryPack.cell.electricModel.openCircuitVoltage.cellBus.P_loss, batteryPack.cell.electricModel.openCircuitVoltage.cellBus.P_terminal, batteryPack.cell.electricModel.openCircuitVoltage.cellBus.R_total, batteryPack.cell.electricModel.openCircuitVoltage.cellBus.SOC, batteryPack.cell.electricModel.openCircuitVoltage.cellBus.SOH, batteryPack.cell.electricModel.openCircuitVoltage.cellBus.SOH_resistance, batteryPack.cell.electricModel.openCircuitVoltage.cellBus.T, batteryPack.cell.electricModel.openCircuitVoltage.cellBus.i, batteryPack.cell.electricModel.openCircuitVoltage.cellBus.v, batteryPack.cell.electricModel.cellVoltage.u, batteryPack.cell.electricModel.cellVoltage.cellBus.v, batteryPack.cell.electricModel.cellVoltage.cellBus.C_actual, batteryPack.cell.electricModel.cellVoltage.cellBus.OCV, batteryPack.cell.electricModel.cellVoltage.cellBus.P_ideal, batteryPack.cell.electricModel.cellVoltage.cellBus.P_loss, batteryPack.cell.electricModel.cellVoltage.cellBus.P_terminal, batteryPack.cell.electricModel.cellVoltage.cellBus.R_total} = fmi_Functions.fmiGetReal(fmi, {637535227, 637535248, 33554460, 33554460, 33554456, 33554456, 637535239, 637535240, 33554457, 637535239, 637535215, 637535213, 637535242, 637535243, 33554458, 637535242, 637535219, 637535217, 637535245, 637535246, 33554459, 637535245, 637535223, 637535221, 637535248, 637535249, 33554460, 637535248, 637535227, 637535225, 33554444, 587202572, 637534756, 637534591, 637534592, 905970049, 637534594, 637534996, 637534595, 637537305, 637534522, 637534596, 637534522, 637537305, 905969980, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637534756, 637537305, 637534522, 33554444, 637534633, 637534598, 637535266, 637534599, 905970057, 637534602, 637534603, 637534604, 33554444, 33554444, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 637534596, 637534606, 637534756, 637537305, 637534522, 637534591, 637534591, 637534592, 637534996, 637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637534756, 637537305, 637534522, 637534522, 637534522, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049}, myTime);
{batteryPack.cell.electricModel.cellVoltage.cellBus.SOC, batteryPack.cell.electricModel.cellVoltage.cellBus.SOH, batteryPack.cell.electricModel.cellVoltage.cellBus.SOH_resistance, batteryPack.cell.electricModel.cellVoltage.cellBus.T, batteryPack.cell.electricModel.cellVoltage.cellBus.i, batteryPack.cell.electricModel.cellCurrent.u, batteryPack.cell.electricModel.cellCurrent.cellBus.i, batteryPack.cell.electricModel.cellCurrent.cellBus.C_actual, batteryPack.cell.electricModel.cellCurrent.cellBus.OCV, batteryPack.cell.electricModel.cellCurrent.cellBus.P_ideal, batteryPack.cell.electricModel.cellCurrent.cellBus.P_loss, batteryPack.cell.electricModel.cellCurrent.cellBus.P_terminal, batteryPack.cell.electricModel.cellCurrent.cellBus.R_total, batteryPack.cell.electricModel.cellCurrent.cellBus.SOC, batteryPack.cell.electricModel.cellCurrent.cellBus.SOH, batteryPack.cell.electricModel.cellCurrent.cellBus.SOH_resistance, batteryPack.cell.electricModel.cellCurrent.cellBus.T, batteryPack.cell.electricModel.cellCurrent.cellBus.v, batteryPack.cell.electricModel.actualCapacity.u, batteryPack.cell.electricModel.actualCapacity.cellBus.C_actual, batteryPack.cell.electricModel.actualCapacity.cellBus.OCV, batteryPack.cell.electricModel.actualCapacity.cellBus.P_ideal, batteryPack.cell.electricModel.actualCapacity.cellBus.P_loss, batteryPack.cell.electricModel.actualCapacity.cellBus.P_terminal, batteryPack.cell.electricModel.actualCapacity.cellBus.R_total, batteryPack.cell.electricModel.actualCapacity.cellBus.SOC, batteryPack.cell.electricModel.actualCapacity.cellBus.SOH, batteryPack.cell.electricModel.actualCapacity.cellBus.SOH_resistance, batteryPack.cell.electricModel.actualCapacity.cellBus.T, batteryPack.cell.electricModel.actualCapacity.cellBus.i, batteryPack.cell.electricModel.actualCapacity.cellBus.v, batteryPack.cell.electricModel.nominalCapacity.cellBus.C_actual, batteryPack.cell.electricModel.nominalCapacity.cellBus.OCV, batteryPack.cell.electricModel.nominalCapacity.cellBus.P_ideal, batteryPack.cell.electricModel.nominalCapacity.cellBus.P_loss, batteryPack.cell.electricModel.nominalCapacity.cellBus.P_terminal, batteryPack.cell.electricModel.nominalCapacity.cellBus.R_total, batteryPack.cell.electricModel.nominalCapacity.cellBus.SOC, batteryPack.cell.electricModel.nominalCapacity.cellBus.SOH, batteryPack.cell.electricModel.nominalCapacity.cellBus.SOH_resistance, batteryPack.cell.electricModel.nominalCapacity.cellBus.T, batteryPack.cell.electricModel.nominalCapacity.cellBus.i, batteryPack.cell.electricModel.nominalCapacity.cellBus.v, batteryPack.cell.electricModel.innerResistance.u, batteryPack.cell.electricModel.innerResistance.cellBus.R_total, batteryPack.cell.electricModel.innerResistance.cellBus.C_actual, batteryPack.cell.electricModel.innerResistance.cellBus.OCV, batteryPack.cell.electricModel.innerResistance.cellBus.P_ideal, batteryPack.cell.electricModel.innerResistance.cellBus.P_loss, batteryPack.cell.electricModel.innerResistance.cellBus.P_terminal, batteryPack.cell.electricModel.innerResistance.cellBus.SOC, batteryPack.cell.electricModel.innerResistance.cellBus.SOH, batteryPack.cell.electricModel.innerResistance.cellBus.SOH_resistance, batteryPack.cell.electricModel.innerResistance.cellBus.T, batteryPack.cell.electricModel.innerResistance.cellBus.i, batteryPack.cell.electricModel.innerResistance.cellBus.v, batteryPack.cell.electricModel.terminalPower.u, batteryPack.cell.electricModel.terminalPower.cellBus.P_terminal, batteryPack.cell.electricModel.terminalPower.cellBus.C_actual, batteryPack.cell.electricModel.terminalPower.cellBus.OCV, batteryPack.cell.electricModel.terminalPower.cellBus.P_ideal, batteryPack.cell.electricModel.terminalPower.cellBus.P_loss, batteryPack.cell.electricModel.terminalPower.cellBus.R_total, batteryPack.cell.electricModel.terminalPower.cellBus.SOC, batteryPack.cell.electricModel.terminalPower.cellBus.SOH, batteryPack.cell.electricModel.terminalPower.cellBus.SOH_resistance, batteryPack.cell.electricModel.terminalPower.cellBus.T, batteryPack.cell.electricModel.terminalPower.cellBus.i, batteryPack.cell.electricModel.terminalPower.cellBus.v, batteryPack.cell.electricModel.idealPower.u, batteryPack.cell.electricModel.idealPower.cellBus.P_ideal, batteryPack.cell.electricModel.idealPower.cellBus.C_actual, batteryPack.cell.electricModel.idealPower.cellBus.OCV, batteryPack.cell.electricModel.idealPower.cellBus.P_loss, batteryPack.cell.electricModel.idealPower.cellBus.P_terminal, batteryPack.cell.electricModel.idealPower.cellBus.R_total, batteryPack.cell.electricModel.idealPower.cellBus.SOC, batteryPack.cell.electricModel.idealPower.cellBus.SOH, batteryPack.cell.electricModel.idealPower.cellBus.SOH_resistance, batteryPack.cell.electricModel.idealPower.cellBus.T, batteryPack.cell.electricModel.idealPower.cellBus.i, batteryPack.cell.electricModel.idealPower.cellBus.v, batteryPack.cell.electricModel.lossPower.u, batteryPack.cell.electricModel.lossPower.cellBus.P_loss, batteryPack.cell.electricModel.lossPower.cellBus.C_actual, batteryPack.cell.electricModel.lossPower.cellBus.OCV, batteryPack.cell.electricModel.lossPower.cellBus.P_ideal, batteryPack.cell.electricModel.lossPower.cellBus.P_terminal, batteryPack.cell.electricModel.lossPower.cellBus.R_total, batteryPack.cell.electricModel.lossPower.cellBus.SOC, batteryPack.cell.electricModel.lossPower.cellBus.SOH, batteryPack.cell.electricModel.lossPower.cellBus.SOH_resistance, batteryPack.cell.electricModel.lossPower.cellBus.T, batteryPack.cell.electricModel.lossPower.cellBus.i, batteryPack.cell.electricModel.lossPower.cellBus.v, batteryPack.cell.electricModel.temperature.y, batteryPack.cell.electricModel.temperature.cellBus.T, batteryPack.cell.electricModel.temperature.cellBus.C_actual, batteryPack.cell.electricModel.temperature.cellBus.OCV, batteryPack.cell.electricModel.temperature.cellBus.P_ideal} = fmi_Functions.fmiGetReal(fmi, {33554444, 637534596, 637534606, 637534756, 637537305, 637537305, 637537305, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637534756, 637534522, 637534592, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637534756, 637537305, 637534522, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637534756, 637537305, 637534522, 905970049, 905970049, 637534592, 637534591, 637534996, 637534595, 637534594, 33554444, 637534596, 637534606, 637534756, 637537305, 637534522, 637534594, 637534594, 637534592, 637534591, 637534996, 637534595, 905970049, 33554444, 637534596, 637534606, 637534756, 637537305, 637534522, 637534996, 637534996, 637534592, 637534591, 637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637534756, 637537305, 637534522, 637534595, 637534595, 637534592, 637534591, 637534996, 637534594, 905970049, 33554444, 637534596, 637534606, 637534756, 637537305, 637534522, 637534756, 637534756, 637534592, 637534591, 637534996}, myTime);
{batteryPack.cell.electricModel.temperature.cellBus.P_loss, batteryPack.cell.electricModel.temperature.cellBus.P_terminal, batteryPack.cell.electricModel.temperature.cellBus.R_total, batteryPack.cell.electricModel.temperature.cellBus.SOC, batteryPack.cell.electricModel.temperature.cellBus.SOH, batteryPack.cell.electricModel.temperature.cellBus.SOH_resistance, batteryPack.cell.electricModel.temperature.cellBus.i, batteryPack.cell.electricModel.temperature.cellBus.v, batteryPack.cell.electricModel.stateOfHealth.y, batteryPack.cell.electricModel.stateOfHealth.cellBus.SOH, batteryPack.cell.electricModel.stateOfHealth.cellBus.C_actual, batteryPack.cell.electricModel.stateOfHealth.cellBus.OCV, batteryPack.cell.electricModel.stateOfHealth.cellBus.P_ideal, batteryPack.cell.electricModel.stateOfHealth.cellBus.P_loss, batteryPack.cell.electricModel.stateOfHealth.cellBus.P_terminal, batteryPack.cell.electricModel.stateOfHealth.cellBus.R_total, batteryPack.cell.electricModel.stateOfHealth.cellBus.SOC, batteryPack.cell.electricModel.stateOfHealth.cellBus.SOH_resistance, batteryPack.cell.electricModel.stateOfHealth.cellBus.T, batteryPack.cell.electricModel.stateOfHealth.cellBus.i, batteryPack.cell.electricModel.stateOfHealth.cellBus.v, batteryPack.cell.electricModel.resistanceStateOfHealth.y, batteryPack.cell.electricModel.resistanceStateOfHealth.cellBus.SOH_resistance, batteryPack.cell.electricModel.resistanceStateOfHealth.cellBus.C_actual, batteryPack.cell.electricModel.resistanceStateOfHealth.cellBus.OCV, batteryPack.cell.electricModel.resistanceStateOfHealth.cellBus.P_ideal, batteryPack.cell.electricModel.resistanceStateOfHealth.cellBus.P_loss, batteryPack.cell.electricModel.resistanceStateOfHealth.cellBus.P_terminal, batteryPack.cell.electricModel.resistanceStateOfHealth.cellBus.R_total, batteryPack.cell.electricModel.resistanceStateOfHealth.cellBus.SOC, batteryPack.cell.electricModel.resistanceStateOfHealth.cellBus.SOH, batteryPack.cell.electricModel.resistanceStateOfHealth.cellBus.T, batteryPack.cell.electricModel.resistanceStateOfHealth.cellBus.i, batteryPack.cell.electricModel.resistanceStateOfHealth.cellBus.v, batteryPack.cell.electricModel.currentSensor.i, batteryPack.cell.electricModel.currentSensor.p.v, batteryPack.cell.electricModel.currentSensor.p.i, batteryPack.cell.electricModel.currentSensor.n.v, batteryPack.cell.electricModel.currentSensor.n.i, batteryPack.cell.electricModel.ocv.v, batteryPack.cell.electricModel.ocv.electricCurrent, batteryPack.cell.electricModel.ocv.stateOfCharge, batteryPack.cell.electricModel.ocv.temperature, batteryPack.cell.electricModel.ocv.p.v, batteryPack.cell.electricModel.ocv.p.i, batteryPack.cell.electricModel.ocv.n.i, batteryPack.cell.electricModel.ocv.signalVoltage.v, batteryPack.cell.electricModel.ocv.signalVoltage.i, batteryPack.cell.electricModel.ocv.signalVoltage.p.v, batteryPack.cell.electricModel.ocv.signalVoltage.p.i, batteryPack.cell.electricModel.ocv.signalVoltage.n.i, batteryPack.cell.electricModel.ocv.gainOCV.u, batteryPack.cell.electricModel.ocv.gainOCV.y, batteryPack.cell.electricModel.ocv.singleTable.tableInput1, batteryPack.cell.electricModel.ocv.singleTable.tableInput2, batteryPack.cell.electricModel.ocv.singleTable.stateOfCharge, batteryPack.cell.electricModel.ocv.singleTable.temperature, batteryPack.cell.electricModel.ocv.singleTable.voltageOut, batteryPack.cell.electricModel.ocv.singleTable.input1.y, batteryPack.cell.electricModel.ocv.singleTable.input2.y, batteryPack.cell.electricModel.ocv.singleTable.tableLookup.u1, batteryPack.cell.electricModel.ocv.singleTable.tableLookup.u2, batteryPack.cell.electricModel.ocv.singleTable.tableLookup.y, batteryPack.cell.electricModel.conditionalLowPass.u, batteryPack.cell.electricModel.conditionalLowPass.y, batteryPack.cell.electricModel.conditionalLowPass.noFilter.u, batteryPack.cell.electricModel.conditionalLowPass.noFilter.y, batteryPack.cell.electricModel.conditionalLowPass.scaling.u, batteryPack.cell.electricModel.conditionalLowPass.scaling.y, batteryPack.cell.electricModel.shortCircuitL.p.v, batteryPack.cell.electricModel.shortCircuitL.p.i, batteryPack.cell.electricModel.shortCircuitL.n.v, batteryPack.cell.electricModel.shortCircuitL.n.i, batteryPack.cell.electricModel.shortCircuitRC3.p.v, batteryPack.cell.electricModel.shortCircuitRC3.p.i, batteryPack.cell.electricModel.shortCircuitRC3.n.v, batteryPack.cell.electricModel.shortCircuitRC3.n.i, batteryPack.cell.electricModel.resistor.v, batteryPack.cell.electricModel.resistor.electricCurrent, batteryPack.cell.electricModel.resistor.stateOfCharge, batteryPack.cell.electricModel.resistor.temperature, batteryPack.cell.electricModel.resistor.SOH, batteryPack.cell.electricModel.resistor.stateOfHealthInput, batteryPack.cell.electricModel.resistor.stateOfHealthInternal, batteryPack.cell.electricModel.resistor.p.v, batteryPack.cell.electricModel.resistor.p.i, batteryPack.cell.electricModel.resistor.n.v, batteryPack.cell.electricModel.resistor.n.i, batteryPack.cell.electricModel.resistor.tables.electricCurrent, batteryPack.cell.electricModel.resistor.tables.y, batteryPack.cell.electricModel.resistor.tables.stateOfCharge, batteryPack.cell.electricModel.resistor.tables.temperature, batteryPack.cell.electricModel.resistor.tables.tableInput1, batteryPack.cell.electricModel.resistor.tables.tableInput2, batteryPack.cell.electricModel.resistor.tables.tableInput3, batteryPack.cell.electricModel.resistor.tables.input1.y, batteryPack.cell.electricModel.resistor.tables.input2.y, batteryPack.cell.electricModel.resistor.tables.input3.y, batteryPack.cell.electricModel.resistor.tables.ndTable.'u[1]', batteryPack.cell.electricModel.resistor.tables.ndTable.'u[2]'} = fmi_Functions.fmiGetReal(fmi, {637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637537305, 637534522, 637534596, 637534596, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534606, 637534756, 637537305, 637534522, 637534606, 637534606, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534596, 637534756, 637537305, 637534522, 637537305, 637534522, 637537305, 637534522, 637534626, 637534591, 637537305, 33554444, 637534756, 637534591, 905970083, 905969980, 637534591, 905970083, 637534591, 905970083, 905969980, 637534633, 637534633, 33554444, 637535267, 33554444, 637534756, 637534591, 33554444, 637535267, 33554444, 637535267, 637534633, 637535266, 637535266, 637535266, 637535266, 637535266, 637535266, 637535257, 637537305, 637535257, 637534626, 637534591, 905970083, 637534591, 905969980, 905970715, 637537305, 33554444, 637534756, 637534606, 637534606, 637534606, 637534522, 637537305, 637535257, 637534626, 637537305, 637535262, 33554444, 637534756, 33554444, 637535266, 637535267, 33554444, 637535266, 637535267, 637535265, 637535266}, myTime);
{batteryPack.cell.electricModel.resistor.tables.ndTable.'u[3]', batteryPack.cell.electricModel.resistor.tables.ndTable.y, batteryPack.cell.electricModel.resistor.variableResistor.v, batteryPack.cell.electricModel.resistor.variableResistor.i, batteryPack.cell.electricModel.resistor.variableResistor.LossPower, batteryPack.cell.electricModel.resistor.variableResistor.R_actual, batteryPack.cell.electricModel.resistor.variableResistor.R, batteryPack.cell.electricModel.resistor.variableResistor.p.v, batteryPack.cell.electricModel.resistor.variableResistor.p.i, batteryPack.cell.electricModel.resistor.variableResistor.n.v, batteryPack.cell.electricModel.resistor.variableResistor.n.i, batteryPack.cell.electricModel.resistor.gainR.u, batteryPack.cell.electricModel.resistor.gainR.y, batteryPack.cell.electricModel.resistor.agingR.u1, batteryPack.cell.electricModel.resistor.agingR.u2, batteryPack.cell.electricModel.resistor.agingR.y, batteryPack.cell.electricModel.resistor.agingFactor.y, batteryPack.cell.electricModel.rc1.v, batteryPack.cell.electricModel.rc1.electricCurrent, batteryPack.cell.electricModel.rc1.stateOfCharge, batteryPack.cell.electricModel.rc1.temperature, batteryPack.cell.electricModel.rc1.SOH_R, batteryPack.cell.electricModel.rc1.SOH_C, batteryPack.cell.electricModel.rc1.stateOfHealthInputR, batteryPack.cell.electricModel.rc1.stateOfHealthInputC, batteryPack.cell.electricModel.rc1.stateOfHealthInternalR, batteryPack.cell.electricModel.rc1.stateOfHealthInternalC, batteryPack.cell.electricModel.rc1.p.v, batteryPack.cell.electricModel.rc1.p.i, batteryPack.cell.electricModel.rc1.n.v, batteryPack.cell.electricModel.rc1.n.i, batteryPack.cell.electricModel.rc1.tablesR.electricCurrent, batteryPack.cell.electricModel.rc1.tablesR.y, batteryPack.cell.electricModel.rc1.tablesR.stateOfCharge, batteryPack.cell.electricModel.rc1.tablesR.temperature, batteryPack.cell.electricModel.rc1.tablesR.tableInput1, batteryPack.cell.electricModel.rc1.tablesR.tableInput2, batteryPack.cell.electricModel.rc1.tablesR.tableInput3, batteryPack.cell.electricModel.rc1.tablesR.input1.y, batteryPack.cell.electricModel.rc1.tablesR.input2.y, batteryPack.cell.electricModel.rc1.tablesR.input3.y, batteryPack.cell.electricModel.rc1.tablesR.ndTable.'u[1]', batteryPack.cell.electricModel.rc1.tablesR.ndTable.'u[2]', batteryPack.cell.electricModel.rc1.tablesR.ndTable.'u[3]', batteryPack.cell.electricModel.rc1.tablesR.ndTable.y, batteryPack.cell.electricModel.rc1.tablesC.electricCurrent, batteryPack.cell.electricModel.rc1.tablesC.y, batteryPack.cell.electricModel.rc1.tablesC.stateOfCharge, batteryPack.cell.electricModel.rc1.tablesC.temperature, batteryPack.cell.electricModel.rc1.tablesC.tableInput1, batteryPack.cell.electricModel.rc1.tablesC.tableInput2, batteryPack.cell.electricModel.rc1.tablesC.tableInput3, batteryPack.cell.electricModel.rc1.tablesC.input1.y, batteryPack.cell.electricModel.rc1.tablesC.input2.y, batteryPack.cell.electricModel.rc1.tablesC.input3.y, batteryPack.cell.electricModel.rc1.tablesC.ndTable.'u[1]', batteryPack.cell.electricModel.rc1.tablesC.ndTable.'u[2]', batteryPack.cell.electricModel.rc1.tablesC.ndTable.'u[3]', batteryPack.cell.electricModel.rc1.tablesC.ndTable.y, batteryPack.cell.electricModel.rc1.variableCapacitor.v, batteryPack.cell.electricModel.rc1.variableCapacitor._v_der, batteryPack.cell.electricModel.rc1.variableCapacitor.i, batteryPack.cell.electricModel.rc1.variableCapacitor.C, batteryPack.cell.electricModel.rc1.variableCapacitor.Q, batteryPack.cell.electricModel.rc1.variableCapacitor.p.v, batteryPack.cell.electricModel.rc1.variableCapacitor.p.i, batteryPack.cell.electricModel.rc1.variableCapacitor.n.v, batteryPack.cell.electricModel.rc1.variableCapacitor.n.i, batteryPack.cell.electricModel.rc1.variableResistor.v, batteryPack.cell.electricModel.rc1.variableResistor.i, batteryPack.cell.electricModel.rc1.variableResistor.LossPower, batteryPack.cell.electricModel.rc1.variableResistor.R_actual, batteryPack.cell.electricModel.rc1.variableResistor.R, batteryPack.cell.electricModel.rc1.variableResistor.p.v, batteryPack.cell.electricModel.rc1.variableResistor.p.i, batteryPack.cell.electricModel.rc1.variableResistor.n.v, batteryPack.cell.electricModel.rc1.variableResistor.n.i, batteryPack.cell.electricModel.rc1.agingFactorR.y, batteryPack.cell.electricModel.rc1.agingR.u1, batteryPack.cell.electricModel.rc1.agingR.u2, batteryPack.cell.electricModel.rc1.agingR.y, batteryPack.cell.electricModel.rc1.gainR.u, batteryPack.cell.electricModel.rc1.gainR.y, batteryPack.cell.electricModel.rc1.agingFactorC.y, batteryPack.cell.electricModel.rc1.agingC.u1, batteryPack.cell.electricModel.rc1.agingC.u2, batteryPack.cell.electricModel.rc1.agingC.y, batteryPack.cell.electricModel.rc1.gainC.u, batteryPack.cell.electricModel.rc1.gainC.y, batteryPack.cell.electricModel.rc2.v, batteryPack.cell.electricModel.rc2.electricCurrent, batteryPack.cell.electricModel.rc2.stateOfCharge, batteryPack.cell.electricModel.rc2.temperature, batteryPack.cell.electricModel.rc2.SOH_R, batteryPack.cell.electricModel.rc2.SOH_C, batteryPack.cell.electricModel.rc2.stateOfHealthInputR, batteryPack.cell.electricModel.rc2.stateOfHealthInputC, batteryPack.cell.electricModel.rc2.stateOfHealthInternalR, batteryPack.cell.electricModel.rc2.stateOfHealthInternalC, batteryPack.cell.electricModel.rc2.p.v} = fmi_Functions.fmiGetReal(fmi, {637535267, 637535262, 637535628, 637537305, 905971087, 637535633, 637535633, 637534522, 637537305, 637535257, 637534626, 637535635, 637535635, 637534606, 637535262, 637535635, 637534606, 905971092, 637537305, 33554444, 637534756, 637534606, 637534596, 637534606, 637534596, 637534606, 637534596, 637535257, 637537305, 637535637, 637535638, 637537305, 637535641, 33554444, 637534756, 33554444, 637535266, 637535267, 33554444, 637535266, 637535267, 637535644, 637535645, 637535646, 637535641, 637537305, 637536004, 33554444, 637534756, 33554444, 637535266, 637535267, 33554444, 637535266, 637535267, 637536007, 637536008, 637536009, 637536004, 33554461, 587202589, 637536369, 637536371, 905971830, 637535257, 637536369, 637535637, 637536370, 637536379, 637536380, 905971840, 637536386, 637536386, 637535257, 637536380, 637535637, 637536381, 637534606, 637534606, 637535641, 637536387, 637536387, 637536387, 637534596, 637534596, 637536004, 637536389, 637536389, 637536389, 905971847, 637537305, 33554444, 637534756, 637534606, 637534596, 637534606, 637534596, 637534606, 637534596, 637535637}, myTime);
{batteryPack.cell.electricModel.rc2.p.i, batteryPack.cell.electricModel.rc2.n.v, batteryPack.cell.electricModel.rc2.n.i, batteryPack.cell.electricModel.rc2.tablesR.electricCurrent, batteryPack.cell.electricModel.rc2.tablesR.y, batteryPack.cell.electricModel.rc2.tablesR.stateOfCharge, batteryPack.cell.electricModel.rc2.tablesR.temperature, batteryPack.cell.electricModel.rc2.tablesR.tableInput1, batteryPack.cell.electricModel.rc2.tablesR.tableInput2, batteryPack.cell.electricModel.rc2.tablesR.tableInput3, batteryPack.cell.electricModel.rc2.tablesR.input1.y, batteryPack.cell.electricModel.rc2.tablesR.input2.y, batteryPack.cell.electricModel.rc2.tablesR.input3.y, batteryPack.cell.electricModel.rc2.tablesR.ndTable.'u[1]', batteryPack.cell.electricModel.rc2.tablesR.ndTable.'u[2]', batteryPack.cell.electricModel.rc2.tablesR.ndTable.'u[3]', batteryPack.cell.electricModel.rc2.tablesR.ndTable.y, batteryPack.cell.electricModel.rc2.tablesC.electricCurrent, batteryPack.cell.electricModel.rc2.tablesC.y, batteryPack.cell.electricModel.rc2.tablesC.stateOfCharge, batteryPack.cell.electricModel.rc2.tablesC.temperature, batteryPack.cell.electricModel.rc2.tablesC.tableInput1, batteryPack.cell.electricModel.rc2.tablesC.tableInput2, batteryPack.cell.electricModel.rc2.tablesC.tableInput3, batteryPack.cell.electricModel.rc2.tablesC.input1.y, batteryPack.cell.electricModel.rc2.tablesC.input2.y, batteryPack.cell.electricModel.rc2.tablesC.input3.y, batteryPack.cell.electricModel.rc2.tablesC.ndTable.'u[1]', batteryPack.cell.electricModel.rc2.tablesC.ndTable.'u[2]', batteryPack.cell.electricModel.rc2.tablesC.ndTable.'u[3]', batteryPack.cell.electricModel.rc2.tablesC.ndTable.y, batteryPack.cell.electricModel.rc2.variableCapacitor.v, batteryPack.cell.electricModel.rc2.variableCapacitor._v_der, batteryPack.cell.electricModel.rc2.variableCapacitor.i, batteryPack.cell.electricModel.rc2.variableCapacitor.C, batteryPack.cell.electricModel.rc2.variableCapacitor.Q, batteryPack.cell.electricModel.rc2.variableCapacitor.p.v, batteryPack.cell.electricModel.rc2.variableCapacitor.p.i, batteryPack.cell.electricModel.rc2.variableCapacitor.n.v, batteryPack.cell.electricModel.rc2.variableCapacitor.n.i, batteryPack.cell.electricModel.rc2.variableResistor.v, batteryPack.cell.electricModel.rc2.variableResistor.i, batteryPack.cell.electricModel.rc2.variableResistor.LossPower, batteryPack.cell.electricModel.rc2.variableResistor.R_actual, batteryPack.cell.electricModel.rc2.variableResistor.R, batteryPack.cell.electricModel.rc2.variableResistor.p.v, batteryPack.cell.electricModel.rc2.variableResistor.p.i, batteryPack.cell.electricModel.rc2.variableResistor.n.v, batteryPack.cell.electricModel.rc2.variableResistor.n.i, batteryPack.cell.electricModel.rc2.agingFactorR.y, batteryPack.cell.electricModel.rc2.agingR.u1, batteryPack.cell.electricModel.rc2.agingR.u2, batteryPack.cell.electricModel.rc2.agingR.y, batteryPack.cell.electricModel.rc2.gainR.u, batteryPack.cell.electricModel.rc2.gainR.y, batteryPack.cell.electricModel.rc2.agingFactorC.y, batteryPack.cell.electricModel.rc2.agingC.u1, batteryPack.cell.electricModel.rc2.agingC.u2, batteryPack.cell.electricModel.rc2.agingC.y, batteryPack.cell.electricModel.rc2.gainC.u, batteryPack.cell.electricModel.rc2.gainC.y, batteryPack.cell.agingModel.cellBus.C_actual, batteryPack.cell.agingModel.cellBus.OCV, batteryPack.cell.agingModel.cellBus.P_ideal, batteryPack.cell.agingModel.cellBus.P_loss, batteryPack.cell.agingModel.cellBus.P_terminal, batteryPack.cell.agingModel.cellBus.R_total, batteryPack.cell.agingModel.cellBus.SOC, batteryPack.cell.agingModel.cellBus.SOH, batteryPack.cell.agingModel.cellBus.SOH_resistance, batteryPack.cell.agingModel.cellBus.T, batteryPack.cell.agingModel.cellBus.i, batteryPack.cell.agingModel.cellBus.v, batteryPack.cell.agingModel.stateOfHealth.u, batteryPack.cell.agingModel.stateOfHealth.cellBus.SOH, batteryPack.cell.agingModel.stateOfHealth.cellBus.C_actual, batteryPack.cell.agingModel.stateOfHealth.cellBus.OCV, batteryPack.cell.agingModel.stateOfHealth.cellBus.P_ideal, batteryPack.cell.agingModel.stateOfHealth.cellBus.P_loss, batteryPack.cell.agingModel.stateOfHealth.cellBus.P_terminal, batteryPack.cell.agingModel.stateOfHealth.cellBus.R_total, batteryPack.cell.agingModel.stateOfHealth.cellBus.SOC, batteryPack.cell.agingModel.stateOfHealth.cellBus.SOH_resistance, batteryPack.cell.agingModel.stateOfHealth.cellBus.T, batteryPack.cell.agingModel.stateOfHealth.cellBus.i, batteryPack.cell.agingModel.stateOfHealth.cellBus.v, batteryPack.cell.agingModel.resistanceStateOfHealth.u, batteryPack.cell.agingModel.resistanceStateOfHealth.cellBus.SOH_resistance, batteryPack.cell.agingModel.resistanceStateOfHealth.cellBus.C_actual, batteryPack.cell.agingModel.resistanceStateOfHealth.cellBus.OCV, batteryPack.cell.agingModel.resistanceStateOfHealth.cellBus.P_ideal, batteryPack.cell.agingModel.resistanceStateOfHealth.cellBus.P_loss, batteryPack.cell.agingModel.resistanceStateOfHealth.cellBus.P_terminal, batteryPack.cell.agingModel.resistanceStateOfHealth.cellBus.R_total, batteryPack.cell.agingModel.resistanceStateOfHealth.cellBus.SOC, batteryPack.cell.agingModel.resistanceStateOfHealth.cellBus.SOH, batteryPack.cell.agingModel.resistanceStateOfHealth.cellBus.T, batteryPack.cell.agingModel.resistanceStateOfHealth.cellBus.i, batteryPack.cell.agingModel.resistanceStateOfHealth.cellBus.v, batteryPack.cell.agingModel.cycleAging.SOH} = fmi_Functions.fmiGetReal(fmi, {637536392, 637534591, 905969980, 637537305, 637536395, 33554444, 637534756, 33554444, 637535266, 637535267, 33554444, 637535266, 637535267, 637536398, 637536399, 637536400, 637536395, 637537305, 637536758, 33554444, 637534756, 33554444, 637535266, 637535267, 33554444, 637535266, 637535267, 637536761, 637536762, 637536763, 637536758, 33554462, 587202590, 637537123, 637537125, 905972584, 637535637, 637537123, 637534591, 637537124, 637537133, 637537134, 905972594, 637537140, 637537140, 637535637, 637537134, 637534591, 637537135, 637534606, 637534606, 637536395, 637537141, 637537141, 637537141, 637534596, 637534596, 637536758, 637537143, 637537143, 637537143, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637534756, 637537305, 637534522, 637534596, 637534596, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534606, 637534756, 637537305, 637534522, 637534606, 637534606, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534596, 637534756, 637537305, 637534522, 637534672}, myTime);
{batteryPack.cell.agingModel.cycleAging.SOHR, batteryPack.cell.agingModel.cycleAging.stateOfHealth, batteryPack.cell.agingModel.cycleAging.stateOfHealthR, batteryPack.cell.agingModel.cycleAging.R_growth_rel, batteryPack.cell.agingModel.cycleAging.C_loss_rel, batteryPack.cell.agingModel.cycleAging.OCV_mean, batteryPack.cell.agingModel.cycleAging.cycleTime, batteryPack.cell.agingModel.cycleAging._cycleTime_der, batteryPack.cell.agingModel.cycleAging.chargeAh_cycle, batteryPack.cell.agingModel.cycleAging._chargeAh_cycle_der, batteryPack.cell.agingModel.cycleAging.chargeAh_total, batteryPack.cell.agingModel.cycleAging._chargeAh_total_der, batteryPack.cell.agingModel.cycleAging.DOD_cycle, batteryPack.cell.agingModel.cycleAging._DOD_cycle_der, batteryPack.cell.agingModel.cycleAging.DOC_cycle, batteryPack.cell.agingModel.cycleAging._DOC_cycle_der, batteryPack.cell.agingModel.cycleAging.OCV_meanCounter, batteryPack.cell.agingModel.cycleAging._OCV_meanCounter_der, batteryPack.cell.agingModel.cycleAging.OCV, batteryPack.cell.agingModel.cycleAging.C_fade, batteryPack.cell.agingModel.cycleAging.R_increase, batteryPack.cell.agingModel.cycleAging.fullCycles, batteryPack.cell.agingModel.cycleAging._fullCycles_der, batteryPack.cell.agingModel.cycleAging.cellBus.C_actual, batteryPack.cell.agingModel.cycleAging.cellBus.OCV, batteryPack.cell.agingModel.cycleAging.cellBus.P_ideal, batteryPack.cell.agingModel.cycleAging.cellBus.P_loss, batteryPack.cell.agingModel.cycleAging.cellBus.P_terminal, batteryPack.cell.agingModel.cycleAging.cellBus.R_total, batteryPack.cell.agingModel.cycleAging.cellBus.SOC, batteryPack.cell.agingModel.cycleAging.cellBus.SOH, batteryPack.cell.agingModel.cycleAging.cellBus.SOH_resistance, batteryPack.cell.agingModel.cycleAging.cellBus.T, batteryPack.cell.agingModel.cycleAging.cellBus.i, batteryPack.cell.agingModel.cycleAging.cellBus.v, batteryPack.cell.agingModel.cycleAging.conditionalLowPassSOH.u, batteryPack.cell.agingModel.cycleAging.conditionalLowPassSOH.y, batteryPack.cell.agingModel.cycleAging.conditionalLowPassSOH.noFilter.u, batteryPack.cell.agingModel.cycleAging.conditionalLowPassSOH.noFilter.y, batteryPack.cell.agingModel.cycleAging.conditionalLowPassSOH.scaling.u, batteryPack.cell.agingModel.cycleAging.conditionalLowPassSOH.scaling.y, batteryPack.cell.agingModel.cycleAging.conditionalLowPassSOHR.u, batteryPack.cell.agingModel.cycleAging.conditionalLowPassSOHR.y, batteryPack.cell.agingModel.cycleAging.conditionalLowPassSOHR.noFilter.u, batteryPack.cell.agingModel.cycleAging.conditionalLowPassSOHR.noFilter.y, batteryPack.cell.agingModel.cycleAging.conditionalLowPassSOHR.scaling.u, batteryPack.cell.agingModel.cycleAging.conditionalLowPassSOHR.scaling.y, batteryPack.cell.agingModel.cycleAging.realExpression.y, batteryPack.cell.agingModel.cycleAging.realExpression1.y, batteryPack.cell.agingModel.cycleAging.cellCurrent.y, batteryPack.cell.agingModel.cycleAging.cellCurrent.cellBus.i, batteryPack.cell.agingModel.cycleAging.cellCurrent.cellBus.C_actual, batteryPack.cell.agingModel.cycleAging.cellCurrent.cellBus.OCV, batteryPack.cell.agingModel.cycleAging.cellCurrent.cellBus.P_ideal, batteryPack.cell.agingModel.cycleAging.cellCurrent.cellBus.P_loss, batteryPack.cell.agingModel.cycleAging.cellCurrent.cellBus.P_terminal, batteryPack.cell.agingModel.cycleAging.cellCurrent.cellBus.R_total, batteryPack.cell.agingModel.cycleAging.cellCurrent.cellBus.SOC, batteryPack.cell.agingModel.cycleAging.cellCurrent.cellBus.SOH, batteryPack.cell.agingModel.cycleAging.cellCurrent.cellBus.SOH_resistance, batteryPack.cell.agingModel.cycleAging.cellCurrent.cellBus.T, batteryPack.cell.agingModel.cycleAging.cellCurrent.cellBus.v, batteryPack.cell.agingModel.cycleAging.openCircuitVoltage.y, batteryPack.cell.agingModel.cycleAging.openCircuitVoltage.cellBus.OCV, batteryPack.cell.agingModel.cycleAging.openCircuitVoltage.cellBus.C_actual, batteryPack.cell.agingModel.cycleAging.openCircuitVoltage.cellBus.P_ideal, batteryPack.cell.agingModel.cycleAging.openCircuitVoltage.cellBus.P_loss, batteryPack.cell.agingModel.cycleAging.openCircuitVoltage.cellBus.P_terminal, batteryPack.cell.agingModel.cycleAging.openCircuitVoltage.cellBus.R_total, batteryPack.cell.agingModel.cycleAging.openCircuitVoltage.cellBus.SOC, batteryPack.cell.agingModel.cycleAging.openCircuitVoltage.cellBus.SOH, batteryPack.cell.agingModel.cycleAging.openCircuitVoltage.cellBus.SOH_resistance, batteryPack.cell.agingModel.cycleAging.openCircuitVoltage.cellBus.T, batteryPack.cell.agingModel.cycleAging.openCircuitVoltage.cellBus.i, batteryPack.cell.agingModel.cycleAging.openCircuitVoltage.cellBus.v, batteryPack.cell.agingModel.cycleAging.nominalCapacity.cellBus.C_actual, batteryPack.cell.agingModel.cycleAging.nominalCapacity.cellBus.OCV, batteryPack.cell.agingModel.cycleAging.nominalCapacity.cellBus.P_ideal, batteryPack.cell.agingModel.cycleAging.nominalCapacity.cellBus.P_loss, batteryPack.cell.agingModel.cycleAging.nominalCapacity.cellBus.P_terminal, batteryPack.cell.agingModel.cycleAging.nominalCapacity.cellBus.R_total, batteryPack.cell.agingModel.cycleAging.nominalCapacity.cellBus.SOC, batteryPack.cell.agingModel.cycleAging.nominalCapacity.cellBus.SOH, batteryPack.cell.agingModel.cycleAging.nominalCapacity.cellBus.SOH_resistance, batteryPack.cell.agingModel.cycleAging.nominalCapacity.cellBus.T, batteryPack.cell.agingModel.cycleAging.nominalCapacity.cellBus.i, batteryPack.cell.agingModel.cycleAging.nominalCapacity.cellBus.v, batteryPack.cell.agingModel.cycleAging.conditionalLowPassCurrent.u, batteryPack.cell.agingModel.cycleAging.conditionalLowPassCurrent.y, batteryPack.cell.agingModel.cycleAging.conditionalLowPassCurrent.firstOrder.u, batteryPack.cell.agingModel.cycleAging.conditionalLowPassCurrent.firstOrder.y, batteryPack.cell.agingModel.cycleAging.conditionalLowPassCurrent.firstOrder._y_der, batteryPack.cell.agingModel.cycleAging.conditionalLowPassCurrent.scaling.u, batteryPack.cell.agingModel.cycleAging.conditionalLowPassCurrent.scaling.y, batteryPack.cell.agingModel.calendarAging.SOH, batteryPack.cell.agingModel.calendarAging._SOH_der, batteryPack.cell.agingModel.calendarAging.SOHR, batteryPack.cell.agingModel.calendarAging._SOHR_der, batteryPack.cell.agingModel.calendarAging.stateOfHealth, batteryPack.cell.agingModel.calendarAging.stateOfHealthR} = fmi_Functions.fmiGetReal(fmi, {637534673, 637534672, 637534673, 637534705, 637534706, 637534707, 33554445, 587202573, 33554446, 587202574, 33554447, 587202575, 33554448, 587202576, 33554449, 587202577, 33554450, 587202578, 637534591, 637534708, 637534709, 33554451, 587202579, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637534756, 637537305, 637534522, 637534672, 637534672, 637534672, 637534672, 637534672, 637534672, 637534673, 637534673, 637534673, 637534673, 637534673, 637534673, 637534672, 637534673, 637537305, 637537305, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637534756, 637534522, 637534591, 637534591, 637534592, 637534996, 637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637534756, 637537305, 637534522, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637534756, 637537305, 637534522, 637535266, 33554452, 637535266, 33554452, 587202580, 637535266, 637535266, 33554453, 587202581, 33554454, 587202582, 33554453, 33554454}, myTime);
{batteryPack.cell.agingModel.calendarAging.ageOfCell, batteryPack.cell.agingModel.calendarAging._ageOfCell_der, batteryPack.cell.agingModel.calendarAging.C_fade, batteryPack.cell.agingModel.calendarAging.C_fadeArrhenius, batteryPack.cell.agingModel.calendarAging.R_increase, batteryPack.cell.agingModel.calendarAging.R_increaseArrhenius, batteryPack.cell.agingModel.calendarAging.T, batteryPack.cell.agingModel.calendarAging.C_loss_rel, batteryPack.cell.agingModel.calendarAging.C_loss, batteryPack.cell.agingModel.calendarAging.SOC, batteryPack.cell.agingModel.calendarAging.cellBus.C_actual, batteryPack.cell.agingModel.calendarAging.cellBus.OCV, batteryPack.cell.agingModel.calendarAging.cellBus.P_ideal, batteryPack.cell.agingModel.calendarAging.cellBus.P_loss, batteryPack.cell.agingModel.calendarAging.cellBus.P_terminal, batteryPack.cell.agingModel.calendarAging.cellBus.R_total, batteryPack.cell.agingModel.calendarAging.cellBus.SOC, batteryPack.cell.agingModel.calendarAging.cellBus.SOH, batteryPack.cell.agingModel.calendarAging.cellBus.SOH_resistance, batteryPack.cell.agingModel.calendarAging.cellBus.T, batteryPack.cell.agingModel.calendarAging.cellBus.i, batteryPack.cell.agingModel.calendarAging.cellBus.v, batteryPack.cell.agingModel.calendarAging.conditionalLowPassSOH.u, batteryPack.cell.agingModel.calendarAging.conditionalLowPassSOH.y, batteryPack.cell.agingModel.calendarAging.conditionalLowPassSOH.noFilter.u, batteryPack.cell.agingModel.calendarAging.conditionalLowPassSOH.noFilter.y, batteryPack.cell.agingModel.calendarAging.conditionalLowPassSOH.scaling.u, batteryPack.cell.agingModel.calendarAging.conditionalLowPassSOH.scaling.y, batteryPack.cell.agingModel.calendarAging.conditionalLowPassSOHR.u, batteryPack.cell.agingModel.calendarAging.conditionalLowPassSOHR.y, batteryPack.cell.agingModel.calendarAging.conditionalLowPassSOHR.noFilter.u, batteryPack.cell.agingModel.calendarAging.conditionalLowPassSOHR.noFilter.y, batteryPack.cell.agingModel.calendarAging.conditionalLowPassSOHR.scaling.u, batteryPack.cell.agingModel.calendarAging.conditionalLowPassSOHR.scaling.y, batteryPack.cell.agingModel.calendarAging.realExpression.y, batteryPack.cell.agingModel.calendarAging.realExpression1.y, batteryPack.cell.agingModel.calendarAging.C_fadeFactorTable.'u[1]', batteryPack.cell.agingModel.calendarAging.C_fadeFactorTable.y, batteryPack.cell.agingModel.calendarAging.R_increaseFactorTable.'u[1]', batteryPack.cell.agingModel.calendarAging.R_increaseFactorTable.y, batteryPack.cell.agingModel.calendarAging.temperature.y, batteryPack.cell.agingModel.calendarAging.temperature.cellBus.T, batteryPack.cell.agingModel.calendarAging.temperature.cellBus.C_actual, batteryPack.cell.agingModel.calendarAging.temperature.cellBus.OCV, batteryPack.cell.agingModel.calendarAging.temperature.cellBus.P_ideal, batteryPack.cell.agingModel.calendarAging.temperature.cellBus.P_loss, batteryPack.cell.agingModel.calendarAging.temperature.cellBus.P_terminal, batteryPack.cell.agingModel.calendarAging.temperature.cellBus.R_total, batteryPack.cell.agingModel.calendarAging.temperature.cellBus.SOC, batteryPack.cell.agingModel.calendarAging.temperature.cellBus.SOH, batteryPack.cell.agingModel.calendarAging.temperature.cellBus.SOH_resistance, batteryPack.cell.agingModel.calendarAging.temperature.cellBus.i, batteryPack.cell.agingModel.calendarAging.temperature.cellBus.v, batteryPack.cell.agingModel.calendarAging.nominalCapacity.cellBus.C_actual, batteryPack.cell.agingModel.calendarAging.nominalCapacity.cellBus.OCV, batteryPack.cell.agingModel.calendarAging.nominalCapacity.cellBus.P_ideal, batteryPack.cell.agingModel.calendarAging.nominalCapacity.cellBus.P_loss, batteryPack.cell.agingModel.calendarAging.nominalCapacity.cellBus.P_terminal, batteryPack.cell.agingModel.calendarAging.nominalCapacity.cellBus.R_total, batteryPack.cell.agingModel.calendarAging.nominalCapacity.cellBus.SOC, batteryPack.cell.agingModel.calendarAging.nominalCapacity.cellBus.SOH, batteryPack.cell.agingModel.calendarAging.nominalCapacity.cellBus.SOH_resistance, batteryPack.cell.agingModel.calendarAging.nominalCapacity.cellBus.T, batteryPack.cell.agingModel.calendarAging.nominalCapacity.cellBus.i, batteryPack.cell.agingModel.calendarAging.nominalCapacity.cellBus.v, batteryPack.cell.agingModel.calendarAging.stateOfCharge.y, batteryPack.cell.agingModel.calendarAging.stateOfCharge.cellBus.SOC, batteryPack.cell.agingModel.calendarAging.stateOfCharge.cellBus.C_actual, batteryPack.cell.agingModel.calendarAging.stateOfCharge.cellBus.OCV, batteryPack.cell.agingModel.calendarAging.stateOfCharge.cellBus.P_ideal, batteryPack.cell.agingModel.calendarAging.stateOfCharge.cellBus.P_loss, batteryPack.cell.agingModel.calendarAging.stateOfCharge.cellBus.P_terminal, batteryPack.cell.agingModel.calendarAging.stateOfCharge.cellBus.R_total, batteryPack.cell.agingModel.calendarAging.stateOfCharge.cellBus.SOH, batteryPack.cell.agingModel.calendarAging.stateOfCharge.cellBus.SOH_resistance, batteryPack.cell.agingModel.calendarAging.stateOfCharge.cellBus.T, batteryPack.cell.agingModel.calendarAging.stateOfCharge.cellBus.i, batteryPack.cell.agingModel.calendarAging.stateOfCharge.cellBus.v, batteryPack.cell.agingModel.superposition.SOH_cycle, batteryPack.cell.agingModel.superposition.SOH_calendar, batteryPack.cell.agingModel.superposition.SOH_out, batteryPack.cell.agingModel.superposition.add.u2, batteryPack.cell.agingModel.superposition.add.u3, batteryPack.cell.agingModel.superposition.add.y, batteryPack.cell.agingModel.superposition1.SOH_cycle, batteryPack.cell.agingModel.superposition1.SOH_calendar, batteryPack.cell.agingModel.superposition1.SOH_out, batteryPack.cell.agingModel.superposition1.add.u2, batteryPack.cell.agingModel.superposition1.add.u3, batteryPack.cell.agingModel.superposition1.add.y, batteryPack.housing.innerHousingHeatPort.'top[1,1]'.T, batteryPack.housing.innerHousingHeatPort.'bottom[1,1]'.T, batteryPack.housing.innerHousingHeatPort.'left[1,1]'.T, batteryPack.housing.innerHousingHeatPort.'left[1,2]'.T, batteryPack.housing.innerHousingHeatPort.'left[1,3]'.T, batteryPack.housing.innerHousingHeatPort.'left[1,4]'.T, batteryPack.housing.innerHousingHeatPort.'left[1,5]'.T, batteryPack.housing.innerHousingHeatPort.'right[1,1]'.T, batteryPack.housing.innerHousingHeatPort.'right[1,2]'.T, batteryPack.housing.innerHousingHeatPort.'right[1,3]'.T} = fmi_Functions.fmiGetReal(fmi, {33554455, 587202583, 637534752, 637534753, 637534754, 637534755, 637534756, 637534757, 905970214, 33554444, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637534756, 637537305, 637534522, 33554453, 33554453, 33554453, 33554453, 33554453, 33554453, 33554454, 33554454, 33554454, 33554454, 33554454, 33554454, 33554453, 33554454, 637534761, 637534752, 637534768, 637534754, 637534756, 637534756, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637537305, 637534522, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637534756, 637537305, 637534522, 33554444, 33554444, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 637534596, 637534606, 637534756, 637537305, 637534522, 637534672, 33554453, 637534596, 637534672, 33554453, 637534596, 637534673, 33554454, 637534606, 637534673, 33554454, 637534606, 33554460, 33554456, 33554456, 33554457, 33554458, 33554459, 33554460, 33554456, 33554457, 33554458}, myTime);
{batteryPack.housing.innerHousingHeatPort.'right[1,4]'.T, batteryPack.housing.innerHousingHeatPort.'right[1,5]'.T, batteryPack.housing.innerHousingHeatPort.'front[1,1]'.T, batteryPack.housing.innerHousingHeatPort.'front[1,2]'.T, batteryPack.housing.innerHousingHeatPort.'front[1,3]'.T, batteryPack.housing.innerHousingHeatPort.'front[1,4]'.T, batteryPack.housing.innerHousingHeatPort.'front[1,5]'.T, batteryPack.housing.innerHousingHeatPort.'back[1,1]'.T, batteryPack.housing.innerHousingHeatPort.'back[1,2]'.T, batteryPack.housing.innerHousingHeatPort.'back[1,3]'.T, batteryPack.housing.innerHousingHeatPort.'back[1,4]'.T, batteryPack.housing.innerHousingHeatPort.'back[1,5]'.T, batteryPack.housing.outerHousingHeatPort.'top[1,1]'.T, batteryPack.housing.outerHousingHeatPort.'bottom[1,1]'.T, batteryPack.housing.outerHousingHeatPort.'left[1,1]'.T, batteryPack.housing.outerHousingHeatPort.'left[1,2]'.T, batteryPack.housing.outerHousingHeatPort.'left[1,3]'.T, batteryPack.housing.outerHousingHeatPort.'left[1,4]'.T, batteryPack.housing.outerHousingHeatPort.'left[1,5]'.T, batteryPack.housing.outerHousingHeatPort.'right[1,1]'.T, batteryPack.housing.outerHousingHeatPort.'right[1,2]'.T, batteryPack.housing.outerHousingHeatPort.'right[1,3]'.T, batteryPack.housing.outerHousingHeatPort.'right[1,4]'.T, batteryPack.housing.outerHousingHeatPort.'right[1,5]'.T, batteryPack.housing.outerHousingHeatPort.'front[1,1]'.T, batteryPack.housing.outerHousingHeatPort.'front[1,2]'.T, batteryPack.housing.outerHousingHeatPort.'front[1,3]'.T, batteryPack.housing.outerHousingHeatPort.'front[1,4]'.T, batteryPack.housing.outerHousingHeatPort.'front[1,5]'.T, batteryPack.housing.outerHousingHeatPort.'back[1,1]'.T, batteryPack.housing.outerHousingHeatPort.'back[1,2]'.T, batteryPack.housing.outerHousingHeatPort.'back[1,3]'.T, batteryPack.housing.outerHousingHeatPort.'back[1,4]'.T, batteryPack.housing.outerHousingHeatPort.'back[1,5]'.T, batteryPack.housing.bottom.port_a.T, batteryPack.housing.bottom.port_b.T, batteryPack.housing.top.port_a.T, batteryPack.housing.top.port_b.T, batteryPack.housing.'front[1]'.port_a.T, batteryPack.housing.'front[1]'.port_b.T, batteryPack.housing.'front[2]'.port_a.T, batteryPack.housing.'front[2]'.port_b.T, batteryPack.housing.'front[3]'.port_a.T, batteryPack.housing.'front[3]'.port_b.T, batteryPack.housing.'front[4]'.port_a.T, batteryPack.housing.'front[4]'.port_b.T, batteryPack.housing.'front[5]'.port_a.T, batteryPack.housing.'front[5]'.port_b.T, batteryPack.housing.'right[1]'.port_a.T, batteryPack.housing.'right[1]'.port_b.T, batteryPack.housing.'right[2]'.port_a.T, batteryPack.housing.'right[2]'.port_b.T, batteryPack.housing.'right[3]'.port_a.T, batteryPack.housing.'right[3]'.port_b.T, batteryPack.housing.'right[4]'.port_a.T, batteryPack.housing.'right[4]'.port_b.T, batteryPack.housing.'right[5]'.port_a.T, batteryPack.housing.'right[5]'.port_b.T, batteryPack.housing.'left[1]'.port_a.T, batteryPack.housing.'left[1]'.port_b.T, batteryPack.housing.'left[2]'.port_a.T, batteryPack.housing.'left[2]'.port_b.T, batteryPack.housing.'left[3]'.port_a.T, batteryPack.housing.'left[3]'.port_b.T, batteryPack.housing.'left[4]'.port_a.T, batteryPack.housing.'left[4]'.port_b.T, batteryPack.housing.'left[5]'.port_a.T, batteryPack.housing.'left[5]'.port_b.T, batteryPack.housing.'back[1]'.port_a.T, batteryPack.housing.'back[1]'.port_b.T, batteryPack.housing.'back[2]'.port_a.T, batteryPack.housing.'back[2]'.port_b.T, batteryPack.housing.'back[3]'.port_a.T, batteryPack.housing.'back[3]'.port_b.T, batteryPack.housing.'back[4]'.port_a.T, batteryPack.housing.'back[4]'.port_b.T, batteryPack.housing.'back[5]'.port_a.T, batteryPack.housing.'back[5]'.port_b.T, batteryPack.electricScalingPos.p.v, batteryPack.electricScalingPos.p.i, batteryPack.electricScalingPos.n.v, batteryPack.electricScalingPos.n.i, batteryPack.electricScalingNeg.p.i, batteryPack.electricScalingNeg.n.i, batteryPack.thermalScaling.positivePin.battery.T, batteryPack.thermalScaling.positivePin.batteryPack.T, batteryPack.thermalScaling.negativePin.battery.T, batteryPack.thermalScaling.negativePin.batteryPack.T, batteryPack.thermalScaling.'surface[1,1]'.battery.T, batteryPack.thermalScaling.'surface[1,1]'.batteryPack.T, batteryPack.thermalScaling.'surface[1,2]'.battery.T, batteryPack.thermalScaling.'surface[1,2]'.batteryPack.T, batteryPack.thermalScaling.'surface[1,3]'.battery.T, batteryPack.thermalScaling.'surface[1,3]'.batteryPack.T, batteryPack.thermalScaling.'surface[1,4]'.battery.T, batteryPack.thermalScaling.'surface[1,4]'.batteryPack.T, batteryPack.thermalScaling.'surface[1,5]'.battery.T, batteryPack.thermalScaling.'surface[1,5]'.batteryPack.T, batteryPack.thermalScaling.'surface[2,1]'.battery.T, batteryPack.thermalScaling.'surface[2,1]'.batteryPack.T} = fmi_Functions.fmiGetReal(fmi, {33554459, 33554460, 33554456, 33554457, 33554458, 33554459, 33554460, 33554456, 33554457, 33554458, 33554459, 33554460, 33554460, 33554456, 33554456, 33554457, 33554458, 33554459, 33554460, 33554456, 33554457, 33554458, 33554459, 33554460, 33554456, 33554457, 33554458, 33554459, 33554460, 33554456, 33554457, 33554458, 33554459, 33554460, 33554456, 33554456, 33554460, 33554460, 33554456, 33554456, 33554457, 33554457, 33554458, 33554458, 33554459, 33554459, 33554460, 33554460, 33554456, 33554456, 33554457, 33554457, 33554458, 33554458, 33554459, 33554459, 33554460, 33554460, 33554456, 33554456, 33554457, 33554457, 33554458, 33554458, 33554459, 33554459, 33554460, 33554460, 33554456, 33554456, 33554457, 33554457, 33554458, 33554458, 33554459, 33554459, 33554460, 33554460, 637534381, 637534508, 637534522, 637534626, 905970330, 905970083, 33554460, 33554460, 33554456, 33554456, 33554456, 33554456, 33554457, 33554457, 33554458, 33554458, 33554459, 33554459, 33554460, 33554460, 33554456, 33554456}, myTime);
{batteryPack.thermalScaling.'surface[2,2]'.battery.T, batteryPack.thermalScaling.'surface[2,2]'.batteryPack.T, batteryPack.thermalScaling.'surface[2,3]'.battery.T, batteryPack.thermalScaling.'surface[2,3]'.batteryPack.T, batteryPack.thermalScaling.'surface[2,4]'.battery.T, batteryPack.thermalScaling.'surface[2,4]'.batteryPack.T, batteryPack.thermalScaling.'surface[2,5]'.battery.T, batteryPack.thermalScaling.'surface[2,5]'.batteryPack.T, batteryPack.thermalScaling.'surface[3,1]'.battery.T, batteryPack.thermalScaling.'surface[3,1]'.batteryPack.T, batteryPack.thermalScaling.'surface[3,2]'.battery.T, batteryPack.thermalScaling.'surface[3,2]'.batteryPack.T, batteryPack.thermalScaling.'surface[3,3]'.battery.T, batteryPack.thermalScaling.'surface[3,3]'.batteryPack.T, batteryPack.thermalScaling.'surface[3,4]'.battery.T, batteryPack.thermalScaling.'surface[3,4]'.batteryPack.T, batteryPack.thermalScaling.'surface[3,5]'.battery.T, batteryPack.thermalScaling.'surface[3,5]'.batteryPack.T, batteryPack.thermalScaling.'surface[4,1]'.battery.T, batteryPack.thermalScaling.'surface[4,1]'.batteryPack.T, batteryPack.thermalScaling.'surface[4,2]'.battery.T, batteryPack.thermalScaling.'surface[4,2]'.batteryPack.T, batteryPack.thermalScaling.'surface[4,3]'.battery.T, batteryPack.thermalScaling.'surface[4,3]'.batteryPack.T, batteryPack.thermalScaling.'surface[4,4]'.battery.T, batteryPack.thermalScaling.'surface[4,4]'.batteryPack.T, batteryPack.thermalScaling.'surface[4,5]'.battery.T, batteryPack.thermalScaling.'surface[4,5]'.batteryPack.T, batteryPack.thermalScaling.cylindricHeatPortCell.'surface[1,1]'.T, batteryPack.thermalScaling.cylindricHeatPortCell.'surface[1,2]'.T, batteryPack.thermalScaling.cylindricHeatPortCell.'surface[1,3]'.T, batteryPack.thermalScaling.cylindricHeatPortCell.'surface[1,4]'.T, batteryPack.thermalScaling.cylindricHeatPortCell.'surface[1,5]'.T, batteryPack.thermalScaling.cylindricHeatPortCell.'surface[2,1]'.T, batteryPack.thermalScaling.cylindricHeatPortCell.'surface[2,2]'.T, batteryPack.thermalScaling.cylindricHeatPortCell.'surface[2,3]'.T, batteryPack.thermalScaling.cylindricHeatPortCell.'surface[2,4]'.T, batteryPack.thermalScaling.cylindricHeatPortCell.'surface[2,5]'.T, batteryPack.thermalScaling.cylindricHeatPortCell.'surface[3,1]'.T, batteryPack.thermalScaling.cylindricHeatPortCell.'surface[3,2]'.T, batteryPack.thermalScaling.cylindricHeatPortCell.'surface[3,3]'.T, batteryPack.thermalScaling.cylindricHeatPortCell.'surface[3,4]'.T, batteryPack.thermalScaling.cylindricHeatPortCell.'surface[3,5]'.T, batteryPack.thermalScaling.cylindricHeatPortCell.'surface[4,1]'.T, batteryPack.thermalScaling.cylindricHeatPortCell.'surface[4,2]'.T, batteryPack.thermalScaling.cylindricHeatPortCell.'surface[4,3]'.T, batteryPack.thermalScaling.cylindricHeatPortCell.'surface[4,4]'.T, batteryPack.thermalScaling.cylindricHeatPortCell.'surface[4,5]'.T, batteryPack.thermalScaling.cylindricHeatPortCell.positivePin.T, batteryPack.thermalScaling.cylindricHeatPortCell.negativePin.T, batteryPack.thermalScaling.InnerHousingHeatPort.'top[1,1]'.T, batteryPack.thermalScaling.InnerHousingHeatPort.'bottom[1,1]'.T, batteryPack.thermalScaling.InnerHousingHeatPort.'left[1,1]'.T, batteryPack.thermalScaling.InnerHousingHeatPort.'left[1,2]'.T, batteryPack.thermalScaling.InnerHousingHeatPort.'left[1,3]'.T, batteryPack.thermalScaling.InnerHousingHeatPort.'left[1,4]'.T, batteryPack.thermalScaling.InnerHousingHeatPort.'left[1,5]'.T, batteryPack.thermalScaling.InnerHousingHeatPort.'right[1,1]'.T, batteryPack.thermalScaling.InnerHousingHeatPort.'right[1,2]'.T, batteryPack.thermalScaling.InnerHousingHeatPort.'right[1,3]'.T, batteryPack.thermalScaling.InnerHousingHeatPort.'right[1,4]'.T, batteryPack.thermalScaling.InnerHousingHeatPort.'right[1,5]'.T, batteryPack.thermalScaling.InnerHousingHeatPort.'front[1,1]'.T, batteryPack.thermalScaling.InnerHousingHeatPort.'front[1,2]'.T, batteryPack.thermalScaling.InnerHousingHeatPort.'front[1,3]'.T, batteryPack.thermalScaling.InnerHousingHeatPort.'front[1,4]'.T, batteryPack.thermalScaling.InnerHousingHeatPort.'front[1,5]'.T, batteryPack.thermalScaling.InnerHousingHeatPort.'back[1,1]'.T, batteryPack.thermalScaling.InnerHousingHeatPort.'back[1,2]'.T, batteryPack.thermalScaling.InnerHousingHeatPort.'back[1,3]'.T, batteryPack.thermalScaling.InnerHousingHeatPort.'back[1,4]'.T, batteryPack.thermalScaling.InnerHousingHeatPort.'back[1,5]'.T, batteryPack.idealPowerCell.y, batteryPack.idealPowerCell.cellBus.P_ideal, batteryPack.idealPowerCell.cellBus.C_actual, batteryPack.idealPowerCell.cellBus.OCV, batteryPack.idealPowerCell.cellBus.P_loss, batteryPack.idealPowerCell.cellBus.P_terminal, batteryPack.idealPowerCell.cellBus.R_total, batteryPack.idealPowerCell.cellBus.SOC, batteryPack.idealPowerCell.cellBus.SOH, batteryPack.idealPowerCell.cellBus.SOH_resistance, batteryPack.idealPowerCell.cellBus.T, batteryPack.idealPowerCell.cellBus.i, batteryPack.idealPowerCell.cellBus.v, batteryPack.fromCellToPack.packBus.C_actual, batteryPack.fromCellToPack.packBus.I_max, batteryPack.fromCellToPack.packBus.I_min, batteryPack.fromCellToPack.packBus.I_pack, batteryPack.fromCellToPack.packBus.P_ideal, batteryPack.fromCellToPack.packBus.P_loss, batteryPack.fromCellToPack.packBus.P_terminal, batteryPack.fromCellToPack.packBus.SOC_max, batteryPack.fromCellToPack.packBus.SOC_mean, batteryPack.fromCellToPack.packBus.SOC_min, batteryPack.fromCellToPack.packBus.SOH_max, batteryPack.fromCellToPack.packBus.SOH_mean, batteryPack.fromCellToPack.packBus.SOH_min, batteryPack.fromCellToPack.packBus.T_max, batteryPack.fromCellToPack.packBus.T_mean} = fmi_Functions.fmiGetReal(fmi, {33554457, 33554457, 33554458, 33554458, 33554459, 33554459, 33554460, 33554460, 33554456, 33554456, 33554457, 33554457, 33554458, 33554458, 33554459, 33554459, 33554460, 33554460, 33554456, 33554456, 33554457, 33554457, 33554458, 33554458, 33554459, 33554459, 33554460, 33554460, 33554456, 33554457, 33554458, 33554459, 33554460, 33554456, 33554457, 33554458, 33554459, 33554460, 33554456, 33554457, 33554458, 33554459, 33554460, 33554456, 33554457, 33554458, 33554459, 33554460, 33554460, 33554456, 33554460, 33554456, 33554456, 33554457, 33554458, 33554459, 33554460, 33554456, 33554457, 33554458, 33554459, 33554460, 33554456, 33554457, 33554458, 33554459, 33554460, 33554456, 33554457, 33554458, 33554459, 33554460, 637534996, 637534996, 637534592, 637534591, 637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637534756, 637537305, 637534522, 905970476, 637537305, 637537305, 637534508, 905970323, 905970324, 905970322, 33554444, 33554444, 33554444, 637534596, 637534596, 637534596, 637534756, 637534756}, myTime);
{batteryPack.fromCellToPack.packBus.T_min, batteryPack.fromCellToPack.packBus.V_max, batteryPack.fromCellToPack.packBus.V_min, batteryPack.fromCellToPack.packBus.V_pack, batteryPack.fromCellToPack.'cellBus[1,1]'.C_actual, batteryPack.fromCellToPack.'cellBus[1,1]'.OCV, batteryPack.fromCellToPack.'cellBus[1,1]'.P_ideal, batteryPack.fromCellToPack.'cellBus[1,1]'.P_loss, batteryPack.fromCellToPack.'cellBus[1,1]'.P_terminal, batteryPack.fromCellToPack.'cellBus[1,1]'.R_total, batteryPack.fromCellToPack.'cellBus[1,1]'.SOC, batteryPack.fromCellToPack.'cellBus[1,1]'.SOH, batteryPack.fromCellToPack.'cellBus[1,1]'.SOH_resistance, batteryPack.fromCellToPack.'cellBus[1,1]'.T, batteryPack.fromCellToPack.'cellBus[1,1]'.i, batteryPack.fromCellToPack.'cellBus[1,1]'.v, batteryPack.fromCellToPack.'stateOfCharge[1,1]'.y, batteryPack.fromCellToPack.'stateOfCharge[1,1]'.cellBus.SOC, batteryPack.fromCellToPack.'stateOfCharge[1,1]'.cellBus.C_actual, batteryPack.fromCellToPack.'stateOfCharge[1,1]'.cellBus.OCV, batteryPack.fromCellToPack.'stateOfCharge[1,1]'.cellBus.P_ideal, batteryPack.fromCellToPack.'stateOfCharge[1,1]'.cellBus.P_loss, batteryPack.fromCellToPack.'stateOfCharge[1,1]'.cellBus.P_terminal, batteryPack.fromCellToPack.'stateOfCharge[1,1]'.cellBus.R_total, batteryPack.fromCellToPack.'stateOfCharge[1,1]'.cellBus.SOH, batteryPack.fromCellToPack.'stateOfCharge[1,1]'.cellBus.SOH_resistance, batteryPack.fromCellToPack.'stateOfCharge[1,1]'.cellBus.T, batteryPack.fromCellToPack.'stateOfCharge[1,1]'.cellBus.i, batteryPack.fromCellToPack.'stateOfCharge[1,1]'.cellBus.v, batteryPack.fromCellToPack.'temperature[1,1]'.y, batteryPack.fromCellToPack.'temperature[1,1]'.cellBus.T, batteryPack.fromCellToPack.'temperature[1,1]'.cellBus.C_actual, batteryPack.fromCellToPack.'temperature[1,1]'.cellBus.OCV, batteryPack.fromCellToPack.'temperature[1,1]'.cellBus.P_ideal, batteryPack.fromCellToPack.'temperature[1,1]'.cellBus.P_loss, batteryPack.fromCellToPack.'temperature[1,1]'.cellBus.P_terminal, batteryPack.fromCellToPack.'temperature[1,1]'.cellBus.R_total, batteryPack.fromCellToPack.'temperature[1,1]'.cellBus.SOC, batteryPack.fromCellToPack.'temperature[1,1]'.cellBus.SOH, batteryPack.fromCellToPack.'temperature[1,1]'.cellBus.SOH_resistance, batteryPack.fromCellToPack.'temperature[1,1]'.cellBus.i, batteryPack.fromCellToPack.'temperature[1,1]'.cellBus.v, batteryPack.fromCellToPack.'cellVoltage[1,1]'.y, batteryPack.fromCellToPack.'cellVoltage[1,1]'.cellBus.v, batteryPack.fromCellToPack.'cellVoltage[1,1]'.cellBus.C_actual, batteryPack.fromCellToPack.'cellVoltage[1,1]'.cellBus.OCV, batteryPack.fromCellToPack.'cellVoltage[1,1]'.cellBus.P_ideal, batteryPack.fromCellToPack.'cellVoltage[1,1]'.cellBus.P_loss, batteryPack.fromCellToPack.'cellVoltage[1,1]'.cellBus.P_terminal, batteryPack.fromCellToPack.'cellVoltage[1,1]'.cellBus.R_total, batteryPack.fromCellToPack.'cellVoltage[1,1]'.cellBus.SOC, batteryPack.fromCellToPack.'cellVoltage[1,1]'.cellBus.SOH, batteryPack.fromCellToPack.'cellVoltage[1,1]'.cellBus.SOH_resistance, batteryPack.fromCellToPack.'cellVoltage[1,1]'.cellBus.T, batteryPack.fromCellToPack.'cellVoltage[1,1]'.cellBus.i, batteryPack.fromCellToPack.'cellCurrent[1,1]'.y, batteryPack.fromCellToPack.'cellCurrent[1,1]'.cellBus.i, batteryPack.fromCellToPack.'cellCurrent[1,1]'.cellBus.C_actual, batteryPack.fromCellToPack.'cellCurrent[1,1]'.cellBus.OCV, batteryPack.fromCellToPack.'cellCurrent[1,1]'.cellBus.P_ideal, batteryPack.fromCellToPack.'cellCurrent[1,1]'.cellBus.P_loss, batteryPack.fromCellToPack.'cellCurrent[1,1]'.cellBus.P_terminal, batteryPack.fromCellToPack.'cellCurrent[1,1]'.cellBus.R_total, batteryPack.fromCellToPack.'cellCurrent[1,1]'.cellBus.SOC, batteryPack.fromCellToPack.'cellCurrent[1,1]'.cellBus.SOH, batteryPack.fromCellToPack.'cellCurrent[1,1]'.cellBus.SOH_resistance, batteryPack.fromCellToPack.'cellCurrent[1,1]'.cellBus.T, batteryPack.fromCellToPack.'cellCurrent[1,1]'.cellBus.v, batteryPack.fromCellToPack.minVoltage.u, batteryPack.fromCellToPack.minVoltage.packBus.V_min, batteryPack.fromCellToPack.minVoltage.packBus.C_actual, batteryPack.fromCellToPack.minVoltage.packBus.I_max, batteryPack.fromCellToPack.minVoltage.packBus.I_min, batteryPack.fromCellToPack.minVoltage.packBus.I_pack, batteryPack.fromCellToPack.minVoltage.packBus.P_ideal, batteryPack.fromCellToPack.minVoltage.packBus.P_loss, batteryPack.fromCellToPack.minVoltage.packBus.P_terminal, batteryPack.fromCellToPack.minVoltage.packBus.SOC_max, batteryPack.fromCellToPack.minVoltage.packBus.SOC_mean, batteryPack.fromCellToPack.minVoltage.packBus.SOC_min, batteryPack.fromCellToPack.minVoltage.packBus.SOH_max, batteryPack.fromCellToPack.minVoltage.packBus.SOH_mean, batteryPack.fromCellToPack.minVoltage.packBus.SOH_min, batteryPack.fromCellToPack.minVoltage.packBus.T_max, batteryPack.fromCellToPack.minVoltage.packBus.T_mean, batteryPack.fromCellToPack.minVoltage.packBus.T_min, batteryPack.fromCellToPack.minVoltage.packBus.V_max, batteryPack.fromCellToPack.minVoltage.packBus.V_pack, batteryPack.fromCellToPack.maxVoltage.u, batteryPack.fromCellToPack.maxVoltage.packBus.V_max, batteryPack.fromCellToPack.maxVoltage.packBus.C_actual, batteryPack.fromCellToPack.maxVoltage.packBus.I_max, batteryPack.fromCellToPack.maxVoltage.packBus.I_min, batteryPack.fromCellToPack.maxVoltage.packBus.I_pack, batteryPack.fromCellToPack.maxVoltage.packBus.P_ideal, batteryPack.fromCellToPack.maxVoltage.packBus.P_loss, batteryPack.fromCellToPack.maxVoltage.packBus.P_terminal, batteryPack.fromCellToPack.maxVoltage.packBus.SOC_max, batteryPack.fromCellToPack.maxVoltage.packBus.SOC_mean, batteryPack.fromCellToPack.maxVoltage.packBus.SOC_min} = fmi_Functions.fmiGetReal(fmi, {637534756, 637534522, 637534522, 637534381, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637534756, 637537305, 637534522, 33554444, 33554444, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 637534596, 637534606, 637534756, 637537305, 637534522, 637534756, 637534756, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637537305, 637534522, 637534522, 637534522, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637534756, 637537305, 637537305, 637537305, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637534756, 637534522, 637534522, 637534522, 905970476, 637537305, 637537305, 637534508, 905970323, 905970324, 905970322, 33554444, 33554444, 33554444, 637534596, 637534596, 637534596, 637534756, 637534756, 637534756, 637534522, 637534381, 637534522, 637534522, 905970476, 637537305, 637537305, 637534508, 905970323, 905970324, 905970322, 33554444, 33554444, 33554444}, myTime);
{batteryPack.fromCellToPack.maxVoltage.packBus.SOH_max, batteryPack.fromCellToPack.maxVoltage.packBus.SOH_mean, batteryPack.fromCellToPack.maxVoltage.packBus.SOH_min, batteryPack.fromCellToPack.maxVoltage.packBus.T_max, batteryPack.fromCellToPack.maxVoltage.packBus.T_mean, batteryPack.fromCellToPack.maxVoltage.packBus.T_min, batteryPack.fromCellToPack.maxVoltage.packBus.V_min, batteryPack.fromCellToPack.maxVoltage.packBus.V_pack, batteryPack.fromCellToPack.minCurrent.u, batteryPack.fromCellToPack.minCurrent.packBus.I_min, batteryPack.fromCellToPack.minCurrent.packBus.C_actual, batteryPack.fromCellToPack.minCurrent.packBus.I_max, batteryPack.fromCellToPack.minCurrent.packBus.I_pack, batteryPack.fromCellToPack.minCurrent.packBus.P_ideal, batteryPack.fromCellToPack.minCurrent.packBus.P_loss, batteryPack.fromCellToPack.minCurrent.packBus.P_terminal, batteryPack.fromCellToPack.minCurrent.packBus.SOC_max, batteryPack.fromCellToPack.minCurrent.packBus.SOC_mean, batteryPack.fromCellToPack.minCurrent.packBus.SOC_min, batteryPack.fromCellToPack.minCurrent.packBus.SOH_max, batteryPack.fromCellToPack.minCurrent.packBus.SOH_mean, batteryPack.fromCellToPack.minCurrent.packBus.SOH_min, batteryPack.fromCellToPack.minCurrent.packBus.T_max, batteryPack.fromCellToPack.minCurrent.packBus.T_mean, batteryPack.fromCellToPack.minCurrent.packBus.T_min, batteryPack.fromCellToPack.minCurrent.packBus.V_max, batteryPack.fromCellToPack.minCurrent.packBus.V_min, batteryPack.fromCellToPack.minCurrent.packBus.V_pack, batteryPack.fromCellToPack.maxCurrent.u, batteryPack.fromCellToPack.maxCurrent.packBus.I_max, batteryPack.fromCellToPack.maxCurrent.packBus.C_actual, batteryPack.fromCellToPack.maxCurrent.packBus.I_min, batteryPack.fromCellToPack.maxCurrent.packBus.I_pack, batteryPack.fromCellToPack.maxCurrent.packBus.P_ideal, batteryPack.fromCellToPack.maxCurrent.packBus.P_loss, batteryPack.fromCellToPack.maxCurrent.packBus.P_terminal, batteryPack.fromCellToPack.maxCurrent.packBus.SOC_max, batteryPack.fromCellToPack.maxCurrent.packBus.SOC_mean, batteryPack.fromCellToPack.maxCurrent.packBus.SOC_min, batteryPack.fromCellToPack.maxCurrent.packBus.SOH_max, batteryPack.fromCellToPack.maxCurrent.packBus.SOH_mean, batteryPack.fromCellToPack.maxCurrent.packBus.SOH_min, batteryPack.fromCellToPack.maxCurrent.packBus.T_max, batteryPack.fromCellToPack.maxCurrent.packBus.T_mean, batteryPack.fromCellToPack.maxCurrent.packBus.T_min, batteryPack.fromCellToPack.maxCurrent.packBus.V_max, batteryPack.fromCellToPack.maxCurrent.packBus.V_min, batteryPack.fromCellToPack.maxCurrent.packBus.V_pack, batteryPack.fromCellToPack.meanSOC.u, batteryPack.fromCellToPack.meanSOC.packBus.SOC_mean, batteryPack.fromCellToPack.meanSOC.packBus.C_actual, batteryPack.fromCellToPack.meanSOC.packBus.I_max, batteryPack.fromCellToPack.meanSOC.packBus.I_min, batteryPack.fromCellToPack.meanSOC.packBus.I_pack, batteryPack.fromCellToPack.meanSOC.packBus.P_ideal, batteryPack.fromCellToPack.meanSOC.packBus.P_loss, batteryPack.fromCellToPack.meanSOC.packBus.P_terminal, batteryPack.fromCellToPack.meanSOC.packBus.SOC_max, batteryPack.fromCellToPack.meanSOC.packBus.SOC_min, batteryPack.fromCellToPack.meanSOC.packBus.SOH_max, batteryPack.fromCellToPack.meanSOC.packBus.SOH_mean, batteryPack.fromCellToPack.meanSOC.packBus.SOH_min, batteryPack.fromCellToPack.meanSOC.packBus.T_max, batteryPack.fromCellToPack.meanSOC.packBus.T_mean, batteryPack.fromCellToPack.meanSOC.packBus.T_min, batteryPack.fromCellToPack.meanSOC.packBus.V_max, batteryPack.fromCellToPack.meanSOC.packBus.V_min, batteryPack.fromCellToPack.meanSOC.packBus.V_pack, batteryPack.fromCellToPack.minSOC.u, batteryPack.fromCellToPack.minSOC.packBus.SOC_min, batteryPack.fromCellToPack.minSOC.packBus.C_actual, batteryPack.fromCellToPack.minSOC.packBus.I_max, batteryPack.fromCellToPack.minSOC.packBus.I_min, batteryPack.fromCellToPack.minSOC.packBus.I_pack, batteryPack.fromCellToPack.minSOC.packBus.P_ideal, batteryPack.fromCellToPack.minSOC.packBus.P_loss, batteryPack.fromCellToPack.minSOC.packBus.P_terminal, batteryPack.fromCellToPack.minSOC.packBus.SOC_max, batteryPack.fromCellToPack.minSOC.packBus.SOC_mean, batteryPack.fromCellToPack.minSOC.packBus.SOH_max, batteryPack.fromCellToPack.minSOC.packBus.SOH_mean, batteryPack.fromCellToPack.minSOC.packBus.SOH_min, batteryPack.fromCellToPack.minSOC.packBus.T_max, batteryPack.fromCellToPack.minSOC.packBus.T_mean, batteryPack.fromCellToPack.minSOC.packBus.T_min, batteryPack.fromCellToPack.minSOC.packBus.V_max, batteryPack.fromCellToPack.minSOC.packBus.V_min, batteryPack.fromCellToPack.minSOC.packBus.V_pack, batteryPack.fromCellToPack.maxSOC.u, batteryPack.fromCellToPack.maxSOC.packBus.SOC_max, batteryPack.fromCellToPack.maxSOC.packBus.C_actual, batteryPack.fromCellToPack.maxSOC.packBus.I_max, batteryPack.fromCellToPack.maxSOC.packBus.I_min, batteryPack.fromCellToPack.maxSOC.packBus.I_pack, batteryPack.fromCellToPack.maxSOC.packBus.P_ideal, batteryPack.fromCellToPack.maxSOC.packBus.P_loss, batteryPack.fromCellToPack.maxSOC.packBus.P_terminal, batteryPack.fromCellToPack.maxSOC.packBus.SOC_mean, batteryPack.fromCellToPack.maxSOC.packBus.SOC_min, batteryPack.fromCellToPack.maxSOC.packBus.SOH_max} = fmi_Functions.fmiGetReal(fmi, {637534596, 637534596, 637534596, 637534756, 637534756, 637534756, 637534522, 637534381, 637537305, 637537305, 905970476, 637537305, 637534508, 905970323, 905970324, 905970322, 33554444, 33554444, 33554444, 637534596, 637534596, 637534596, 637534756, 637534756, 637534756, 637534522, 637534522, 637534381, 637537305, 637537305, 905970476, 637537305, 637534508, 905970323, 905970324, 905970322, 33554444, 33554444, 33554444, 637534596, 637534596, 637534596, 637534756, 637534756, 637534756, 637534522, 637534522, 637534381, 33554444, 33554444, 905970476, 637537305, 637537305, 637534508, 905970323, 905970324, 905970322, 33554444, 33554444, 637534596, 637534596, 637534596, 637534756, 637534756, 637534756, 637534522, 637534522, 637534381, 33554444, 33554444, 905970476, 637537305, 637537305, 637534508, 905970323, 905970324, 905970322, 33554444, 33554444, 637534596, 637534596, 637534596, 637534756, 637534756, 637534756, 637534522, 637534522, 637534381, 33554444, 33554444, 905970476, 637537305, 637537305, 637534508, 905970323, 905970324, 905970322, 33554444, 33554444, 637534596}, myTime);
{batteryPack.fromCellToPack.maxSOC.packBus.SOH_mean, batteryPack.fromCellToPack.maxSOC.packBus.SOH_min, batteryPack.fromCellToPack.maxSOC.packBus.T_max, batteryPack.fromCellToPack.maxSOC.packBus.T_mean, batteryPack.fromCellToPack.maxSOC.packBus.T_min, batteryPack.fromCellToPack.maxSOC.packBus.V_max, batteryPack.fromCellToPack.maxSOC.packBus.V_min, batteryPack.fromCellToPack.maxSOC.packBus.V_pack, batteryPack.fromCellToPack.meanTemperature.u, batteryPack.fromCellToPack.meanTemperature.packBus.T_mean, batteryPack.fromCellToPack.meanTemperature.packBus.C_actual, batteryPack.fromCellToPack.meanTemperature.packBus.I_max, batteryPack.fromCellToPack.meanTemperature.packBus.I_min, batteryPack.fromCellToPack.meanTemperature.packBus.I_pack, batteryPack.fromCellToPack.meanTemperature.packBus.P_ideal, batteryPack.fromCellToPack.meanTemperature.packBus.P_loss, batteryPack.fromCellToPack.meanTemperature.packBus.P_terminal, batteryPack.fromCellToPack.meanTemperature.packBus.SOC_max, batteryPack.fromCellToPack.meanTemperature.packBus.SOC_mean, batteryPack.fromCellToPack.meanTemperature.packBus.SOC_min, batteryPack.fromCellToPack.meanTemperature.packBus.SOH_max, batteryPack.fromCellToPack.meanTemperature.packBus.SOH_mean, batteryPack.fromCellToPack.meanTemperature.packBus.SOH_min, batteryPack.fromCellToPack.meanTemperature.packBus.T_max, batteryPack.fromCellToPack.meanTemperature.packBus.T_min, batteryPack.fromCellToPack.meanTemperature.packBus.V_max, batteryPack.fromCellToPack.meanTemperature.packBus.V_min, batteryPack.fromCellToPack.meanTemperature.packBus.V_pack, batteryPack.fromCellToPack.minTemperature.u, batteryPack.fromCellToPack.minTemperature.packBus.T_min, batteryPack.fromCellToPack.minTemperature.packBus.C_actual, batteryPack.fromCellToPack.minTemperature.packBus.I_max, batteryPack.fromCellToPack.minTemperature.packBus.I_min, batteryPack.fromCellToPack.minTemperature.packBus.I_pack, batteryPack.fromCellToPack.minTemperature.packBus.P_ideal, batteryPack.fromCellToPack.minTemperature.packBus.P_loss, batteryPack.fromCellToPack.minTemperature.packBus.P_terminal, batteryPack.fromCellToPack.minTemperature.packBus.SOC_max, batteryPack.fromCellToPack.minTemperature.packBus.SOC_mean, batteryPack.fromCellToPack.minTemperature.packBus.SOC_min, batteryPack.fromCellToPack.minTemperature.packBus.SOH_max, batteryPack.fromCellToPack.minTemperature.packBus.SOH_mean, batteryPack.fromCellToPack.minTemperature.packBus.SOH_min, batteryPack.fromCellToPack.minTemperature.packBus.T_max, batteryPack.fromCellToPack.minTemperature.packBus.T_mean, batteryPack.fromCellToPack.minTemperature.packBus.V_max, batteryPack.fromCellToPack.minTemperature.packBus.V_min, batteryPack.fromCellToPack.minTemperature.packBus.V_pack, batteryPack.fromCellToPack.maxTemperature.u, batteryPack.fromCellToPack.maxTemperature.packBus.T_max, batteryPack.fromCellToPack.maxTemperature.packBus.C_actual, batteryPack.fromCellToPack.maxTemperature.packBus.I_max, batteryPack.fromCellToPack.maxTemperature.packBus.I_min, batteryPack.fromCellToPack.maxTemperature.packBus.I_pack, batteryPack.fromCellToPack.maxTemperature.packBus.P_ideal, batteryPack.fromCellToPack.maxTemperature.packBus.P_loss, batteryPack.fromCellToPack.maxTemperature.packBus.P_terminal, batteryPack.fromCellToPack.maxTemperature.packBus.SOC_max, batteryPack.fromCellToPack.maxTemperature.packBus.SOC_mean, batteryPack.fromCellToPack.maxTemperature.packBus.SOC_min, batteryPack.fromCellToPack.maxTemperature.packBus.SOH_max, batteryPack.fromCellToPack.maxTemperature.packBus.SOH_mean, batteryPack.fromCellToPack.maxTemperature.packBus.SOH_min, batteryPack.fromCellToPack.maxTemperature.packBus.T_mean, batteryPack.fromCellToPack.maxTemperature.packBus.T_min, batteryPack.fromCellToPack.maxTemperature.packBus.V_max, batteryPack.fromCellToPack.maxTemperature.packBus.V_min, batteryPack.fromCellToPack.maxTemperature.packBus.V_pack, batteryPack.fromCellToPack.meanSOH.u, batteryPack.fromCellToPack.meanSOH.packBus.SOH_mean, batteryPack.fromCellToPack.meanSOH.packBus.C_actual, batteryPack.fromCellToPack.meanSOH.packBus.I_max, batteryPack.fromCellToPack.meanSOH.packBus.I_min, batteryPack.fromCellToPack.meanSOH.packBus.I_pack, batteryPack.fromCellToPack.meanSOH.packBus.P_ideal, batteryPack.fromCellToPack.meanSOH.packBus.P_loss, batteryPack.fromCellToPack.meanSOH.packBus.P_terminal, batteryPack.fromCellToPack.meanSOH.packBus.SOC_max, batteryPack.fromCellToPack.meanSOH.packBus.SOC_mean, batteryPack.fromCellToPack.meanSOH.packBus.SOC_min, batteryPack.fromCellToPack.meanSOH.packBus.SOH_max, batteryPack.fromCellToPack.meanSOH.packBus.SOH_min, batteryPack.fromCellToPack.meanSOH.packBus.T_max, batteryPack.fromCellToPack.meanSOH.packBus.T_mean, batteryPack.fromCellToPack.meanSOH.packBus.T_min, batteryPack.fromCellToPack.meanSOH.packBus.V_max, batteryPack.fromCellToPack.meanSOH.packBus.V_min, batteryPack.fromCellToPack.meanSOH.packBus.V_pack, batteryPack.fromCellToPack.minSOH.u, batteryPack.fromCellToPack.minSOH.packBus.SOH_min, batteryPack.fromCellToPack.minSOH.packBus.C_actual, batteryPack.fromCellToPack.minSOH.packBus.I_max, batteryPack.fromCellToPack.minSOH.packBus.I_min, batteryPack.fromCellToPack.minSOH.packBus.I_pack, batteryPack.fromCellToPack.minSOH.packBus.P_ideal, batteryPack.fromCellToPack.minSOH.packBus.P_loss, batteryPack.fromCellToPack.minSOH.packBus.P_terminal, batteryPack.fromCellToPack.minSOH.packBus.SOC_max, batteryPack.fromCellToPack.minSOH.packBus.SOC_mean, batteryPack.fromCellToPack.minSOH.packBus.SOC_min} = fmi_Functions.fmiGetReal(fmi, {637534596, 637534596, 637534756, 637534756, 637534756, 637534522, 637534522, 637534381, 637534756, 637534756, 905970476, 637537305, 637537305, 637534508, 905970323, 905970324, 905970322, 33554444, 33554444, 33554444, 637534596, 637534596, 637534596, 637534756, 637534756, 637534522, 637534522, 637534381, 637534756, 637534756, 905970476, 637537305, 637537305, 637534508, 905970323, 905970324, 905970322, 33554444, 33554444, 33554444, 637534596, 637534596, 637534596, 637534756, 637534756, 637534522, 637534522, 637534381, 637534756, 637534756, 905970476, 637537305, 637537305, 637534508, 905970323, 905970324, 905970322, 33554444, 33554444, 33554444, 637534596, 637534596, 637534596, 637534756, 637534756, 637534522, 637534522, 637534381, 637534596, 637534596, 905970476, 637537305, 637537305, 637534508, 905970323, 905970324, 905970322, 33554444, 33554444, 33554444, 637534596, 637534596, 637534756, 637534756, 637534756, 637534522, 637534522, 637534381, 637534596, 637534596, 905970476, 637537305, 637537305, 637534508, 905970323, 905970324, 905970322, 33554444, 33554444, 33554444}, myTime);
{batteryPack.fromCellToPack.minSOH.packBus.SOH_max, batteryPack.fromCellToPack.minSOH.packBus.SOH_mean, batteryPack.fromCellToPack.minSOH.packBus.T_max, batteryPack.fromCellToPack.minSOH.packBus.T_mean, batteryPack.fromCellToPack.minSOH.packBus.T_min, batteryPack.fromCellToPack.minSOH.packBus.V_max, batteryPack.fromCellToPack.minSOH.packBus.V_min, batteryPack.fromCellToPack.minSOH.packBus.V_pack, batteryPack.fromCellToPack.maxSOH.u, batteryPack.fromCellToPack.maxSOH.packBus.SOH_max, batteryPack.fromCellToPack.maxSOH.packBus.C_actual, batteryPack.fromCellToPack.maxSOH.packBus.I_max, batteryPack.fromCellToPack.maxSOH.packBus.I_min, batteryPack.fromCellToPack.maxSOH.packBus.I_pack, batteryPack.fromCellToPack.maxSOH.packBus.P_ideal, batteryPack.fromCellToPack.maxSOH.packBus.P_loss, batteryPack.fromCellToPack.maxSOH.packBus.P_terminal, batteryPack.fromCellToPack.maxSOH.packBus.SOC_max, batteryPack.fromCellToPack.maxSOH.packBus.SOC_mean, batteryPack.fromCellToPack.maxSOH.packBus.SOC_min, batteryPack.fromCellToPack.maxSOH.packBus.SOH_mean, batteryPack.fromCellToPack.maxSOH.packBus.SOH_min, batteryPack.fromCellToPack.maxSOH.packBus.T_max, batteryPack.fromCellToPack.maxSOH.packBus.T_mean, batteryPack.fromCellToPack.maxSOH.packBus.T_min, batteryPack.fromCellToPack.maxSOH.packBus.V_max, batteryPack.fromCellToPack.maxSOH.packBus.V_min, batteryPack.fromCellToPack.maxSOH.packBus.V_pack, batteryPack.fromCellToPack.'stateOfHealth[1,1]'.y, batteryPack.fromCellToPack.'stateOfHealth[1,1]'.cellBus.SOH, batteryPack.fromCellToPack.'stateOfHealth[1,1]'.cellBus.C_actual, batteryPack.fromCellToPack.'stateOfHealth[1,1]'.cellBus.OCV, batteryPack.fromCellToPack.'stateOfHealth[1,1]'.cellBus.P_ideal, batteryPack.fromCellToPack.'stateOfHealth[1,1]'.cellBus.P_loss, batteryPack.fromCellToPack.'stateOfHealth[1,1]'.cellBus.P_terminal, batteryPack.fromCellToPack.'stateOfHealth[1,1]'.cellBus.R_total, batteryPack.fromCellToPack.'stateOfHealth[1,1]'.cellBus.SOC, batteryPack.fromCellToPack.'stateOfHealth[1,1]'.cellBus.SOH_resistance, batteryPack.fromCellToPack.'stateOfHealth[1,1]'.cellBus.T, batteryPack.fromCellToPack.'stateOfHealth[1,1]'.cellBus.i, batteryPack.fromCellToPack.'stateOfHealth[1,1]'.cellBus.v, batteryPack.fromCellToPack.minMax.'u[1,1]', batteryPack.fromCellToPack.minMax.yMax, batteryPack.fromCellToPack.minMax.yMin, batteryPack.fromCellToPack.minMax1.'u[1,1]', batteryPack.fromCellToPack.minMax1.yMax, batteryPack.fromCellToPack.minMax1.yMin, batteryPack.fromCellToPack.minMax2.'u[1,1]', batteryPack.fromCellToPack.minMax2.yMax, batteryPack.fromCellToPack.minMax2.yMin, batteryPack.fromCellToPack.minMax3.'u[1,1]', batteryPack.fromCellToPack.minMax3.yMax, batteryPack.fromCellToPack.minMax3.yMin, batteryPack.fromCellToPack.minMax4.'u[1,1]', batteryPack.fromCellToPack.minMax4.yMax, batteryPack.fromCellToPack.minMax4.yMin, batteryPack.fromCellToPack.scaledSum2D.'u[1,1]', batteryPack.fromCellToPack.scaledSum2D.ySum, batteryPack.fromCellToPack.scaledSum2D1.'u[1,1]', batteryPack.fromCellToPack.scaledSum2D1.ySum, batteryPack.fromCellToPack.scaledSum2D2.'u[1,1]', batteryPack.fromCellToPack.scaledSum2D2.ySum, batteryPack.fromCellToPack.actualCapacity.u, batteryPack.fromCellToPack.actualCapacity.packBus.C_actual, batteryPack.fromCellToPack.actualCapacity.packBus.I_max, batteryPack.fromCellToPack.actualCapacity.packBus.I_min, batteryPack.fromCellToPack.actualCapacity.packBus.I_pack, batteryPack.fromCellToPack.actualCapacity.packBus.P_ideal, batteryPack.fromCellToPack.actualCapacity.packBus.P_loss, batteryPack.fromCellToPack.actualCapacity.packBus.P_terminal, batteryPack.fromCellToPack.actualCapacity.packBus.SOC_max, batteryPack.fromCellToPack.actualCapacity.packBus.SOC_mean, batteryPack.fromCellToPack.actualCapacity.packBus.SOC_min, batteryPack.fromCellToPack.actualCapacity.packBus.SOH_max, batteryPack.fromCellToPack.actualCapacity.packBus.SOH_mean, batteryPack.fromCellToPack.actualCapacity.packBus.SOH_min, batteryPack.fromCellToPack.actualCapacity.packBus.T_max, batteryPack.fromCellToPack.actualCapacity.packBus.T_mean, batteryPack.fromCellToPack.actualCapacity.packBus.T_min, batteryPack.fromCellToPack.actualCapacity.packBus.V_max, batteryPack.fromCellToPack.actualCapacity.packBus.V_min, batteryPack.fromCellToPack.actualCapacity.packBus.V_pack, batteryPack.fromCellToPack.nominalCapacity.packBus.C_actual, batteryPack.fromCellToPack.nominalCapacity.packBus.I_max, batteryPack.fromCellToPack.nominalCapacity.packBus.I_min, batteryPack.fromCellToPack.nominalCapacity.packBus.I_pack, batteryPack.fromCellToPack.nominalCapacity.packBus.P_ideal, batteryPack.fromCellToPack.nominalCapacity.packBus.P_loss, batteryPack.fromCellToPack.nominalCapacity.packBus.P_terminal, batteryPack.fromCellToPack.nominalCapacity.packBus.SOC_max, batteryPack.fromCellToPack.nominalCapacity.packBus.SOC_mean, batteryPack.fromCellToPack.nominalCapacity.packBus.SOC_min, batteryPack.fromCellToPack.nominalCapacity.packBus.SOH_max, batteryPack.fromCellToPack.nominalCapacity.packBus.SOH_mean, batteryPack.fromCellToPack.nominalCapacity.packBus.SOH_min, batteryPack.fromCellToPack.nominalCapacity.packBus.T_max, batteryPack.fromCellToPack.nominalCapacity.packBus.T_mean, batteryPack.fromCellToPack.nominalCapacity.packBus.T_min, batteryPack.fromCellToPack.nominalCapacity.packBus.V_max, batteryPack.fromCellToPack.nominalCapacity.packBus.V_min} = fmi_Functions.fmiGetReal(fmi, {637534596, 637534596, 637534756, 637534756, 637534756, 637534522, 637534522, 637534381, 637534596, 637534596, 905970476, 637537305, 637537305, 637534508, 905970323, 905970324, 905970322, 33554444, 33554444, 33554444, 637534596, 637534596, 637534756, 637534756, 637534756, 637534522, 637534522, 637534381, 637534596, 637534596, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534606, 637534756, 637537305, 637534522, 637534598, 637534598, 637534598, 637535266, 637535266, 637535266, 33554444, 33554444, 33554444, 637535267, 637535267, 637535267, 637534596, 637534596, 637534596, 33554444, 33554444, 637535267, 637535267, 637534596, 637534596, 905970476, 905970476, 637537305, 637537305, 637534508, 905970323, 905970324, 905970322, 33554444, 33554444, 33554444, 637534596, 637534596, 637534596, 637534756, 637534756, 637534756, 637534522, 637534522, 637534381, 905970476, 637537305, 637537305, 637534508, 905970323, 905970324, 905970322, 33554444, 33554444, 33554444, 637534596, 637534596, 637534596, 637534756, 637534756, 637534756, 637534522, 637534522}, myTime);
{batteryPack.fromCellToPack.nominalCapacity.packBus.V_pack, batteryPack.fromCellToPack.min2D.'u[1,1]', batteryPack.fromCellToPack.min2D.yMin, batteryPack.fromCellToPack.'actualCapacityCell[1,1]'.y, batteryPack.fromCellToPack.'actualCapacityCell[1,1]'.cellBus.C_actual, batteryPack.fromCellToPack.'actualCapacityCell[1,1]'.cellBus.OCV, batteryPack.fromCellToPack.'actualCapacityCell[1,1]'.cellBus.P_ideal, batteryPack.fromCellToPack.'actualCapacityCell[1,1]'.cellBus.P_loss, batteryPack.fromCellToPack.'actualCapacityCell[1,1]'.cellBus.P_terminal, batteryPack.fromCellToPack.'actualCapacityCell[1,1]'.cellBus.R_total, batteryPack.fromCellToPack.'actualCapacityCell[1,1]'.cellBus.SOC, batteryPack.fromCellToPack.'actualCapacityCell[1,1]'.cellBus.SOH, batteryPack.fromCellToPack.'actualCapacityCell[1,1]'.cellBus.SOH_resistance, batteryPack.fromCellToPack.'actualCapacityCell[1,1]'.cellBus.T, batteryPack.fromCellToPack.'actualCapacityCell[1,1]'.cellBus.i, batteryPack.fromCellToPack.'actualCapacityCell[1,1]'.cellBus.v, batteryPack.fromCellToPack.'nominalCapacityCell[1,1]'.cellBus.C_actual, batteryPack.fromCellToPack.'nominalCapacityCell[1,1]'.cellBus.OCV, batteryPack.fromCellToPack.'nominalCapacityCell[1,1]'.cellBus.P_ideal, batteryPack.fromCellToPack.'nominalCapacityCell[1,1]'.cellBus.P_loss, batteryPack.fromCellToPack.'nominalCapacityCell[1,1]'.cellBus.P_terminal, batteryPack.fromCellToPack.'nominalCapacityCell[1,1]'.cellBus.R_total, batteryPack.fromCellToPack.'nominalCapacityCell[1,1]'.cellBus.SOC, batteryPack.fromCellToPack.'nominalCapacityCell[1,1]'.cellBus.SOH, batteryPack.fromCellToPack.'nominalCapacityCell[1,1]'.cellBus.SOH_resistance, batteryPack.fromCellToPack.'nominalCapacityCell[1,1]'.cellBus.T, batteryPack.fromCellToPack.'nominalCapacityCell[1,1]'.cellBus.i, batteryPack.fromCellToPack.'nominalCapacityCell[1,1]'.cellBus.v, batteryPack.fromCellToPack.gain.u, batteryPack.fromCellToPack.gain.y, batteryPack.realExpression3.y, batteryPack.realExpression4.y, batteryPack.realExpression5.y, batteryPack.realExpression1.y, batteryPack.realExpression2.y, batteryPack.packCurrent.u, batteryPack.packCurrent.packBus.I_pack, batteryPack.packCurrent.packBus.C_actual, batteryPack.packCurrent.packBus.I_max, batteryPack.packCurrent.packBus.I_min, batteryPack.packCurrent.packBus.P_ideal, batteryPack.packCurrent.packBus.P_loss, batteryPack.packCurrent.packBus.P_terminal, batteryPack.packCurrent.packBus.SOC_max, batteryPack.packCurrent.packBus.SOC_mean, batteryPack.packCurrent.packBus.SOC_min, batteryPack.packCurrent.packBus.SOH_max, batteryPack.packCurrent.packBus.SOH_mean, batteryPack.packCurrent.packBus.SOH_min, batteryPack.packCurrent.packBus.T_max, batteryPack.packCurrent.packBus.T_mean, batteryPack.packCurrent.packBus.T_min, batteryPack.packCurrent.packBus.V_max, batteryPack.packCurrent.packBus.V_min, batteryPack.packCurrent.packBus.V_pack, batteryPack.packVoltage.u, batteryPack.packVoltage.packBus.V_pack, batteryPack.packVoltage.packBus.C_actual, batteryPack.packVoltage.packBus.I_max, batteryPack.packVoltage.packBus.I_min, batteryPack.packVoltage.packBus.I_pack, batteryPack.packVoltage.packBus.P_ideal, batteryPack.packVoltage.packBus.P_loss, batteryPack.packVoltage.packBus.P_terminal, batteryPack.packVoltage.packBus.SOC_max, batteryPack.packVoltage.packBus.SOC_mean, batteryPack.packVoltage.packBus.SOC_min, batteryPack.packVoltage.packBus.SOH_max, batteryPack.packVoltage.packBus.SOH_mean, batteryPack.packVoltage.packBus.SOH_min, batteryPack.packVoltage.packBus.T_max, batteryPack.packVoltage.packBus.T_mean, batteryPack.packVoltage.packBus.T_min, batteryPack.packVoltage.packBus.V_max, batteryPack.packVoltage.packBus.V_min, batteryPack.idealPower.u, batteryPack.idealPower.packBus.P_ideal, batteryPack.idealPower.packBus.C_actual, batteryPack.idealPower.packBus.I_max, batteryPack.idealPower.packBus.I_min, batteryPack.idealPower.packBus.I_pack, batteryPack.idealPower.packBus.P_loss, batteryPack.idealPower.packBus.P_terminal, batteryPack.idealPower.packBus.SOC_max, batteryPack.idealPower.packBus.SOC_mean, batteryPack.idealPower.packBus.SOC_min, batteryPack.idealPower.packBus.SOH_max, batteryPack.idealPower.packBus.SOH_mean, batteryPack.idealPower.packBus.SOH_min, batteryPack.idealPower.packBus.T_max, batteryPack.idealPower.packBus.T_mean, batteryPack.idealPower.packBus.T_min, batteryPack.idealPower.packBus.V_max, batteryPack.idealPower.packBus.V_min, batteryPack.idealPower.packBus.V_pack, batteryPack.lossPower.u, batteryPack.lossPower.packBus.P_loss, batteryPack.lossPower.packBus.C_actual, batteryPack.lossPower.packBus.I_max, batteryPack.lossPower.packBus.I_min} = fmi_Functions.fmiGetReal(fmi, {637534381, 637534599, 637534599, 637534592, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637534756, 637537305, 637534522, 637534592, 637534591, 637534996, 637534595, 637534594, 905970049, 33554444, 637534596, 637534606, 637534756, 637537305, 637534522, 637534599, 905970486, 905970490, 905970491, 905970492, 637535037, 637535038, 637534508, 637534508, 905970476, 637537305, 637537305, 905970323, 905970324, 905970322, 33554444, 33554444, 33554444, 637534596, 637534596, 637534596, 637534756, 637534756, 637534756, 637534522, 637534522, 637534381, 637534381, 637534381, 905970476, 637537305, 637537305, 637534508, 905970323, 905970324, 905970322, 33554444, 33554444, 33554444, 637534596, 637534596, 637534596, 637534756, 637534756, 637534756, 637534522, 637534522, 905970323, 905970323, 905970476, 637537305, 637537305, 637534508, 905970324, 905970322, 33554444, 33554444, 33554444, 637534596, 637534596, 637534596, 637534756, 637534756, 637534756, 637534522, 637534522, 637534381, 905970324, 905970324, 905970476, 637537305, 637537305}, myTime);
{batteryPack.lossPower.packBus.I_pack, batteryPack.lossPower.packBus.P_ideal, batteryPack.lossPower.packBus.P_terminal, batteryPack.lossPower.packBus.SOC_max, batteryPack.lossPower.packBus.SOC_mean, batteryPack.lossPower.packBus.SOC_min, batteryPack.lossPower.packBus.SOH_max, batteryPack.lossPower.packBus.SOH_mean, batteryPack.lossPower.packBus.SOH_min, batteryPack.lossPower.packBus.T_max, batteryPack.lossPower.packBus.T_mean, batteryPack.lossPower.packBus.T_min, batteryPack.lossPower.packBus.V_max, batteryPack.lossPower.packBus.V_min, batteryPack.lossPower.packBus.V_pack, batteryPack.terminalPower.u, batteryPack.terminalPower.packBus.P_terminal, batteryPack.terminalPower.packBus.C_actual, batteryPack.terminalPower.packBus.I_max, batteryPack.terminalPower.packBus.I_min, batteryPack.terminalPower.packBus.I_pack, batteryPack.terminalPower.packBus.P_ideal, batteryPack.terminalPower.packBus.P_loss, batteryPack.terminalPower.packBus.SOC_max, batteryPack.terminalPower.packBus.SOC_mean, batteryPack.terminalPower.packBus.SOC_min, batteryPack.terminalPower.packBus.SOH_max, batteryPack.terminalPower.packBus.SOH_mean, batteryPack.terminalPower.packBus.SOH_min, batteryPack.terminalPower.packBus.T_max, batteryPack.terminalPower.packBus.T_mean, batteryPack.terminalPower.packBus.T_min, batteryPack.terminalPower.packBus.V_max, batteryPack.terminalPower.packBus.V_min, batteryPack.terminalPower.packBus.V_pack, speedInput.y, realExtend.u, realExtend.'y[3]', realExtend1.u, realExtend1.'y[3]'} = fmi_Functions.fmiGetReal(fmi, {637534508, 905970323, 905970322, 33554444, 33554444, 33554444, 637534596, 637534596, 637534596, 637534756, 637534756, 637534756, 637534522, 637534522, 637534381, 905970322, 905970322, 905970476, 637537305, 637537305, 637534508, 905970323, 905970324, 33554444, 33554444, 33554444, 637534596, 637534596, 637534596, 637534756, 637534756, 637534756, 637534522, 637534522, 637534381, 637534380, 335544320, 335544320, 335544321, 335544321}, myTime);
{drive.rotateCW_In, drive.controller.rotateCW_In, drive.controller.rotateCW_Out, drive.modulation.rotateCW_In, drive.modulation.rotateCW, drive.inverter.rotateCW, drive.inverter.coreElement.rotateCW, batteryPack.cell.agingModel.cycleAging.discharging} = fmi_Functions.fmiGetBoolean(fmi, {637537366, 637537366, 637537366, 637537366, 637537366, 637537366, 637537366, 637534710}, integer(myTime));
  annotation (__Dymola_FMUImportVersion="Dymola 2021x", __Dymola_FMUImportPath="C:/dev/MOVE_Collaboration/DrivetrainValidation/MATLAB/FMUs/Hacker_Q150_45.fmu", __Dymola_FMUImportIncludeAllVariables="true", __Dymola_FMUImportIntegrate="false", experiment(StartTime=0.0, StopTime=150.0, Tolerance=0.0001),
    Icon(graphics={
      Rectangle(
        extent={{-100,100},{100,-100}},
        lineColor={95,95,95},
        fillColor={255,255,255},
        fillPattern=FillPattern.Solid,
        lineThickness=0.5),
      Bitmap(extent={{-95,-95},{95,95}},
      fileName="modelica://Hacker_Q150_45_fmu/Resources/Library/FMU/Hacker_Q150_45/model.png"),
      Text(extent={{-150,150},{150,110}},
        lineColor={0,0,255},
        textString="%name"),
      Text(extent={{-150,-110},{150,-150}},
        lineColor={95,95,95},
        textString="FMI 1.0 ME")}),
Documentation(info="<html>
<h4>ModelDescription Attributes</h4>
<ul>
<li>fmiVersion = 1.0</li>
<li>modelName = Hacker_Q150_45</li>
<li>generationTool = Dymola Version 2020x (64-bit), 2019-10-10 (requires license to execute)</li>
<li>generationDateAndTime = 2020-10-30T14:39:53Z</li>
</ul>
</html>"));
end Hacker_Q150_45_fmu;
