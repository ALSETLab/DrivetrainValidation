#1
char Aclass(3,24)
Adymosim
1.4
Modelica experiment file


#    Experiment parameters
double experiment(7,1)
       0                   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
       0                   # StopTime     Time at which integration stops
       0                   # Increment    Communication step size, if > 0
     100                   # nInterval    Number of communication intervals, if > 0
  1.0000000000000000E-04   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
       4                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       1                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       1                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
       0                   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
  9.9999999999999998E-13   # teps     Bound to check, if 2 equal time instants
  1.0000000000000000E-10   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
       0                   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 1                         # lx       0/1 do not/store x  (state variables)
 1                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 0                         # lz       0/1 do not/store z  (indicator signals)
 1                         # lw       0/1 do not/store w  (auxiliary signals)
 1                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(116,66)
drive.simpleMotor_EMF.R
drive.simpleMotor_EMF.useL
drive.simpleMotor_EMF.L
drive.simpleMotor_EMF.Jr
drive.simpleMotor_EMF.Js
drive.simpleMotor_EMF.b
drive.simpleMotor_EMF.useSupport
drive.simpleMotor_EMF.useThermalPort
drive.simpleMotor_EMF.k
drive.simpleMotor_EMF.v
drive.simpleMotor_EMF.pin_n.v
drive.simpleMotor_EMF.resistor.R
drive.simpleMotor_EMF.resistor.T_ref
drive.simpleMotor_EMF.resistor.alpha
drive.simpleMotor_EMF.resistor.v
drive.simpleMotor_EMF.resistor.n.v
drive.simpleMotor_EMF.resistor.useHeatPort
drive.simpleMotor_EMF.resistor.T
drive.simpleMotor_EMF.resistor.LossPower
drive.simpleMotor_EMF.resistor.T_heatPort
drive.simpleMotor_EMF.resistor.R_actual
drive.simpleMotor_EMF.backEMF.useSupport
drive.simpleMotor_EMF.backEMF.k
drive.simpleMotor_EMF.backEMF.v
drive.simpleMotor_EMF.backEMF.n.v
drive.simpleMotor_EMF.backEMF.support.phi
drive.simpleMotor_EMF.backEMF.internalSupport.phi
drive.simpleMotor_EMF.backEMF.internalSupport.flange.phi
drive.simpleMotor_EMF.fixed.phi0
drive.simpleMotor_EMF.fixed.flange.phi
drive.simpleMotor_EMF.overallInductance.v
drive.simpleMotor_EMF.overallInductance.i
drive.simpleMotor_EMF.overallInductance.der(i)
drive.simpleMotor_EMF.overallInductance.L
drive.speedDependentTorque.useSupport
drive.speedDependentTorque.phi_support
drive.multiSensorLoad.power
drive.averaged.pin_p.v
drive.averaged.pin_p.i
drive.averaged.pin_n.v
drive.averaged.data.bidirectional
drive.averaged.pin_n_Out.v
drive.averaged.coreElement.bidirectional
drive.averaged.coreElement.uniOrBidirectional.y
drive.averaged.coreElement.uniOrBidirectional.u1
drive.averaged.coreElement.uniOrBidirectional.u2
drive.averaged.coreElement.uniOrBidirectional.y1
drive.averaged.coreElement.uniOrBidirectional.y2
drive.averaged.coreElement.uniOrBidirectional.k
drive.averaged.coreElement.uniOrBidirectional.y0
drive.averaged.coreElement.uniOrBidirectional.gradient.k
drive.averaged.coreElement.uniOrBidirectional.add.u1
drive.averaged.coreElement.uniOrBidirectional.add.k1
drive.averaged.coreElement.uniOrBidirectional.add.k2
drive.averaged.coreElement.uniOrBidirectional.offset.k
drive.averaged.coreElement.uniOrBidirectional.offset.y
drive.averaged.coreElement.uniOrBidirectional.limiter.uMax
drive.averaged.coreElement.uniOrBidirectional.limiter.uMin
drive.averaged.coreElement.uniOrBidirectional.limiter.strict
drive.averaged.coreElement.uniOrBidirectional.limiter.homotopyType
drive.averaged.coreElement.idealBuckConverter.v1
drive.averaged.coreElement.idealBuckConverter.p1.v
drive.averaged.coreElement.idealBuckConverter.n1.v
drive.averaged.coreElement.idealBuckConverter.n2.v
drive.averaged.coreElement.idealBuckConverter.dutyCycle
drive.averaged.coreElement.pin_p_supply.v
drive.averaged.coreElement.pin_n_supply.v
drive.averaged.coreElement.pin_n.v
drive.averaged.coreElement.signChanger.y
drive.averaged.ground.p.v
drive.averaged.ground.p.i
drive.averaged.currentSensorDC.p.v
drive.averaged.currentSensorDC.n.v
drive.averaged.currentAC_Averaged.u
drive.averaged.voltageChanger.y
drive.averaged.voltageSensorDC.p.v
drive.averaged.voltageSensorDC.p.i
drive.averaged.voltageSensorDC.n.v
drive.averaged.voltageSensorDC.n.i
drive.averaged.voltageSensorDC.v
drive.averaged.voltageDC.u
drive.ground2.p.v
drive.ground2.p.i
drive.inertia.J
drive.inertia.stateSelect
drive.inertia.phi
drive.inertia.der(phi)
drive.inertia.w
drive.inertia.der(w)
drive.potentialSensor.p.v
drive.potentialSensor.p.i
drive.potentialSensor.phi
drive.phi1
drive.batteryPack.V
drive.batteryPack.v
drive.batteryPack.p.v
drive.batteryPack.n.v
rotationCW
omega
tau
tau_out
omega_out
realExtend.y[1]
realExtend.y[2]
realExtend1.y[1]
realExtend1.y[2]
phi1
i1
drive.averaged.voltageDC.bldcBus.voltageDC
drive.averaged.bldcBus.voltageDC
drive.averaged.currentAC_Averaged.bldcBus.voltageDC
drive.averaged.currentDC.bldcBus.voltageDC
DymolaConvertInputToReal0
DymolaConvertInputToREAL0
CPUtime
EventCounter

double initialValue(116,6)
  0  1.5500000000000000E-02  0       0                  6   256   # drive.simpleMotor_EMF.R
  0       1                  0       0                  6   257   # drive.simpleMotor_EMF.useL
  0  3.9999999999999998E-06  0       0                  6   256   # drive.simpleMotor_EMF.L
  0  1.0000000000000001E-15  0       0                  6   256   # drive.simpleMotor_EMF.Jr
  0  1.0000000000000001E-15  0       0                  6   256   # drive.simpleMotor_EMF.Js
  0  2.9999999999999997E-04  0       0                  6   256   # drive.simpleMotor_EMF.b
  0       0                  0       0                  6   257   # drive.simpleMotor_EMF.useSupport
  0       0                  0       0                  6   257   # drive.simpleMotor_EMF.useThermalPort
  0  1.3650000000000001E-01  0       0                  6   256   # drive.simpleMotor_EMF.k
  0       0                  0       0                  6   256   # drive.simpleMotor_EMF.v
  0       0                  0       0                  6   260   # drive.simpleMotor_EMF.pin_n.v
  0  1.5500000000000000E-02  0       0                  6   256   # drive.simpleMotor_EMF.resistor.R
  0  2.9314999999999998E+02  0 1.0000000000000000E+100  6   256   # drive.simpleMotor_EMF.resistor.T_ref
  0  3.9699999999999996E-03  0       0                  6   256   # drive.simpleMotor_EMF.resistor.alpha
  0       0                  0       0                  6   256   # drive.simpleMotor_EMF.resistor.v
  0       0                  0       0                  6   260   # drive.simpleMotor_EMF.resistor.n.v
  0       0                  0       0                  6   769   # drive.simpleMotor_EMF.resistor.useHeatPort
  0  2.9314999999999998E+02  0 1.0000000000000000E+100  6   256   # drive.simpleMotor_EMF.resistor.T
  0       0                  0       0                  6   256   # drive.simpleMotor_EMF.resistor.LossPower
  0  2.9314999999999998E+02  0 1.0000000000000000E+100  6   256   # drive.simpleMotor_EMF.resistor.T_heatPort
  0  1.5500000000000000E-02  0       0                  6   256   # drive.simpleMotor_EMF.resistor.R_actual
  0       1                  0       0                  6   769   # drive.simpleMotor_EMF.backEMF.useSupport
  0  1.3650000000000001E-01  0       0                  6   256   # drive.simpleMotor_EMF.backEMF.k
  0       0                  0       0                  6   256   # drive.simpleMotor_EMF.backEMF.v
  0       0                  0       0                  6   260   # drive.simpleMotor_EMF.backEMF.n.v
  0       0                  0       0                  6   260   # drive.simpleMotor_EMF.backEMF.support.phi
  0       0                  0       0                  6  1280   # drive.simpleMotor_EMF.backEMF.internalSupport.phi
  0       0                  0       0                  6  1284   # drive.simpleMotor_EMF.backEMF.internalSupport.flange.phi
  0       0                  0       0                  6   256   # drive.simpleMotor_EMF.fixed.phi0
  0       0                  0       0                  6   260   # drive.simpleMotor_EMF.fixed.flange.phi
  0       0                  0       0                  6   256   # drive.simpleMotor_EMF.overallInductance.v
 -1       0                  0       0                  2   280   # drive.simpleMotor_EMF.overallInductance.i
  0       0                  0       0                  3   256   # drive.simpleMotor_EMF.overallInductance.der(i)
  0  3.9999999999999998E-06  0       0                  6   256   # drive.simpleMotor_EMF.overallInductance.L
  0       0                  0       0                  6   769   # drive.speedDependentTorque.useSupport
  0       0                  0       0                  6  1280   # drive.speedDependentTorque.phi_support
  0       0                  0       0                  6   256   # drive.multiSensorLoad.power
  0      65                  0       0                  6   260   # drive.averaged.pin_p.v
  0       0                  0       0                  6   388   # drive.averaged.pin_p.i
  0       0                  0       0                  6   260   # drive.averaged.pin_n.v
  0       0                  0       0                  6   257   # drive.averaged.data.bidirectional
  0       0                  0       0                  6   260   # drive.averaged.pin_n_Out.v
  0       0                  0       0                  6   257   # drive.averaged.coreElement.bidirectional
  0       0                  0       0                  6   256   # drive.averaged.coreElement.uniOrBidirectional.y
  0       0                  0       0                  6   256   # drive.averaged.coreElement.uniOrBidirectional.u1
  0       1                  0       0                  6   256   # drive.averaged.coreElement.uniOrBidirectional.u2
  0       0                  0       0                  6   256   # drive.averaged.coreElement.uniOrBidirectional.y1
  0       1                  0       0                  6   256   # drive.averaged.coreElement.uniOrBidirectional.y2
  0       1                  0       0                  6   256   # drive.averaged.coreElement.uniOrBidirectional.k
  0       0                  0       0                  6   256   # drive.averaged.coreElement.uniOrBidirectional.y0
  0       1                  0       0                  6   256   # drive.averaged.coreElement.uniOrBidirectional.gradient.k
  0       0                  0       0                  6   256   # drive.averaged.coreElement.uniOrBidirectional.add.u1
  0       1                  0       0                  6   256   # drive.averaged.coreElement.uniOrBidirectional.add.k1
  0       1                  0       0                  6   256   # drive.averaged.coreElement.uniOrBidirectional.add.k2
  0       0                  0       0                  6   256   # drive.averaged.coreElement.uniOrBidirectional.offset.k
  0       0                  0       0                  6   256   # drive.averaged.coreElement.uniOrBidirectional.offset.y
  0       1                  0       0                  6   256   # drive.averaged.coreElement.uniOrBidirectional.limiter.uMax
  0       0                  0       0                  6   256   # drive.averaged.coreElement.uniOrBidirectional.limiter.uMin
  0       0                  0       0                  6   257   # drive.averaged.coreElement.uniOrBidirectional.limiter.strict
  0       2                  1       4                  6   258   # drive.averaged.coreElement.uniOrBidirectional.limiter.homotopyType
  0      65                  0       0                  6   256   # drive.averaged.coreElement.idealBuckConverter.v1
  0      65                  0       0                  6   260   # drive.averaged.coreElement.idealBuckConverter.p1.v
  0       0                  0       0                  6   260   # drive.averaged.coreElement.idealBuckConverter.n1.v
  0       0                  0       0                  6   260   # drive.averaged.coreElement.idealBuckConverter.n2.v
  0       0                  0       1                  6   256   # drive.averaged.coreElement.idealBuckConverter.dutyCycle
  0      65                  0       0                  6   260   # drive.averaged.coreElement.pin_p_supply.v
  0       0                  0       0                  6   260   # drive.averaged.coreElement.pin_n_supply.v
  0       0                  0       0                  6   260   # drive.averaged.coreElement.pin_n.v
  0       0                  0       0                  6   320   # drive.averaged.coreElement.signChanger.y
  0       0                  0       0                  6   260   # drive.averaged.ground.p.v
  0       0                  0       0                  6   388   # drive.averaged.ground.p.i
  0      65                  0       0                  6   260   # drive.averaged.currentSensorDC.p.v
  0      65                  0       0                  6   260   # drive.averaged.currentSensorDC.n.v
  0       0                  0       0                  6   256   # drive.averaged.currentAC_Averaged.u
  0       0                  0       0                  6   320   # drive.averaged.voltageChanger.y
  0      65                  0       0                  6   260   # drive.averaged.voltageSensorDC.p.v
  0       0                  0       0                  6   388   # drive.averaged.voltageSensorDC.p.i
  0       0                  0       0                  6   260   # drive.averaged.voltageSensorDC.n.v
  0       0                  0       0                  6   388   # drive.averaged.voltageSensorDC.n.i
  0      65                  0       0                  6   256   # drive.averaged.voltageSensorDC.v
  0      65                  0       0                  6   256   # drive.averaged.voltageDC.u
  0       0                  0       0                  6   260   # drive.ground2.p.v
  0       0                  0       0                  6   388   # drive.ground2.p.i
  0  6.2899999999999998E-02  0 1.0000000000000000E+100  6   256   # drive.inertia.J
  0       3                  1       5                  6   770   # drive.inertia.stateSelect
 -1       0                  0       0                  2   280   # drive.inertia.phi
  0       0                  0       0                  3   256   # drive.inertia.der(phi)
 -1       0                  0       0                  2   280   # drive.inertia.w
  0       0                  0       0                  3   256   # drive.inertia.der(w)
  0      65                  0       0                  6   260   # drive.potentialSensor.p.v
  0       0                  0       0                  6   388   # drive.potentialSensor.p.i
  0      65                  0       0                  6   256   # drive.potentialSensor.phi
  0      65                  0       0                  6   256   # drive.phi1
  0      65                  0       0                  6   256   # drive.batteryPack.V
  0      65                  0       0                  6   256   # drive.batteryPack.v
  0      65                  0       0                  6   260   # drive.batteryPack.p.v
  0       0                  0       0                  6   260   # drive.batteryPack.n.v
 -1       0                  0       0                  5   321   # rotationCW
 -1       0                  0       0                  5   256   # omega
 -1       0                  0       0                  5   256   # tau
  0       0                  0       0                  4   256   # tau_out
  0       0                  0       0                  4   256   # omega_out
  0       0                  0       0                  6   256   # realExtend.y[1]
  0       0                  0       0                  6   256   # realExtend.y[2]
  0       0                  0       0                  6   256   # realExtend1.y[1]
  0       0                  0       0                  6   256   # realExtend1.y[2]
  0      65                  0       0                  4   256   # phi1
  0       0                  0       0                  4   256   # i1
  0      65                  0       0                  6   260   # drive.averaged.voltageDC.bldcBus.voltageDC
  0      65                  0       0                  6   260   # drive.averaged.bldcBus.voltageDC
  0      65                  0       0                  6   260   # drive.averaged.currentAC_Averaged.bldcBus.voltageDC
  0      65                  0       0                  6   260   # drive.averaged.currentDC.bldcBus.voltageDC
  0       0                  0       0                  6   832   # DymolaConvertInputToReal0
  0       0                  0       0                  6   833   # DymolaConvertInputToREAL0
  0       0                  0       0                  4   256   # CPUtime
  0       0                  0       0                  4   256   # EventCounter


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable and flags according to dsBaseType
#  <value>&3= 0: real.
#  <value>&3= 1: boolean.
#  <value>&3= 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, no special action takes place (default setting).
#
# - If there are only FIXED and FREE variables and the number of
#   FREE parameters, states and inputs is IDENTICAL to the number of
#   FIXED state derivatives, outputs and auxiliary variables, a non-linear
#   equation is solved to determine a consistent set of initial conditions.
#
# - In all other cases the following optimization problem is solved:
#      min( sum( weight(i)*( (value(i) - DESIRED(i))/scale(i) )^2 ) )
#   under the constraint that the differential equation is fulfilled
#   at the initial time. In most cases weight(i)=1 is sufficient, due
#   to the automatic scaling (if DESIRED(i) is not close to zero,
#   scale(i) = DESIRED(i). Otherwise, the scaling is based on the
#   nominal value (and maybe minimum and maximum values given in 
#   column 3 and 4). If these values are zero, scale(i)=1 is used).
#
char initialDescription(116,99)
Phase Resistances R_ref at 20degC [Ohm]
Activate the internal inductance (electric dynamics) [:#(type=Boolean)]
Self inductance [H]
Rotor's moment of inertia [kg.m2]
Stator's moment of inertia (only has effect if stator not fixed (useSupport = false)) [kg.m2]
Damping coefficient [N.m.s/rad]
False: Stator is fixed internally, false: it can rotate [:#(type=Boolean)]
True: thermal connector is provided, false: temperature is fixed internally [:#(type=Boolean)]
Transformation coefficient [N.m/A]
Voltage at the motor [V]
Potential at the pin [V]
Resistance at temperature T_ref [Ohm]
Reference temperature [K|degC]
Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref)) [1/K]
Voltage drop of the two pins (= p.v - n.v) [V]
Potential at the pin [V]
= true, if heatPort is enabled [:#(type=Boolean)]
Fixed device temperature if useHeatPort = false [K|degC]
Loss power leaving component via heatPort [W]
Temperature of heatPort [K|degC]
Actual resistance = R*(1 + alpha*(T_heatPort - T_ref)) [Ohm]
= true, if support flange enabled, otherwise implicitly grounded [:#(type=Boolean)]
Transformation coefficient [N.m/A]
Voltage drop between the two pins [V]
Potential at the pin [V]
Absolute rotation angle of flange [rad|deg]
External support angle (= flange.phi) [rad|deg]
Absolute rotation angle of flange [rad|deg]
Fixed offset angle of housing [rad|deg]
Absolute rotation angle of flange [rad|deg]
Voltage drop of the two pins (= p.v - n.v) [V]
Current flowing from pin p to pin n [A]
der(Current flowing from pin p to pin n) [A/s]
Inductance [H]
= true, if support flange enabled, otherwise implicitly grounded [:#(type=Boolean)]
Absolute angle of support flange [rad|deg]
Power in flange flange_a as output signal [W]
Potential at the pin [V]
Current flowing into the pin [A]
Potential at the pin [V]
Inverter acts like it is controlled by a bidirectional modulation method [:#(type=Boolean)]
Potential at the pin [V]
Inverter acts like it is controlled by a bidirectional modulation method [:#(type=Boolean)]
Connector of Real output signal
Lower boundary of input u, switching from constant value y1 to linear interpolation
Upper boundary of input u, switching from linear interpolation to constant value y2
Minimum value for y
Maximum value for y
Slope of the resulting line equation [1]
Offset of the resulting line equation
Gain value multiplied with input signal [1]
Connector of Real input signal 1
Gain of input signal 1
Gain of input signal 2
Constant output value
Connector of Real output signal
Upper limits of input signals
Lower limits of input signals
= true, if strict limits with noEvent(..) [:#(type=Boolean)]
Simplified model for homotopy-based initialization [:#(type=Modelica.Blocks.Types.LimiterHomotopy)]
Voltage drop of port 1 (= p1.v - n1.v) [V]
Potential at the pin [V]
Potential at the pin [V]
Potential at the pin [V]
[1]
Potential at the pin [V]
Potential at the pin [V]
Potential at the pin [V]
Value of Real output
Potential at the pin [V]
Current flowing into the pin [A]
Potential at the pin [V]
Potential at the pin [V]
DC current of the inverter [A]
Value of Real output [1]
Potential at the pin [V]
Current flowing into the pin [A]
Potential at the pin [V]
Current flowing into the pin [A]
Voltage between pin p and n (= p.v - n.v) as output signal [V]
DC current of the inverter [V]
Potential at the pin [V]
Current flowing into the pin [A]
Moment of inertia [kg.m2]
Priority to use phi and w as states [:#(type=StateSelect)]
Absolute rotation angle of component [rad|deg]
der(Absolute rotation angle of component) [rad/s]
Absolute angular velocity of component (= der(phi)) [rad/s]
der(Absolute angular velocity of component (= der(phi))) [rad/s2]
Potential at the pin [V]
Current flowing into the pin [A]
Absolute voltage potential as output signal [V]
Absolute voltage potential as output signal [V]
Value of constant voltage [V]
Voltage drop of the two pins (= p.v - n.v) [V]
Potential at the pin [V]
Potential at the pin [V]
[:#(prefix=input):#(type=Boolean)]
[1:#(prefix=input)]
Accelerating torque acting at flange (= -flange.tau) [N.m:#(prefix=input)]
Torque in flange flange_a and flange_b (tau = flange_a.tau = -flange_b.tau) as output signal
Absolute angular velocity of flange_a as output signal




Absolute voltage potential as output signal [V]
Current in the branch from p to n as output signal [A]
DC current of the inverter [V]
DC current of the inverter [V]
DC current of the inverter [V]
DC current of the inverter [V]

[:#(type=Boolean)]
[s]


